<?xml version="1.0"?>
<doc>
    <assembly>
        <name>fslib</name>
    </assembly>
    <members>
        <member name="T:fslib.AllmightyText">
            <summary>
            汎用的なテキストを出す
            </summary>
        </member>
        <member name="P:fslib.AllmightyText.ColorType">
            <summary>
            <see cref="T:fslib.ColorType"/>を取得
            </summary>
        </member>
        <member name="P:fslib.AllmightyText.ColorDefault">
            <summary>
            <see cref="T:fslib.ColorSet"/>を取得
            設定した場合は<see cref="T:asd.Color"/>プロパティも自動的に変更される
            設定していない場合はnullを返す
            nullを設定した場合は白色が<see cref="T:asd.Color"/>に設定される
            </summary>
        </member>
        <member name="P:fslib.AllmightyText.DeathTime">
            <summary>
            破棄されるまでの時間(フレーム)を取得する
            </summary>
        </member>
        <member name="P:fslib.AllmightyText.DefaultFont">
            <summary>
            デフォルトのフォント
            </summary>
        </member>
        <member name="M:fslib.AllmightyText.#ctor(asd.Vector2DF,System.String,System.Int32,fslib.ColorType)">
            <summary>
            コンストラクタ
            </summary>
            <param name="pos">初期位置</param>
            <param name="text">表示する文字列</param>
            <param name="deathTime">破棄されるフレーム 0で破棄されない</param>
            <param name="colorType">色の付けるタイプ</param>
        </member>
        <member name="M:fslib.AllmightyText.#ctor(asd.Vector2DF,System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="pos">初期位置</param>
            <param name="text">表示する文字列</param>
            <param name="deathTime">破棄されるフレーム 0で破棄されない</param>
        </member>
        <member name="M:fslib.AllmightyText.#ctor(asd.Vector2DF,System.String)">
            <summary>
            簡易コンストラクタ。
            deathTime = 0として処理する。
            </summary>
            <param name="pos">初期位置</param>
            <param name="text">表示する文字列</param>
        </member>
        <member name="M:fslib.AllmightyText.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.AllmightyText.OnAdded">
            <summary>
            レイヤーに追加された時の挙動
            </summary>
        </member>
        <member name="M:fslib.AllmightyText.OnUpdate">
            <summary>
            asdのアップデート時にされる挙動
            </summary>
        </member>
        <member name="M:fslib.AllmightyText.Clone">
            <summary>
            このオブジェクトの完全なコピーを返す
            </summary>
        </member>
        <member name="M:fslib.AllmightyText.ToString">
            <summary>
            詳細を文字列化する
            </summary>
            <returns></returns>
        </member>
        <member name="M:fslib.AllmightyText.SetPriority(System.Collections.Generic.IEnumerable{fslib.AllmightyText},System.Collections.Generic.IEnumerable{System.Int32},fslib.PriorityType)">
            <summary>
            描画優先度をまとめて設定
            </summary>
            <param name="texts"><see cref="T:fslib.AllmightyText"/>のコレクション</param>
            <param name="priorities">設定したい描画優先度のコレクション</param>
            <param name="type">設定のタイプ</param>
            <returns>A<see cref="T:fslib.AllmightyText"/>のコレクションを返します</returns>
            <exception cref="T:System.DivideByZeroException">type == <see cref="F:fslib.PriorityType.Divide"/>, prioriry == 0の時</exception>
            <exception cref="T:System.IndexOutOfRangeException">texts.Count > priorities.Countだった場合発生</exception>
        </member>
        <member name="M:fslib.AllmightyText.SetPriority(System.Collections.Generic.IEnumerable{fslib.AllmightyText},System.Int32,fslib.PriorityType)">
            <summary>
            描画優先度をまとめて設定
            </summary>
            <param name="texts"><see cref="T:fslib.AllmightyText"/>のリスト</param>
            <param name="priority">設定したい描画優先度の値</param>
            <param name="type">設定のタイプ</param>
            <returns><see cref="T:fslib.AllmightyText"/>のコレクションを返します</returns>
            <exception cref="T:System.DivideByZeroException">type == <see cref="F:fslib.PriorityType.Divide"/>, prioriry == 0の時</exception>
        </member>
        <member name="M:fslib.AllmightyText.DispenseTexts(System.Collections.Generic.IEnumerable{System.String},asd.Vector2DF,asd.Vector2DF,System.UInt32,fslib.DispenseType,asd.Color,System.Int32,fslib.ColorType)">
            <summary>
            文字を並べていく
            </summary>
            <param name="words">文字列</param>
            <param name="firstPosition">最初の文字列の座標</param>
            <param name="interval">文字列同士の間隔</param>
            <param name="baseAmount">改行位置</param>
            <param name="type">横と縦どちらでわけるか</param>
            <param name="color">文字列の色</param>
            <param name="deathTime">文字列の残留時間</param>
            <param name="colorType">色のタイプ</param>
        </member>
        <member name="M:fslib.AllmightyText.DispenseTexts(System.Collections.Generic.IEnumerable{System.String},asd.Vector2DF,asd.Vector2DF,System.UInt32,fslib.DispenseType,fslib.ColorSet,System.Int32,fslib.ColorType)">
            <summary>
            文字を並べていく
            </summary>
            <param name="words">文字列</param>
            <param name="firstPosition">最初の文字列の座標</param>
            <param name="interval">文字列同士の間隔</param>
            <param name="baseAmount">改行位置</param>
            <param name="type">横と縦どちらでわけるか</param>
            <param name="colorSet">文字列の色の種類</param>
            <param name="deathTime">文字列の残留時間</param>
            <param name="colorType">色のタイプ</param>
        </member>
        <member name="M:fslib.AllmightyText.ExtractTexts(System.Collections.Generic.IEnumerable{fslib.AllmightyText})">
            <summary>
            <see cref="T:fslib.AllmightyText"/>のコレクションからその<see cref="P:asd.TextObject2D.Text"/>のコレクションを抽出する
            </summary>
            <param name="texts"></param>
        </member>
        <member name="M:fslib.AllmightyText.Divide(System.Int32)">
            <summary>
            <see cref="T:fslib.AllmightyText"/>の文字列を指定の場所で区切る。
            </summary>
            <param name="index">文字列を区切る場所</param>
            <returns>
            区切られた<see cref="T:fslib.AllmightyText"/>のコレクション。
            1つ目は0文字目から<paramref name="index"/>文字目まで, 2つ目は<paramref name="index"/> + 1文字目から最後までのテキストを持つ。
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/>の値が負の値または文字列の文字数以上
            </exception>
            <remarks><see cref="P:asd.Object2D.Position"/>と<see cref="P:asd.TextObject2D.Text"/>以外の値は元の値をコピーする。</remarks>
        </member>
        <member name="M:fslib.AllmightyText.Extract(System.Int32,System.Int32)">
            <summary>
            指定した文字列を抽出した<see cref="T:fslib.AllmightyText"/>を抽出する。
            </summary>
            <param name="index">抽出する文字列の開始点</param>
            <param name="count">抽出する文字数</param>
            <returns>文字列が抽出された<see cref="T:fslib.AllmightyText"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            ・<paramref name="index"/>が負の値または<paramref name="count"/>以上
            ・<paramref name="count"/>が文字数よりも大きい
            </exception>
            <remarks><see cref="P:asd.Object2D.Position"/>と<see cref="P:asd.TextObject2D.Text"/>以外の値は元の値をコピーする。</remarks>
        </member>
        <member name="M:fslib.AllmightyText.ColoringPartically(System.Int32,System.Int32,asd.Color)">
            <summary>
            文字列を抽出して真ん中の文字列に色を付ける。
            </summary>
            <param name="index">抽出する文字列の開始点</param>
            <param name="count">抽出する文字数</param>
            <param name="color">真ん中の文字列につける色</param>
            <remarks><see cref="P:asd.Object2D.Position"/>と<see cref="P:asd.TextObject2D.Text"/>以外の値は元の値をコピーする。</remarks>
        </member>
        <member name="M:fslib.AllmightyText.ColoringPartically(System.Int32,System.Int32,fslib.ColorSet)">
            <summary>
            文字列を抽出して真ん中の文字列に色を付ける。
            </summary>
            <param name="index">抽出する文字列の開始点</param>
            <param name="count">抽出する文字数</param>
            <param name="colorSet">真ん中の文字列につける色</param>
            <remarks><see cref="P:asd.Object2D.Position"/>と<see cref="P:asd.TextObject2D.Text"/>，<see cref="P:asd.TextObject2D.Color"/>以外の値は元の値をコピーする。</remarks>
        </member>
        <member name="M:fslib.AllmightyTextEx.SetPriority(System.Collections.Generic.IEnumerable{fslib.AllmightyText},System.Collections.Generic.IEnumerable{System.Int32},fslib.PriorityType)">
            <summary>
            描画優先度をまとめて設定
            </summary>
            <param name="texts"><see cref="T:fslib.AllmightyText"/>のコレクション</param>
            <param name="priorities">設定したい描画優先度のコレクション</param>
            <param name="type">設定のタイプ</param>
            <returns><see cref="T:fslib.AllmightyText"/>のコレクションを返します</returns>
            <exception cref="T:System.DivideByZeroException">type == <see cref="F:fslib.PriorityType.Divide"/>, prioriry == 0の時</exception>
            <exception cref="T:System.IndexOutOfRangeException">texts.Count > priorities.Countだった場合発生</exception>
        </member>
        <member name="M:fslib.AllmightyTextEx.SetPriority(System.Collections.Generic.IEnumerable{fslib.AllmightyText},System.Int32,fslib.PriorityType)">
            <summary>
            描画優先度をまとめて設定
            </summary>
            <param name="texts">AllmightyTextのリスト</param>
            <param name="priority">設定したい描画優先度の値</param>
            <param name="type">設定のタイプ</param>
            <returns>AllmightyTextのコレクションを返します</returns>
            <exception cref="T:System.DivideByZeroException">type == <see cref="F:fslib.PriorityType.Divide"/>, prioriry == 0の時</exception>
        </member>
        <member name="M:fslib.AllmightyTextEx.DispenseTexts(System.Collections.Generic.IEnumerable{System.String},asd.Vector2DF,asd.Vector2DF,System.UInt32,fslib.DispenseType,asd.Color,System.Int32,fslib.ColorType)">
            <summary>
            文字を並べていく
            </summary>
            <param name="words">文字列</param>
            <param name="firstPosition">最初の文字列の座標</param>
            <param name="interval">文字列同士の間隔</param>
            <param name="baseAmount">改行位置</param>
            <param name="type">横と縦どちらでわけるか</param>
            <param name="color">文字列の色</param>
            <param name="deathTime">文字列の残留時間</param>
            <param name="colorType">色のタイプ</param>
        </member>
        <member name="M:fslib.AllmightyTextEx.DispenseTexts(System.Collections.Generic.IEnumerable{System.String},asd.Vector2DF,asd.Vector2DF,System.UInt32,fslib.DispenseType,fslib.ColorSet,System.Int32,fslib.ColorType)">
            <summary>
            文字を並べていく
            </summary>
            <param name="words">文字列</param>
            <param name="firstPosition">最初の文字列の座標</param>
            <param name="interval">文字列同士の間隔</param>
            <param name="baseAmount">改行位置</param>
            <param name="type">横と縦どちらでわけるか</param>
            <param name="colorSet">文字列の色の種類</param>
            <param name="deathTime">文字列の残留時間</param>
            <param name="colorType">色のタイプ</param>
        </member>
        <member name="M:fslib.AllmightyTextEx.ExtractTexts(System.Collections.Generic.IEnumerable{fslib.AllmightyText})">
            <summary>
            <see cref="T:fslib.AllmightyText"/>のコレクションからその<see cref="P:asd.TextObject2D.Text"/>のコレクションを抽出する
            </summary>
        </member>
        <member name="F:fslib.AllmightyTexture.count">
            <summary>
            カウンタ
            </summary>
        </member>
        <member name="P:fslib.AllmightyTexture.DeathTime">
            <summary>
            破棄される時間
            </summary>
        </member>
        <member name="M:fslib.AllmightyTexture.#ctor(asd.Vector2DF,System.String,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">座標</param>
            <param name="path">画像のパス</param>
            <param name="deathTime">破棄される時間(フレーム) 0だと破棄されない</param>
        </member>
        <member name="M:fslib.AllmightyTexture.#ctor(asd.Vector2DF,asd.Texture2D,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">座標</param>
            <param name="texture">画像</param>
            <param name="deathTime">破棄される時間(フレーム) 0だと破棄されない</param>
        </member>
        <member name="M:fslib.AllmightyTexture.Clone">
            <summary>
            新たなインスタンスをコピーする
            </summary>
        </member>
        <member name="M:fslib.AllmightyTexture.SetPriority(System.Collections.Generic.IEnumerable{fslib.AllmightyTexture},System.Collections.Generic.IEnumerable{System.Int32},fslib.PriorityType)">
            <summary>
            描画優先度をまとめて設定
            </summary>
            <param name="textures"><see cref="T:fslib.AllmightyTexture"/>のコレクション</param>
            <param name="priorities">設定したい描画優先度のコレクション</param>
            <param name="type">設定のタイプ</param>
            <returns><see cref="T:fslib.AllmightyTexture"/>のコレクションを返します</returns>
            <exception cref="T:System.DivideByZeroException">type == <see cref="F:fslib.PriorityType.Divide"/>, prioriry == 0の時</exception>
            <exception cref="T:System.IndexOutOfRangeException">textures.Count > priorities.Countだった場合発生</exception>
        </member>
        <member name="M:fslib.AllmightyTexture.SetPriority(System.Collections.Generic.IEnumerable{fslib.AllmightyTexture},System.Int32,fslib.PriorityType)">
            <summary>
            描画優先度をまとめて設定
            </summary>
            <param name="textures"><see cref="T:fslib.AllmightyTexture"/>のコレクション</param>
            <param name="priority">設定したい描画優先度の値</param>
            <param name="type">設定のタイプ</param>
            <returns><see cref="T:fslib.AllmightyTexture"/>のコレクションを返します</returns>
            <exception cref="T:System.DivideByZeroException">type == <see cref="F:fslib.PriorityType.Divide"/>, prioriry == 0の時</exception>
        </member>
        <member name="M:fslib.AllmightyTexture.DispenseTextures(System.Collections.Generic.IEnumerable{System.String},asd.Vector2DF,asd.Vector2DF,System.UInt32,fslib.DispenseType,System.Int32)">
            <summary>
            画像を並べていく
            </summary>
            <param name="pathes">画像のパスのコレクション</param>
            <param name="firstPosition">最初の画像の座標</param>
            <param name="interval">画像同士の間隔</param>
            <param name="baseAmount">折り返し位置</param>
            <param name="type">横と縦どちらでわけるか</param>
            <param name="deathTime">文字列の残留時間 規定値0</param>
            <returns><see cref="T:fslib.AllmightyTexture"/>のコレクションを返します</returns>
        </member>
        <member name="M:fslib.AllmightyTexture.DispenseTextures(System.Collections.Generic.IEnumerable{asd.Texture2D},asd.Vector2DF,asd.Vector2DF,System.UInt32,fslib.DispenseType,System.Int32)">
            <summary>
            画像を並べていく
            </summary>
            <param name="textures">画像のコレクション</param>
            <param name="firstPosition">最初の画像の座標</param>
            <param name="interval">画像同士の間隔</param>
            <param name="baseAmount">折り返し位置</param>
            <param name="type">横と縦どちらでわけるか</param>
            <param name="deathTime">文字列の残留時間 規定値0</param>
            <returns><see cref="T:fslib.AllmightyTexture"/>のコレクションを返します</returns>
        </member>
        <member name="M:fslib.AllmightyTextureEx.SetPriority(System.Collections.Generic.IEnumerable{fslib.AllmightyTexture},System.Collections.Generic.IEnumerable{System.Int32},fslib.PriorityType)">
            <summary>
            描画優先度をまとめて設定
            </summary>
            <param name="textures"><see cref="T:fslib.AllmightyTexture"/>のコレクション</param>
            <param name="priorities">設定したい描画優先度のコレクション</param>
            <param name="type">設定のタイプ</param>
            <returns><see cref="T:fslib.AllmightyTexture"/>のコレクションを返します</returns>
            <exception cref="T:System.DivideByZeroException">type == <see cref="F:fslib.PriorityType.Divide"/>, prioriry == 0の時</exception>
            <exception cref="T:System.IndexOutOfRangeException">textures.Count > priorities.Countだった場合発生</exception>
        </member>
        <member name="M:fslib.AllmightyTextureEx.SetPriority(System.Collections.Generic.IEnumerable{fslib.AllmightyTexture},System.Int32,fslib.PriorityType)">
            <summary>
            描画優先度をまとめて設定
            </summary>
            <param name="textures"><see cref="T:fslib.AllmightyTexture"/>のコレクション</param>
            <param name="priority">設定したい描画優先度の値</param>
            <param name="type">設定のタイプ</param>
            <returns><see cref="T:fslib.AllmightyTexture"/>のコレクションを返します</returns>
            <exception cref="T:System.DivideByZeroException">type == <see cref="F:fslib.PriorityType.Divide"/>, prioriry == 0の時</exception>
        </member>
        <member name="M:fslib.AllmightyTextureEx.DispenseTextures(System.Collections.Generic.IEnumerable{System.String},asd.Vector2DF,asd.Vector2DF,System.UInt32,fslib.DispenseType,System.Int32)">
            <summary>
            画像を並べていく
            </summary>
            <param name="pathes">画像のパスのコレクション</param>
            <param name="firstPosition">最初の画像の座標</param>
            <param name="interval">画像同士の間隔</param>
            <param name="baseAmount">折り返し位置</param>
            <param name="type">横と縦どちらでわけるか</param>
            <param name="deathTime">文字列の残留時間 規定値0</param>
            <returns><see cref="T:fslib.AllmightyTexture"/>のコレクションを返します</returns>
        </member>
        <member name="M:fslib.AllmightyTextureEx.DispenseTextures(System.Collections.Generic.IEnumerable{asd.Texture2D},asd.Vector2DF,asd.Vector2DF,System.UInt32,fslib.DispenseType,System.Int32)">
            <summary>
            画像を並べていく
            </summary>
            <param name="textures">画像のコレクション</param>
            <param name="firstPosition">最初の画像の座標</param>
            <param name="interval">画像同士の間隔</param>
            <param name="baseAmount">折り返し位置</param>
            <param name="type">横と縦どちらでわけるか</param>
            <param name="deathTime">文字列の残留時間 規定値0</param>
            <returns><see cref="T:fslib.AllmightyTexture"/>のコレクションを返します</returns>
        </member>
        <member name="T:fslib.ArrayHelper">
            <summary>
            配列の処理の補助を行う静的クラス
            </summary>
        </member>
        <member name="M:fslib.ArrayHelper.Concat``1(``0[],``0[])">
            <summary>
            2つの1次元配列を結合する
            </summary>
            <typeparam name="T">配列に格納される型</typeparam>
            <param name="array1">結合する配列1</param>
            <param name="array2">結合する配列2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array1"/>または<paramref name="array2"/>がnull</exception>
            <exception cref="T:System.OverflowException"><paramref name="array1"/>と<paramref name="array2"/>の容量の合計が大きすぎて配列が生成できない</exception>
            <returns><paramref name="array1"/>と<paramref name="array2"/>の要素が格納された配列</returns>
        </member>
        <member name="M:fslib.ArrayHelper.Contains``1(``0[],``0)">
            <summary>
            指定された要素が配列に格納されているかどうかを返す
            </summary>
            <typeparam name="T">配列に格納される要素の型</typeparam>
            <param name="array">要素を検索する配列</param>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <returns><paramref name="array"/>に<paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ArrayHelper.Contains``1(``0[],``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            指定された要素が配列に格納されているかどうかを返す
            </summary>
            <typeparam name="T">配列に格納される要素の型</typeparam>
            <param name="array">要素を検索する配列</param>
            <param name="item">検索する要素</param>
            <param name="comparer">使用する比較子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>または<paramref name="comparer"/>がnull</exception>
            <returns><paramref name="array"/>に<paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ArrayHelper.Contains``1(``0[],``0,fslib.Equality{``0})">
            <summary>
            指定された要素が配列に格納されているかどうかを返す
            </summary>
            <typeparam name="T">配列に格納される要素の型</typeparam>
            <param name="array">要素を検索する配列</param>
            <param name="item">検索する要素</param>
            <param name="match">比較に使用する関数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>または<paramref name="match"/>がnull</exception>
            <returns><paramref name="array"/>に<paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ArrayHelper.CreateClone``1(``0[],``0[]@)">
            <summary>
            指定した1次元配列のコピーを生成する
            </summary>
            <typeparam name="T">コピーする配列に格納される要素の型</typeparam>
            <param name="baseArray">ベースとなる配列</param>
            <param name="clone">コピーされたクローン配列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseArray"/>がnull</exception>
        </member>
        <member name="M:fslib.ArrayHelper.Equals``1(``0[],``0[])">
            <summary>
            2つの1次元配列が同じ要素を格納しているかどうかを返す
            </summary>
            <typeparam name="T">配列内に格納される要素の型</typeparam>
            <param name="array1">調査する配列1</param>
            <param name="array2">調査する配列2</param>
            <returns><paramref name="array1"/>と<paramref name="array2"/>が同じ要素を格納していたらtrue，それ以外でfalse</returns>
            <remarks><paramref name="array1"/>または<paramref name="array2"/>がnullだと必ずfalseを返す</remarks>
        </member>
        <member name="M:fslib.ArrayHelper.Fill``1(``0[],``0)">
            <summary>
            配列に同じ値を設定する
            </summary>
            <typeparam name="T">配列に格納される要素の型</typeparam>
            <param name="array">値を設定する配列</param>
            <param name="value">代入する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib.ArrayHelper.Fill``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            配列のうち指定した範囲に同じ値を設定する
            </summary>
            <typeparam name="T">配列に格納される要素の型</typeparam>
            <param name="array">値を設定する配列</param>
            <param name="value">代入する値</param>
            <param name="index"><paramref name="array"/>要素設定の開始インデックス</param>
            <param name="count"><paramref name="array"/>要素設定の個数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>または<paramref name="count"/>が0未満または要素設定の最終インデックスが<paramref name="array"/>の範囲外</exception>
        </member>
        <member name="M:fslib.ArrayHelper.GetRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            配列のうち指定した範囲の値を抽出する
            </summary>
            <typeparam name="T">配列に格納される要素の型</typeparam>
            <param name="array">取り出すベースとなる値</param>
            <param name="index"><paramref name="array"/>から取り出す要素の開始インデックス</param>
            <param name="count"><paramref name="array"/>から取り出す要素の個数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>または<paramref name="count"/>が0未満または取り出す要素の最終インデックスが<paramref name="array"/>の範囲外</exception>
            <returns><paramref name="array"/>から取り出された要素を格納する配列</returns>
        </member>
        <member name="M:fslib.ArrayHelper.ReSize``1(``0[]@,System.Int32,System.Int32)">
            <summary>
            配列のサイズを変更している
            </summary>
            <typeparam name="T">配列に格納される値</typeparam>
            <param name="array">サイズを変更する配列</param>
            <param name="size">変更後のサイズ</param>
            <param name="count">要素のコピー量</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/>または<paramref name="size"/>が0未満または<paramref name="count"/>が<paramref name="array"/>の大きさより大きい</exception>
        </member>
        <member name="T:fslib.ClickableText">
            <summary>
            クリック可能なテキストオブジェクトの抽象クラス
            </summary>
        </member>
        <member name="P:fslib.ClickableText.IsClickable">
            <summary>
            クリック可能かどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.ClickableText.MouseCursorTouch">
            <summary>
            マウスが当たっているかを取得する
            </summary>
        </member>
        <member name="P:fslib.ClickableText.LeftPush">
            <summary>
            左クリックされたかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableText.LeftHold">
            <summary>
            左クリックされているかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableText.LeftRelease">
            <summary>
            左クリックが開放されたかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableText.MiddlePush">
            <summary>
            中央ボタンが押されたかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableText.MiddleHold">
            <summary>
            中央ボタンが押されているかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableText.MiddleRelease">
            <summary>
            中央ボタンが開放されたかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableText.RightPush">
            <summary>
            右クリックされたかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableText.RightHold">
            <summary>
            右クリックされているかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableText.RightRelease">
            <summary>
            右クリックが開放されたかを取得
            </summary>
        </member>
        <member name="M:fslib.ClickableText.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.ClickableText.#ctor(asd.Font)">
            <summary>
            コンストラクタ
            </summary>
            <param name="font">使用するフォント</param>
        </member>
        <member name="M:fslib.ClickableText.#ctor(asd.Font,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="font">使用するフォント</param>
            <param name="text">表示する文字列</param>
        </member>
        <member name="M:fslib.ClickableText.#ctor(asd.Font,System.String,asd.Vector2DF)">
            <summary>
            コンストラクタ
            </summary>
            <param name="font">使用するフォント</param>
            <param name="text">表示する文字列</param>
            <param name="position">表示する座標</param>
        </member>
        <member name="M:fslib.ClickableText.OnUpdate">
            <summary>
            実装済みのため必ずoverride先で呼び出すこと。
            </summary>
        </member>
        <member name="M:fslib.ClickableText.MouseUpdate">
            <summary>
            <see cref="M:asd.Object2D.OnUpdate"/>メソッドに乗っける事。
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnCursorEnter">
            <summary>
            マウスが当たったときに実行
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnCursorStay">
            <summary>
            マウスが当たっている時に実行
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnCursorExit">
            <summary>
            マウスが外れたに実行
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnLeftPushed">
            <summary>
            左クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnLeftHolded">
            <summary>
            左クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnLeftReleased">
            <summary>
            左クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnMiddlePushed">
            <summary>
            中央クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnMiddleHolded">
            <summary>
            中央クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnMiddleReleased">
            <summary>
            中央クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnRightPushed">
            <summary>
            右クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnRightHolded">
            <summary>
            右クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnRightReleased">
            <summary>
            右クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnWheelUpped">
            <summary>
            ホイールを上に動かしたときに実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.OnWheelDowned">
            <summary>
            ホイールを下に動かしたときに実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableText.IsCollide">
            <summary>
            マウスカーソルと当たってるかどうかを返す。
            </summary>
        </member>
        <member name="F:fslib.ClickableTexture.iscollide">
            <summary>
            マウスの衝突判定用フィールド
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.IsClickable">
            <summary>
            クリック可能かどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.MouseCursorTouch">
            <summary>
            マウスが当たっているかを取得する
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.LeftPush">
            <summary>
            左クリックされたかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.LeftHold">
            <summary>
            左クリックされているかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.LeftRelease">
            <summary>
            左クリックが開放されたかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.MiddlePush">
            <summary>
            中央ボタンが押されたかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.MiddleHold">
            <summary>
            中央ボタンが押されているかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.MiddleRelease">
            <summary>
            中央ボタンが開放されたかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.RightPush">
            <summary>
            右クリックされたかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.RightHold">
            <summary>
            右クリックされているかを取得
            </summary>
        </member>
        <member name="P:fslib.ClickableTexture.RightRelease">
            <summary>
            右クリックが開放されたかを取得
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.#ctor(asd.Texture2D)">
            <summary>
            コンストラクタ
            </summary>
            <param name="texture">表示するテクスチャ</param>
        </member>
        <member name="M:fslib.ClickableTexture.#ctor(asd.Texture2D,asd.Vector2DF)">
            <summary>
            コンストラクタ
            </summary>
            <param name="texture">表示するテクスチャ</param>
            <param name="position">表示する座標</param>
        </member>
        <member name="M:fslib.ClickableTexture.MouseUpdate">
            <summary>
            <see cref="M:asd.Object2D.OnUpdate"/>メソッドに乗っける事。
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnCursorEnter">
            <summary>
            マウスが当たったときに実行
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnCursorStay">
            <summary>
            マウスが当たっている時に実行
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnCursorExit">
            <summary>
            マウスが外れたに実行
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnLeftPushed">
            <summary>
            左クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnLeftHolded">
            <summary>
            左クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnLeftReleased">
            <summary>
            左クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnMiddlePushed">
            <summary>
            中央クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnMiddleHolded">
            <summary>
            中央クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnMiddleReleased">
            <summary>
            中央クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnRightPushed">
            <summary>
            右クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnRightHolded">
            <summary>
            右クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnRightReleased">
            <summary>
            右クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnWheelUpped">
            <summary>
            ホイールを上に動かしたときに実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.OnWheelDowned">
            <summary>
            ホイールを下に動かしたときに実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.ClickableTexture.IsCollide">
            <summary>
            マウスカーソルと当たってるかどうかを返す。
            </summary>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicCollectionBase`1">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/>を実装する抽象クラス
            </summary>
            <typeparam name="T">格納する要素の型</typeparam>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray">
            <summary>
            内部の配列を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.IsReadOnly">
            <summary>
            このコレクションが読み取り専用かどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Version">
            <summary>
            このコレクションのバージョンを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.ClearItems">
            <summary>
            格納されている要素をすべて削除する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.Contains(`0)">
            <summary>
            指定した要素が格納されているかを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="index"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/>のサイズ不足または配列の最初のインデックスが0以外もしくは<paramref name="array"/>に格納できない型の要素が格納されようとした，または<paramref name="array"/>の型がこのインスタンスでは処理できない型だった
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が未満</exception>
            <exception cref="T:System.RankException"><paramref name="array"/>が1次元配列ではなかった</exception>
            <remarks><see cref="T:System.Collections.IDictionary"/>実装時などでオーバーライドする必要性がある</remarks>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.Exists(System.Predicate{`0})">
            <summary>
            指定した条件を満たす要素が存在するかどうかを返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns>存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.GetEnumerator">
            <summary>
            列挙をサポートするオブジェクトを返す
            </summary>
            <returns><see cref="T:fslib.Collections.BasicModel.BasicCollectionBase`1.DefaultEnumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.GetFirstItem(System.Predicate{`0},`0@)">
            <summary>
            指定した条件に一致する要素のうち先頭の要素を返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <param name="item"><paramref name="match"/>を満たす要素のうち先頭の物 見つからなかった場合は既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>と満たす要素が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.GetLastItem(System.Predicate{`0},`0@)">
            <summary>
            指定した条件に一致する要素のうち末尾の要素を返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <param name="item"><paramref name="match"/>を満たす要素のうち末尾の物 見つからなかった場合は既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>と満たす要素が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.IndexOfItem(`0)">
            <summary>
            指定した要素と一致するもののうち先頭の物のインデックスを返す
            </summary>
            <param name="item">インデックスを検索する値</param>
            <returns><paramref name="item"/>の持つインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.InsertItem(System.Int32,`0)">
            <summary>
            指定したインデックスに要素を挿入する
            </summary>
            <param name="index">挿入するインデックス</param>
            <param name="item">挿入する要素</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.IsSingle(`0)">
            <summary>
            指定した要素がコレクション内で単一かどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns>単一だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.LastIndexOfItem(`0)">
            <summary>
            指定した要素と一致するもののうち末尾の物のインデックスを返す
            </summary>
            <param name="item">インデックスを検索する値</param>
            <returns><paramref name="item"/>の持つインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.OnAdded(`0@,System.Int32)">
            <summary>
            要素が追加されたときに実行される
            </summary>
            <param name="item">追加された要素の参照</param>
            <param name="index"><paramref name="item"/>が追加されたインデックス</param>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.OnCleared">
            <summary>
            要素が全て削除されたときに実行される
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.OnRemoved(`0@,System.Int32)">
            <summary>
            要素が削除されたときに実行される
            </summary>
            <param name="item">削除された要素</param>
            <param name="index"><paramref name="item"/>が所属していたインデックス</param>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.RemoveItem(System.Int32)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.ReSize(System.Int32)">
            <summary>
            <see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>の容量を変更する
            </summary>
            <param name="min">変更後の容量の最小値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>が<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.SetItem(System.Int32,`0)">
            <summary>
            指定したインデックスの要素を設定する
            </summary>
            <param name="index">設定する要素のインデックス</param>
            <param name="item">設定する値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.ToArray">
            <summary>
            このインスタンスと同じ要素を格納する配列を返す
            </summary>
            <returns>このインスタンスと同じ要素を格納する配列</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.TrueForAll(System.Predicate{`0})">
            <summary>
            全ての要素が指定した条件を満たすかどうかを返す
            </summary>
            <param name="match">確かめる要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns>全ての要素が<paramref name="match"/>を満たしていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.UpdateVersion">
            <summary>
            このコレクションのバージョンを更新する
            </summary>
            <remarks>このコレクションの要素が変更されるときは必ず呼び出す事</remarks>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator">
            <summary>
            列挙をサポートするオブジェクトの抽象クラス
            必要に応じて継承してカスタマイズし，<see cref="M:fslib.Collections.BasicModel.BasicCollectionBase`1.GetEnumerator"/>にて呼び出す
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Collection">
            <summary>
            列挙対象のコレクションのインスタンスを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Index">
            <summary>
            現在列挙している要素のインデックスを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Version">
            <summary>
            インスタンス生成時の<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Collection"/>のバージョンを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.#ctor(fslib.Collections.BasicModel.BasicCollectionBase{`0})">
            <summary>
            コンストラクタ
            </summary>
            <param name="collection">管理するコレクションへの参照</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.ThrowIfErrorIndex">
            <summary>
            現在の<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Index"/>の値が不正だった場合に例外を投げる
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Index"/>の値が列挙不能な値</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.ThrowIfErrorVersion">
            <summary>
            現在の<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Version"/>の値が不正だった場合に例外を投げる
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Version"/>の値が<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.BasicEnumerator.Collection"/>のものと異なる</exception>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicCollectionBase`1.DefaultEnumerator">
            <summary>
            列挙をサポートする構造体
            デフォルトの<see cref="M:fslib.Collections.BasicModel.BasicCollectionBase`1.GetEnumerator"/>ではこれが呼び出される
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.DefaultEnumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.DefaultEnumerator.#ctor(fslib.Collections.BasicModel.BasicCollectionBase{`0})">
            <summary>
            コンストラクタ
            </summary>
            <param name="collection">管理するコレクションへの参照</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.DefaultEnumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.DefaultEnumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1">
            <summary>
            内部の要素を格納できる読み取り専用のクラス
            </summary>
            <typeparam name="TAnother">格納する要素の型</typeparam>
            <remarks>ディクショナリのキーや値のコレクションとして使う</remarks>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1.Converter">
            <summary>
            型変換をするための変換子を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1.#ctor(fslib.Collections.BasicModel.BasicCollectionBase{`0})">
            <summary>
            コンストラクタ
            </summary>
            <param name="collection"><see cref="T:fslib.Collections.BasicModel.BasicCollectionBase`1"/>への参照</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1.GetEnumerator">
            <summary>
            列挙をサポートするオブジェクトを返す
            </summary>
            <returns>列挙をサポートするオブジェクト</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1.IndexOfItem(`1)">
            <summary>
            指定した要素のインデックスを検索する
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerCollectionBase`1.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDictionary`2">
            <summary>
            基本的な<see cref="T:System.Collections.IDictionary"/>の実装
            </summary>
            <typeparam name="TKey">キーとなる型</typeparam>
            <typeparam name="TValue">値となる型</typeparam>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDictionary`2.Comparer">
            <summary>
            キーの比較子を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDictionary`2.IsReadOnly">
            <summary>
            このコレクションが読み取り専用かどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDictionary`2.Keys">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDictionary`2.Values">
            <summary>
            格納されている値のコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.#ctor">
            <summary>
            既定の容量と比較子を持つ空の<see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を持つ空の<see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            既定の容量と指定した比較子を持つ空の<see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer">設定するキーの比較子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            指定した容量と比較子を持つ空の<see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer">設定するキーの比較子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            既定の比較子と指定したディクショナリのコピーを持つする<see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="dictionary">要素をコピーするディクショナリ</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            指定した比較子とディクショナリのコピーを持つする<see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="dictionary">要素をコピーするディクショナリ</param>
            <param name="comparer">設定するキーの比較子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>または<paramref name="comparer"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDictionary`2.Item(`0)">
            <summary>
            指定したキーを持つ値を取得または設定する
            </summary>
            <param name="key">検索する値のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/>が存在していない</exception>
            <returns><paramref name="key"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.Add(`0,`1)">
            <summary>
            末尾にキーと値のセットを追加する
            </summary>
            <param name="key">追加するキー</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key"/>が既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.AsReadOnly">
            <summary>
            読み取り専用コレクションとしてこのインスタンスを返す
            </summary>
            <returns>このインスタンスの内容がコピーされた読み取り専用コレクション</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.Clear">
            <summary>
            コレクション内の要素をすべて削除する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.ContainsKey(`0)">
            <summary>
            指定したキーが格納されているかどうかを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.ContainsValue(`1)">
            <summary>
            指定した値が格納されているかどうかを返す
            </summary>
            <param name="value">検索する値</param>
            <returns>格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="index"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/>のサイズ不足または配列の最初のインデックスが0以外もしくは<paramref name="array"/>に格納できない型の要素が格納されようとした，または<paramref name="array"/>の型がこのインスタンスでは処理できない型だった
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が未満</exception>
            <exception cref="T:System.RankException"><paramref name="array"/>が1次元配列ではなかった</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.FromIEnumerable(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>から<see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーするコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
            <returns><see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.FromIEnumerable(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>から<see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーするコレクション</param>
            <param name="comparer">設定するキーの比較子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>または<paramref name="comparer"/>がnull</exception>
            <returns><see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.BasicModel.BasicDictionary`2.Enumerator_D"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.IndexOfItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            指定した要素と一致するもののうち先頭の物のインデックスを返す
            </summary>
            <param name="item">インデックスを検索する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>のキーがnull</exception>
            <returns><paramref name="item"/>の持つインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.IndexOfKey(`0)">
            <summary>
            指定したキーを持つ要素の，<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>内のインデックスを検索する
            </summary>
            <param name="key">インデックスを検索する要素のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>をもつ値のインデックス 見つからなかった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.InsertItem(System.Int32,`0,`1)">
            <summary>
            指定した<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>内のインデックスに要素を挿入する
            </summary>
            <param name="index">挿入するインデックス</param>
            <param name="key">挿入する要素のキー</param>
            <param name="value">挿入する要素の値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>より大きい</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key"/>が既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.InsertItem(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            指定した<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>内のインデックスに要素を挿入する
            </summary>
            <param name="index">挿入するインデックス</param>
            <param name="item">挿入する要素の要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>のキーがnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>より大きい</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="item"/>のキーが既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.LastIndexOfItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            指定した要素と一致するもののうち末尾の物のインデックスを返す
            </summary>
            <param name="item">インデックスを検索する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>のキーがnull</exception>
            <returns><paramref name="item"/>の持つインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.Remove(`0)">
            <summary>
            指定したキーを持つ値を削除する
            </summary>
            <param name="key">削除する値のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.ReSize(System.Int32)">
            <summary>
            <see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>のサイズを変更する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>が<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>未満</exception>
            <param name="min">変更されるサイズの最小値</param>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.SetItem(System.Int32,`0,`1)">
            <summary>
            <see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>内の指定インデックスの要素を設定する
            </summary>
            <param name="index">設定する要素のインデックス</param>
            <param name="key">設定するキー</param>
            <param name="value">設定する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key"/>が既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.SetItem(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            <see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>内の指定インデックスの要素を設定する
            </summary>
            <param name="index">設定する要素のインデックス</param>
            <param name="item">設定する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>のキーがnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="item"/>のキーが既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            指定したキーを持つ値を取得する
            </summary>
            <param name="key">検索するキー</param>
            <param name="value"><paramref name="key"/>を持つ値 見つからなかった場合は既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>値を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDictionary`2.Enumerator_D">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDictionary`2.Enumerator_D.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.Enumerator_D.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.Enumerator_D.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDictionary`2.KeyCollection">
            <summary>
            <see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>内のキーを格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDictionary`2.KeyCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.BasicModel.BasicDictionary`2.KeyCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDictionary`2.KeyCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDictionary`2.KeyCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.KeyCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDictionary`2.ValueCollection">
            <summary>
            <see cref="T:fslib.Collections.BasicModel.BasicDictionary`2"/>内の値を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDictionary`2.ValueCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.BasicModel.BasicDictionary`2.ValueCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDictionary`2.ValueCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDictionary`2.ValueCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.ValueCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDictionary`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3">
            <summary>
            2つのキーの組み合わせで要素を検索するディクショナリの基本実装
            </summary>
            <typeparam name="TKey1">キーとなる型1</typeparam>
            <typeparam name="TKey2">キーとなる型2</typeparam>
            <typeparam name="TValue">値となる型</typeparam>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Comparer1">
            <summary>
            <typeparamref name="TKey1"/>の比較子を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Comparer2">
            <summary>
            <typeparamref name="TKey2"/>の比較子を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.IsReadOnly">
            <summary>
            このコレクションが読み取り専用かどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Keys1">
            <summary>
            <typeparamref name="TKey1"/>を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Keys2">
            <summary>
            <typeparamref name="TKey2"/>を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Values">
            <summary>
            値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.#ctor">
            <summary>
            既定の容量と比較子を備えた<see cref="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を備えた<see cref="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            既定の容量と指定した比較子を備えた<see cref="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer1"><typeparamref name="TKey1"/>に使用する比較子 nullの場合は既定の物を使用する</param>
            <param name="comparer2"><typeparamref name="TKey2"/>に使用する比較子 nullの場合は既定の物を使用する</param>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            指定した容量と比較子を備えた<see cref="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer1"><typeparamref name="TKey1"/>に使用する比較子 nullの場合は既定の物を使用する</param>
            <param name="comparer2"><typeparamref name="TKey2"/>に使用する比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEnumerable{fslib.Collections.DoubleKeyValuePair{`0,`1,`2}})">
            <summary>
            指定したコレクションの要素のコピーと既定の比較子を持つ<see cref="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーするコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEnumerable{fslib.Collections.DoubleKeyValuePair{`0,`1,`2}},System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            指定したコレクションの要素のコピーと比較子を持つ<see cref="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーするコレクション</param>
            <param name="comparer1"><typeparamref name="TKey1"/>に使用する比較子 nullの場合は既定の物を使用する</param>
            <param name="comparer2"><typeparamref name="TKey2"/>に使用する比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Item(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ値を取得または設定する
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが存在しない</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>を持つ値</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Add(`0,`1,`2)">
            <summary>
            コレクションの末尾に要素を追加する
            </summary>
            <param name="key1">追加する要素のキー1</param>
            <param name="key2">追加する要素のキー2</param>
            <param name="value">追加する要素の値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.AsReadOnly">
            <summary>
            読み取り専用コレクションとしてこのインスタンスを返す
            </summary>
            <returns>このインスタンスの内容がコピーされた読み取り専用コレクション</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Clear">
            <summary>
            コレクションのすべての要素を削除する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.CopyTo(System.Array,System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="index"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/>のサイズ不足または配列の最初のインデックスが0以外もしくは<paramref name="array"/>に格納できない型の要素が格納されようとした，または<paramref name="array"/>の型がこのインスタンスでは処理できない型だった
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が未満</exception>
            <exception cref="T:System.RankException"><paramref name="array"/>が1次元配列ではなかった</exception>
            <remarks><see cref="T:System.Collections.IDictionary"/>実装時などでオーバーライドする必要性がある</remarks>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.ContainsKey1(`0)">
            <summary>
            指定したキーが存在しているかどうかを返す
            </summary>
            <param name="key1">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>がnull</exception>
            <returns><paramref name="key1"/>が存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.ContainsKey2(`1)">
            <summary>
            指定したキーが存在しているかどうかを返す
            </summary>
            <param name="key2">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key2"/>がnull</exception>
            <returns><paramref name="key2"/>が存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.ContainsKeyPair(`0,`1)">
            <summary>
            指定したキーのペアが格納されているかどうかを取得する
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>のペアが格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.ContainsValue(`2)">
            <summary>
            指定した値が格納されているかどうかを取得する
            </summary>
            <param name="value">検索する値</param>
            <returns><paramref name="value"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.IndexOfKeyPair(`0,`1)">
            <summary>
            指定したキーの組み合わせのインデックスを取得する
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせに相当するインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.IndexOfItem(fslib.Collections.DoubleKeyValuePair{`0,`1,`2})">
            <summary>
            指定した要素と一致するもののうち先頭の物のインデックスを返す
            </summary>
            <param name="item">インデックスを検索する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>のキーがnull</exception>
            <returns><paramref name="item"/>の持つインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.IndexOfValue(`2)">
            <summary>
            指定した値の持つインデックスを取得する
            </summary>
            <param name="value">インデックスを検索する値</param>
            <returns><paramref name="value"/>の持つインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.InsertItem(System.Int32,`0,`1,`2)">
            <summary>
            指定したインデックスに値を挿入する
            </summary>
            <param name="index">挿入するインデックス</param>
            <param name="key1">挿入する値のキー1</param>
            <param name="key2">挿入する値のキー2</param>
            <param name="value">挿入する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>より大きい</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.InsertItem(System.Int32,fslib.Collections.DoubleKeyValuePair{`0,`1,`2})">
            <summary>
            指定した<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>内のインデックスに要素を挿入する
            </summary>
            <param name="index">挿入するインデックス</param>
            <param name="item">挿入する要素の要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>のキーがnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>より大きい</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="item"/>のキーの組み合わせが既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.LastIndexOfItem(fslib.Collections.DoubleKeyValuePair{`0,`1,`2})">
            <summary>
            指定した要素と一致するもののうち末尾の物のインデックスを返す
            </summary>
            <param name="item">インデックスを検索する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>のキーがnull</exception>
            <returns><paramref name="item"/>の持つインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Remove(`0,`1)">
            <summary>
            指定されたキーを持つ要素を削除する
            </summary>
            <param name="key1">削除する要素のキー1</param>
            <param name="key2">削除する要素のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.ReSize(System.Int32)">
            <summary>
            <see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>のサイズを変更する
            </summary>
            <param name="min">変更後のサイズの最小値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>が<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.SelectFromKey1(`0)">
            <summary>
            指定しキー1を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.SelectFromKey2(`1)">
            <summary>
            指定しキー2を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.SetItem(System.Int32,`0,`1,`2)">
            <summary>
            指定したインデックスの値を設定する
            </summary>
            <param name="index">変更する値のインデックス</param>
            <param name="key1">設定する値のキー1</param>
            <param name="key2">設定する値のキー2</param>
            <param name="value">設定する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが他インデックスに存在している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.SetItem(System.Int32,fslib.Collections.DoubleKeyValuePair{`0,`1,`2})">
            <summary>
            指定したインデックスの値を設定する
            </summary>
            <param name="index">変更する値のインデックス</param>
            <param name="item">設定する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>のキーがnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="item"/>のキーの組み合わせが他インデックスに存在している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            指定したキーの組み合わせを持つ値を取得する
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <param name="value"><paramref name="key1"/>と<paramref name="key2"/>を持つ値 見つからなかった場合は既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>を持つ値が存在したらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Key1Collection">
            <summary>
            <typeparamref name="TKey1"/>を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Key1Collection.Converter">
            <summary>
            型変換をするための変換子を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Key1Collection.IndexOfItem(`0)">
            <summary>
            指定した要素のインデックスを検索する
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Key2Collection">
            <summary>
            <typeparamref name="TKey2"/>を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Key2Collection.Converter">
            <summary>
            型変換をするための変換子を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.Key2Collection.IndexOfItem(`1)">
            <summary>
            指定した要素のインデックスを検索する
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.ValueCollection">
            <summary>
            <typeparamref name="TKey2"/>を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.ValueCollection.Converter">
            <summary>
            型変換をするための変換子を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicDoubleKeyDictionary`3.ValueCollection.IndexOfItem(`2)">
            <summary>
            指定した要素のインデックスを検索する
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicList`1">
            <summary>
            基本的な<see cref="T:System.Collections.Generic.IList`1"/>の実装
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicList`1.Capacity">
            <summary>
            コレクションの容量を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.#ctor">
            <summary>
            既定の容量を備えた空の<see cref="T:fslib.Collections.BasicModel.BasicList`1"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.#ctor(System.Int32)">
            <summary>
            指定した容量を備えた空の<see cref="T:fslib.Collections.BasicModel.BasicList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定したコレクションのコピーを持つ<see cref="T:fslib.Collections.BasicModel.BasicList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーするコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicList`1.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <returns><paramref name="index"/>に割り当てられた要素</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定したコレクションの要素を末尾に追加する
            </summary>
            <param name="collection">末尾に追加するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            コレクションの要素を配列にコピーする
            </summary>
            <param name="index">このインスタンスにおけるコピー開始地点</param>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <param name="count">コピーされる要素の個数</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>，<paramref name="arrayIndex"/>，<paramref name="count"/>のいずれかが0未満 または<paramref name="count"/>が要素数を超えている 若しくは<paramref name="index"/>と<paramref name="count"/>の和がインデックスオーバー</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.Find(System.Predicate{`0})">
            <summary>
            指定した条件に一致する要素のうち先頭の要素を返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>を満たす要素のうち先頭の物 見つからなかった場合は既定値</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.FindAll(System.Predicate{`0})">
            <summary>
            指定した条件に一致するを全て格納した<see cref="T:fslib.Collections.BasicModel.BasicList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="match">取り出す要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>に適合する全ての要素を格納した<see cref="T:fslib.Collections.BasicModel.BasicList`1"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.FindIndex(System.Predicate{`0})">
            <summary>
            指定した条件に一致する要素のうち先頭の物のインデックスを返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>を満たす要素のうち先頭の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            指定した範囲内で条件に一致する要素のうち先頭の物のインデックスを返す
            </summary>
            <param name="startIndex">検索の開始地点</param>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <returns><paramref name="match"/>を満たす要素のうち先頭の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            指定した範囲内で条件に一致する要素のうち先頭の物のインデックスを返す
            </summary>
            <param name="startIndex">検索の開始地点</param>
            <param name="count"><paramref name="startIndex"/>から検索する要素の個数</param>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/>か<paramref name="count"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上 若しくは<paramref name="startIndex"/>と<paramref name="count"/>の和がインデックスオーバー</exception>
            <returns><paramref name="match"/>を満たす要素のうち先頭の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.FindLast(System.Predicate{`0})">
            <summary>
            指定した条件に一致する要素のうち末尾の要素を返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>を満たす要素のうち末尾の物 見つからなかった場合は既定値</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            指定した条件に一致する要素のうち末尾の物のインデックスを返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>を満たす要素のうち末尾の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            指定した範囲内で条件に一致する要素のうち末尾の物のインデックスを返す
            </summary>
            <param name="startIndex">検索の開始地点</param>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <returns><paramref name="match"/>を満たす要素のうち末尾の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            指定した範囲内で条件に一致する要素のうち末尾の物のインデックスを返す
            </summary>
            <param name="startIndex">検索の開始地点</param>
            <param name="count"><paramref name="startIndex"/>から検索する要素の個数</param>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/>か<paramref name="count"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上 若しくは<paramref name="startIndex"/>と<paramref name="count"/>の差がインデックスオーバー</exception>
            <returns><paramref name="match"/>を満たす要素のうち先頭の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.Foreach(System.Action{`0})">
            <summary>
            全ての要素に指定した動作を行う
            </summary>
            <param name="action">各要素に実行する処理</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            指定した範囲を持つ<see cref="T:fslib.Collections.BasicModel.BasicList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="index">コピー開始手地点</param>
            <param name="count">コピーされる要素数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>または<paramref name="count"/>が0未満 若しくは<paramref name="index"/>と<paramref name="count"/>の和がインデックスオーバー</exception>
            <returns><paramref name="index"/>から<paramref name="count"/>の個数分コピーされた<see cref="T:fslib.Collections.BasicModel.BasicList`1"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.IndexOf(`0)">
            <summary>
            指定した要素に一致するもののうち先頭の物のインデックスを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>に対応するインデックス なかった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.IndexOf(`0,System.Int32)">
            <summary>
            指定した範囲中の要素に一致するもののうち先頭の物のインデックスを返す
            </summary>
            <param name="item">検索する要素</param>
            <param name="index">検索の開始地点</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <returns><paramref name="item"/>に対応するインデックス なかった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            指定した範囲中の要素に一致するもののうち先頭の物のインデックスを返す
            </summary>
            <param name="item">検索する要素</param>
            <param name="index">検索の開始地点</param>
            <param name="count"><paramref name="index"/>から検索する要素の個数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>か<paramref name="count"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上 若しくは<paramref name="index"/>と<paramref name="count"/>の和がインデックスオーバー</exception>
            <returns><paramref name="item"/>に対応するインデックス なかった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.Insert(System.Int32,`0)">
            <summary>
            指定したインデックスに要素を挿入する
            </summary>
            <param name="index">挿入するインデックス</param>
            <param name="item">挿入する要素</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定したインデックスにコレクションを挿入する
            </summary>
            <param name="index">挿入するインデックス</param>
            <param name="items">挿入するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定したインデックスにコレクションを挿入する
            </summary>
            <param name="index">挿入するインデックス</param>
            <param name="collection">挿入するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.LastIndexOf(`0)">
            <summary>
            指定した要素に一致するもののうち末尾の物のインデックスを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>に対応するインデックス なかった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            指定した範囲内で要素に一致するもののうち末尾の物のインデックスを返す
            </summary>
            <param name="index">検索の開始地点</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <returns><paramref name="item"/>に対応するインデックス なかった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            指定した範囲内で要素に一致するもののうち末尾の物のインデックスを返す
            </summary>
            <param name="index">検索の開始地点</param>
            <param name="count"><paramref name="index"/>から検索する要素の個数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>か<paramref name="count"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上 若しくは<paramref name="index"/>と<paramref name="count"/>の差がインデックスオーバー</exception>
            <returns><paramref name="item"/>に対応するインデックス なかった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.RemoveAt(System.Int32)">
            <summary>
            指定インデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            指定した範囲の要素をすべて削除する
            </summary>
            <param name="index">削除の開始地点</param>
            <param name="count">削除する個数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>か<paramref name="count"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上 若しくは<paramref name="index"/>と<paramref name="count"/>の和がインデックスオーバー</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.ReSize(System.Int32)">
            <summary>
            <see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>のサイズを変更する
            </summary>
            <param name="min">変更後のサイズの最小値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>が<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicList`1.Reverse">
            <summary>
            要素の順序を逆転させる
            </summary>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyCollection`1">
            <summary>
            読み取り専用の<see cref="T:System.Collections.Generic.ICollection`1"/>の基本的な実装
            </summary>
            <typeparam name="T">格納する要素の型</typeparam>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyCollection`1.IsReadOnly">
            <summary>
            このコレクションが読み取り専用かどうかを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyCollection`1.#ctor">
            <summary>
            配列のサイズを0として初期化
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定されたコレクションの要素のコピーを持つ<see cref="T:fslib.Collections.BasicModel.BasicReadOnlyCollection`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">コピーする要素を格納するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyCollection`1.ClearItems">
            <summary>
            このメソッドは無効
            </summary>
            <exception cref="T:System.NotSupportedException">このメソッドは無効</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyCollection`1.InitCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            コンストラクタでのみ呼び出され，インスタンスを初期化する
            </summary>
            <param name="collection"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">初期化以外で使用された</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            このメソッドは無効
            </summary>
            <exception cref="T:System.NotSupportedException">このメソッドは無効</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyCollection`1.RemoveItem(System.Int32)">
            <summary>
            このメソッドは無効
            </summary>
            <exception cref="T:System.NotSupportedException">このメソッドは無効</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyCollection`1.SetItem(System.Int32,`0)">
            <summary>
            このメソッドは無効
            </summary>
            <exception cref="T:System.NotSupportedException">このメソッドは無効</exception>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2">
            <summary>
            読み取り専用のディクショナリの基本的な実装
            </summary>
            <typeparam name="TKey">格納するキーの型</typeparam>
            <typeparam name="TValue">格納する値の型</typeparam>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.Comparer">
            <summary>
            <typeparamref name="TKey"/>を比較する比較子を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentNullException">設定しようとした値がnull</exception>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.Keys">
            <summary>
            キーを格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.Values">
            <summary>
            値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            指定したコレクションを利用してインスタンスを初期化する
            </summary>
            <param name="collection">要素をコピーするコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>または内部のキーがnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="collection"/>内の要素でキーに重複があった</exception>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.Item(`0)">
            <summary>
            指定されたキーを持つ要素を取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/>が存在していない</exception>
            <returns><paramref name="key"/>を持つ値</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            指定したキーが格納されているかどうかを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.ContainsValue(`1)">
            <summary>
            指定した値が格納されているかどうかを取得する
            </summary>
            <param name="value">検索する値</param>
            <returns><paramref name="value"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.GetEnumerator">
            <summary>
            列挙をサポートするクラスを返す
            </summary>
            <returns><see cref="T:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.IndexOfKey(`0)">
            <summary>
            指定したキーのインデックスを検索する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>に該当するインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.InitCollection(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            コンストラクタでのみ呼び出され，インスタンスを初期化する
            </summary>
            <param name="collection"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>または内部のキーがnull</exception>
            <exception cref="T:System.InvalidOperationException">初期化以外で使用された</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="collection"/>内のキーが重複している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.ReSize(System.Int32)">
            <summary>
            <see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>の容量を変更する
            </summary>
            <param name="min">変更後の容量の最小値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>が<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            指定したキーを持つ値を取得する
            </summary>
            <param name="key">検索するキー</param>
            <param name="value"><paramref name="key"/>を持つ値 無かったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.Enumerator">
            <summary>
            列挙をサポートするクラスを返す
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.KeyCollection">
            <summary>
            キーを格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.KeyCollection.Converter">
            <summary>
            型変換をするための変換子を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.KeyCollection.IndexOfItem(`0)">
            <summary>
            指定した要素のインデックスを検索する
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.ValueCollection">
            <summary>
            値を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.ValueCollection.Converter">
            <summary>
            型変換をするための変換子を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDictionary`2.ValueCollection.IndexOfItem(`1)">
            <summary>
            指定した要素のインデックスを検索する
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3">
            <summary>
            読み取り専用のキーが2つのディクショナリ
            </summary>
            <typeparam name="TKey1">格納するキーの型1</typeparam>
            <typeparam name="TKey2">格納するキーの型2</typeparam>
            <typeparam name="TValue">格納する値の型</typeparam>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Comparer1">
            <summary>
            <typeparamref name="TKey1"/>の比較子を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentNullException">設定しようとした値がnull</exception>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Comparer2">
            <summary>
            <typeparamref name="TKey2"/>の比較子を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentNullException">設定しようとした値がnull</exception>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Keys1">
            <summary>
            <typeparamref name="TKey1"/>を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Keys2">
            <summary>
            <typeparamref name="TKey2"/>を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Values">
            <summary>
            <typeparamref name="TValue"/>を格納するコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEnumerable{fslib.Collections.DoubleKeyValuePair{`0,`1,`2}})">
            <summary>
            指定したコレクションの内容をコピーして<see cref="T:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーするコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>またはその内部のキーがnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="collection"/>内のキーが重複している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされた情報から<see cref="T:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Item(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ要素を取得または設定する
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが存在しない</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>を持つ要素</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.ContainsKeyPair(`0,`1)">
            <summary>
            指定したキーのペアが格納されているかどうかを取得する
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.ContainsKey1(`0)">
            <summary>
            指定したキーが格納されているかどうかを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.ContainsKey2(`1)">
            <summary>
            指定したキーが格納されているかどうかを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.IndexOfKeyPair(`0,`1)">
            <summary>
            指定した組み合わせのキーのインデックスを検索する
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせのインデックス 無い場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.InitCollection(System.Collections.Generic.IEnumerable{fslib.Collections.DoubleKeyValuePair{`0,`1,`2}})">
            <summary>
            コンストラクタでのみ呼び出され，インスタンスを初期化する
            </summary>
            <param name="collection"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>または内部のキーがnull</exception>
            <exception cref="T:System.InvalidOperationException">初期化以外で使用された</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="collection"/>内のキーが重複している</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.ReSize(System.Int32)">
            <summary>
            <see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.InnerArray"/>の容量を変更する
            </summary>
            <param name="min">変更後の容量の最小値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>が<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.SelectFromKey1(`0)">
            <summary>
            指定しキー1を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.SelectFromKey2(`1)">
            <summary>
            指定しキー2を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            指定したキーの組み合わせを持つ要素を検索する
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <param name="value"><paramref name="key1"/>と<paramref name="key2"/>を持つ値 見つからなかったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="value"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Key1Collection">
            <summary>
            <typeparamref name="TKey1"/>を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Key1Collection.Converter">
            <summary>
            型変換をするための変換子を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Key1Collection.IndexOfItem(`0)">
            <summary>
            指定した要素のインデックスを検索する
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Key2Collection">
            <summary>
            <typeparamref name="TKey2"/>を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Key2Collection.Converter">
            <summary>
            型変換をするための変換子を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.Key2Collection.IndexOfItem(`1)">
            <summary>
            指定した要素のインデックスを検索する
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.ValueCollection">
            <summary>
            <typeparamref name="TKey2"/>を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.ValueCollection.Converter">
            <summary>
            型変換をするための変換子を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyDoubleKeyDictionary`3.ValueCollection.IndexOfItem(`2)">
            <summary>
            指定した要素のインデックスを検索する
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicReadOnlyList`1">
            <summary>
            <see cref="T:System.Collections.Generic.IList`1"/>を実装する基礎的な読み取り専用コレクションの実装
            </summary>
            <typeparam name="T">格納する要素の型</typeparam>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定されたコレクションの要素のコピーを持つ<see cref="T:fslib.Collections.BasicModel.BasicReadOnlyList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">コピーする要素を格納するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicReadOnlyList`1.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <returns><paramref name="index"/>に対応する値</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.CopyTo(`0[])">
            <summary>
            コレクションの要素を配列にコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            コレクションの要素を配列にコピーする
            </summary>
            <param name="index">このインスタンスにおけるコピー開始地点</param>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <param name="count">コピーされる要素の個数</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>，<paramref name="arrayIndex"/>，<paramref name="count"/>のいずれかが0未満 または<paramref name="count"/>が要素数を超えている 若しくは<paramref name="index"/>と<paramref name="count"/>の和がインデックスオーバー</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.Find(System.Predicate{`0})">
            <summary>
            指定した条件に一致する要素のうち先頭の要素を返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>を満たす要素のうち先頭の物 見つからなかった場合は既定値</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.FindAll(System.Predicate{`0})">
            <summary>
            指定した条件に一致するを全て格納した<see cref="T:fslib.Collections.BasicModel.BasicList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="match">取り出す要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>に適合する全ての要素を格納した<see cref="T:fslib.Collections.BasicModel.BasicList`1"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.FindIndex(System.Predicate{`0})">
            <summary>
            指定した条件に一致する要素のうち先頭の物のインデックスを返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>を満たす要素のうち先頭の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            指定した範囲内で条件に一致する要素のうち先頭の物のインデックスを返す
            </summary>
            <param name="startIndex">検索の開始地点</param>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <returns><paramref name="match"/>を満たす要素のうち先頭の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            指定した範囲内で条件に一致する要素のうち先頭の物のインデックスを返す
            </summary>
            <param name="startIndex">検索の開始地点</param>
            <param name="count"><paramref name="startIndex"/>から検索する要素の個数</param>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/>か<paramref name="count"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上 若しくは<paramref name="startIndex"/>と<paramref name="count"/>の和がインデックスオーバー</exception>
            <returns><paramref name="match"/>を満たす要素のうち先頭の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.FindLast(System.Predicate{`0})">
            <summary>
            指定した条件に一致する要素のうち末尾の要素を返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>を満たす要素のうち末尾の物 見つからなかった場合は既定値</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            指定した条件に一致する要素のうち末尾の物のインデックスを返す
            </summary>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>を満たす要素のうち末尾の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            指定した範囲内で条件に一致する要素のうち末尾の物のインデックスを返す
            </summary>
            <param name="startIndex">検索の開始地点</param>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上</exception>
            <returns><paramref name="match"/>を満たす要素のうち末尾の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            指定した範囲内で条件に一致する要素のうち末尾の物のインデックスを返す
            </summary>
            <param name="startIndex">検索の開始地点</param>
            <param name="count"><paramref name="startIndex"/>から検索する要素の個数</param>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/>か<paramref name="count"/>が0未満または<see cref="P:fslib.Collections.BasicModel.BasicCollectionBase`1.Count"/>以上 若しくは<paramref name="startIndex"/>と<paramref name="count"/>の差がインデックスオーバー</exception>
            <returns><paramref name="match"/>を満たす要素のうち先頭の物のインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.IndexOf(`0)">
            <summary>
            指定した要素と一致するもののうち先頭の物のインデックスを返す
            </summary>
            <param name="item">インデックスを検索する値</param>
            <returns><paramref name="item"/>の持つインデックス 無かった場合は-1</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicReadOnlyList`1.LastIndexOf(`0)">
            <summary>
            指定した要素と一致するもののうち末尾の物のインデックスを返す
            </summary>
            <param name="item">インデックスを検索する値</param>
            <returns><paramref name="item"/>の持つインデックス 無かった場合は-1</returns>
        </member>
        <member name="T:fslib.Collections.BasicModel.BasicCollection`1">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/>を実装する基本的なジェネリックコレクションのクラス
            </summary>
            <typeparam name="T">格納される要素の型</typeparam>
        </member>
        <member name="P:fslib.Collections.BasicModel.BasicCollection`1.IsReadOnly">
            <summary>
            このコレクションが読み取り専用かどうかを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.#ctor">
            <summary>
            既定の容量を備えた空の<see cref="T:fslib.Collections.BasicModel.BasicCollection`1"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.#ctor(System.Int32)">
            <summary>
            指定した容量を備えた空の<see cref="T:fslib.Collections.BasicModel.BasicCollection`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定したコレクションのコピーを持つ<see cref="T:fslib.Collections.BasicModel.BasicCollection`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">コピーする要素を格納するコレクションのインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.Add(`0)">
            <summary>
            末尾に要素を追加する
            </summary>
            <param name="item">追加する要素</param>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.AddHead(`0)">
            <summary>
            先頭に要素を追加する
            </summary>
            <param name="item">追加する要素</param>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.AsReadOnly">
            <summary>
            読み取り専用コレクションとしてこのインスタンスを返す
            </summary>
            <returns>このインスタンスの内容がコピーされた読み取り専用コレクション</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.Clear">
            <summary>
            コレクション内の要素をすべて削除する
            </summary>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.CopyTo(`0[])">
            <summary>
            指定した配列にこのインスタンス内の要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>の容量不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.GetItems(System.Predicate{`0})">
            <summary>
            指定した条件に一致する要素からなる<see cref="T:fslib.Collections.BasicModel.BasicCollection`1"/>を返す
            </summary>
            <param name="match">取り出す要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>を満たす要素からなる<see cref="T:fslib.Collections.BasicModel.BasicCollection`1"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.Remove(`0)">
            <summary>
            指定した値と一致する要素のうち先頭の物を削除する
            </summary>
            <param name="item">削除する要素</param>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            指定した条件に一致する要素をすべて削除する
            </summary>
            <param name="match">削除する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns>削除した要素の個数</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.RemoveLast(`0)">
            <summary>
            指定した値と一致する要素のうち末尾の物を削除する
            </summary>
            <param name="item">削除する要素</param>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.BasicModel.BasicCollection`1.TrimExcess">
            <summary>
            要素数が容量の90%未満の場合は容量を要素数まで縮める
            </summary>
        </member>
        <member name="T:fslib.Collections.DoubleKey`2">
            <summary>
            2つのキーを格納する構造体
            </summary>
            <typeparam name="TKey1">1つ目のキー</typeparam>
            <typeparam name="TKey2">2つ目のキー</typeparam>
        </member>
        <member name="M:fslib.Collections.DoubleKey`2.#ctor(`0,`1)">
            <summary>
            コンストラクタ
            </summary>
            <param name="key1">格納する<typeparamref name="TKey1"/></param>
            <param name="key2">格納する<typeparamref name="TKey2"/></param>
        </member>
        <member name="P:fslib.Collections.DoubleKey`2.Key1">
            <summary>
            1つ目の<typeparamref name="TKey1"/>の値を取得する。
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKey`2.Key2">
            <summary>
            2つ目の<typeparamref name="TKey2"/>の値を取得する。
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKey`2.Equals(fslib.Collections.DoubleKey{`0,`1})">
            <summary>
            2つの<see cref="T:fslib.Collections.DoubleKey`2"/>のインスタンスの同値性を確かめる
            </summary>
            <param name="other">同値性を確かめるもう一つの<see cref="T:fslib.Collections.DoubleKey`2"/>のインスタンス</param>
            <returns>同値であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.DoubleKeyValuePair`3">
            <summary>
            2種類のキーと値を格納する構造体
            </summary>
            <typeparam name="TKey1">キー1</typeparam>
            <typeparam name="TKey2">キー2</typeparam>
            <typeparam name="TValue">値</typeparam>
        </member>
        <member name="M:fslib.Collections.DoubleKeyValuePair`3.#ctor(`0,`1,`2)">
            <summary>
            コンストラクタ
            </summary>
            <param name="key1">格納する<typeparamref name="TKey1"/></param>
            <param name="key2">格納する<typeparamref name="TKey2"/></param>
            <param name="value">格納する<typeparamref name="TValue"/></param>
        </member>
        <member name="M:fslib.Collections.DoubleKeyValuePair`3.#ctor(fslib.Collections.DoubleKey{`0,`1},`2)">
            <summary>
            コンストラクタ
            </summary>
            <param name="doubleKey">格納する<see cref="T:fslib.Collections.DoubleKey`2"/></param>
            <param name="value">格納する<typeparamref name="TValue"/></param>
        </member>
        <member name="P:fslib.Collections.DoubleKeyValuePair`3.Key1">
            <summary>
            1つ目の<typeparamref name="TKey1"/>の値を取得する。
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyValuePair`3.Key2">
            <summary>
            2つ目の<typeparamref name="TKey2"/>の値を取得する。
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyValuePair`3.Value">
            <summary>
            <typeparamref name="TKey1"/>と<typeparamref name="TKey2"/>に紐づけられた<typeparamref name="TValue"/>を取得する。
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyValuePair`3.GetKeyValuePair">
            <summary>
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/>に変換する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyValuePair`3.Equals(fslib.Collections.DoubleKeyValuePair{`0,`1,`2})">
            <summary>
            2つの<see cref="T:fslib.Collections.DoubleKeyValuePair`3"/>のインスタンスの同値性を確かめる
            </summary>
            <param name="other">同値性を確かめるもう一つの<see cref="T:fslib.Collections.DoubleKeyValuePair`3"/>のインスタンス</param>
            <returns>同値であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.IDoubleKeyDictionary`3">
            <summary>
            2つのキーと値のジェネリックコレクションを表す
            </summary>
            <typeparam name="TKey1">キー1</typeparam>
            <typeparam name="TKey2">キー2</typeparam>
            <typeparam name="TValue">値</typeparam>
        </member>
        <member name="P:fslib.Collections.IDoubleKeyDictionary`3.Item(`0,`1)">
            <summary>
            インデクサ
            <typeparamref name="TKey1"/>と<typeparamref name="TKey2"/>のペアと一致する<typeparamref name="TValue"/>を設定または取得する
            </summary>
            <param name="key1">1つ目の<typeparamref name="TKey1"/></param>
            <param name="key2">2つ目の<typeparamref name="TKey2"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key2"/>がコレクションに存在しない</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
        </member>
        <member name="P:fslib.Collections.IDoubleKeyDictionary`3.Key1Collection">
            <summary>
            <see cref="T:fslib.Collections.IDoubleKeyDictionary`3"/>の持っている<typeparamref name="TKey1"/>の<see cref="T:System.Collections.Generic.ICollection`1"/>を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.IDoubleKeyDictionary`3.Key2Collection">
            <summary>
            <see cref="T:fslib.Collections.IDoubleKeyDictionary`3"/>の持っている<typeparamref name="TKey2"/>の<see cref="T:System.Collections.Generic.ICollection`1"/>を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.IDoubleKeyDictionary`3.Values">
            <summary>
            <see cref="T:fslib.Collections.IDoubleKeyDictionary`3"/>内の<typeparamref name="TValue"/>を格納している<see cref="T:System.Collections.Generic.ICollection`1"/>を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.IDoubleKeyDictionary`3.Add(`0,`1,`2)">
            <summary>
            指定した<typeparamref name="TKey1"/>，<typeparamref name="TKey2"/>のペアと<typeparamref name="TValue"/>を<see cref="T:fslib.Collections.IDoubleKeyDictionary`3"/>に追加する
            </summary>
            <param name="key1">追加する<typeparamref name="TKey1"/></param>
            <param name="key2">追加する<typeparamref name="TKey2"/></param>
            <param name="value">追加する<paramref name="value"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>又は<paramref name="key2"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException">同じ値の組み合わせの<typeparamref name="TKey1"/>と<typeparamref name="TKey2"/>が既に存在する</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:fslib.Collections.IDoubleKeyDictionary`3"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib.Collections.IDoubleKeyDictionary`3.ContainsKeyPair(`0,`1)">
            <summary>
            指定した2つのキーがディクショナリに存在するかどうかを返す。
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <returns>存在する場合はtrue, それ以外はfalse</returns>
            <exception cref="T:System.ArgumentNullException">keyがnull</exception>
        </member>
        <member name="M:fslib.Collections.IDoubleKeyDictionary`3.Remove(`0,`1)">
            <summary>
            指定する組合せの<typeparamref name="TKey1"/>と<typeparamref name="TKey2"/>を持つ<typeparamref name="TValue"/>を<see cref="T:fslib.Collections.IDoubleKeyDictionary`3"/>から削除する
            </summary>
            <param name="key1">削除される<typeparamref name="TValue"/>の<typeparamref name="TKey1"/></param>
            <param name="key2">削除される<typeparamref name="TValue"/>の<typeparamref name="TKey2"/></param>
            <returns>正常に削除された場合はtrue，<paramref name="key1"/>と<paramref name="key2"/>の組み合わせが存在しないまたはそれ以外の場合はfalse</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>又は<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:fslib.Collections.IDoubleKeyDictionary`3"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib.Collections.IDoubleKeyDictionary`3.SelectFromKey1(`0)">
            <summary>
            指定したキー1を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.IDoubleKeyDictionary`3.SelectFromKey2(`1)">
            <summary>
            指定したキー2を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.IDoubleKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            指定された組合せの<typeparamref name="TKey1"/>と<typeparamref name="TKey2"/>に関連付けられている<typeparamref name="TValue"/>を取得する
            </summary>
            <param name="key1"><typeparamref name="TValue"/>を取得する<typeparamref name="TKey1"/></param>
            <param name="key2"><typeparamref name="TValue"/>を取得する<typeparamref name="TKey2"/></param>
            <param name="value"><typeparamref name="TValue"/>が存在していたらその値，それ以外の場合は規定値を返す。</param>
            <returns><see cref="T:fslib.Collections.IDoubleKeyDictionary`3"/>に値が含まれる場合はtrue，それ以外にfalse</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>又は<paramref name="key2"/>がnull</exception>
        </member>
        <member name="T:fslib.Collections.INumericDictionary`2">
            <summary>
            インデックス検索とキー検索両方が出来るジェネリックコレクションの基底インターフェイス
            </summary>
            <typeparam name="TKey">キーの型</typeparam>
            <typeparam name="TValue">値の型</typeparam>
        </member>
        <member name="P:fslib.Collections.INumericDictionary`2.Keys">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.INumericDictionary`2.Values">
            <summary>
            格納されている値のコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.INumericDictionary`2.ContainsValue(`1)">
            <summary>
            指定した値が存在するかどうかを返す
            </summary>
            <param name="value">検索するキー</param>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.INumericDictionary`2.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="arrayIndex"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.INumericDictionary`2.IndexOf(`0)">
            <summary>
            指定したキーを持つ値のインデックスを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>見つかったらそのインデックス，見つからなかったら見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Collections.INumericDictionary`2.IndexOf(`1)">
            <summary>
            指定した値のインデックスのうち先頭の物を返す
            </summary>
            <param name="value">検索する値</param>
            <returns>見つかったらそのインデックス，見つからなかったら見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Collections.INumericDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            指定したインデックスにキーと値のペアを挿入する
            </summary>
            <param name="index">挿入する位置</param>
            <param name="key">挿入する値のキー</param>
            <param name="value">挿入する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>より大きい</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key"/>が既に存在している</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
        </member>
        <member name="M:fslib.Collections.INumericDictionary`2.OverWrite(`0,`0)">
            <summary>
            指定したキーを持つ値のキーを変更する
            キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="oldKey">検索する値のキー</param>
            <param name="newKey">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldKey"/>または<paramref name="newKey"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey"/>が既に使用されている</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="oldKey"/>が存在していない</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
            <returns>変更された要素のインデックス</returns>
        </member>
        <member name="M:fslib.Collections.INumericDictionary`2.OverWrite(System.Int32,`0)">
            <summary>
            指定したインデックスの要素のキーを変更する キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="index">キーを変更する要素のインデックス</param>
            <param name="newKey">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newKey"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey"/>が既に使用されている</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
        </member>
        <member name="M:fslib.Collections.INumericDictionary`2.Remove(`1)">
            <summary>
            指定した値のうち先頭の物を削除する
            </summary>
            <param name="value">削除する値</param>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.INumericDoubleKeyDictionary`3">
            <summary>
            インデックス検索とキー検索両方が出来るジェネリックコレクションの基底インターフェイス
            </summary>
            <typeparam name="TKey1">キーの型1</typeparam>
            <typeparam name="TKey2">キーの型2</typeparam>
            <typeparam name="TValue">値の型</typeparam>
        </member>
        <member name="P:fslib.Collections.INumericDoubleKeyDictionary`3.Key1Collection">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.INumericDoubleKeyDictionary`3.Key2Collection">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.INumericDoubleKeyDictionary`3.Values">
            <summary>
            格納されている値のコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.ContainsKey1(`0)">
            <summary>
            指定したキーが存在するかどうかを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.ContainsKey2(`1)">
            <summary>
            指定したキーが存在するかどうかを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.ContainsValue(`2)">
            <summary>
            指定した値が存在するかどうかを返す
            </summary>
            <param name="value">検索するキー</param>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.CopyTo(`2[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="arrayIndex"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.IndexOf(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ値のインデックスを返す
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns>見つかったらそのインデックス，見つからなかったら見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.IndexOf(`2)">
            <summary>
            指定した値のインデックスのうち先頭の物を返す
            </summary>
            <param name="value">検索する値</param>
            <returns>見つかったらそのインデックス，見つからなかったら見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.Insert(System.Int32,`0,`1,`2)">
            <summary>
            指定したインデックスにキーと値のペアを挿入する
            </summary>
            <param name="index">挿入する位置</param>
            <param name="key1">挿入する値のキー1</param>
            <param name="key2">挿入する値のキー2</param>
            <param name="value">挿入する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>より大きい</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが既に存在している</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.OverWrite(`0,`1,`0)">
            <summary>
            指定したキーを持つ値のキーを変更する
            キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="oldKey1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <param name="newKey1">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldKey1"/>または<paramref name="key2"/>，<paramref name="newKey1"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey1"/>と<paramref name="key2"/>の組み合わせが既に使用されている</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="oldKey1"/>と<paramref name="key2"/>の組み合わせが存在していない</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
            <returns>変更された要素のインデックス</returns>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.OverWrite(`0,`1,`1)">
            <summary>
            指定したキーを持つ値のキーを変更する
            キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="oldKey2">検索する値のキー2</param>
            <param name="newKey2">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="oldKey2"/>，<paramref name="newKey2"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key1"/>と<paramref name="newKey2"/>の組み合わせが既に使用されている</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="oldKey2"/>の組み合わせが存在していない</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
            <returns>変更された要素のインデックス</returns>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.OverWrite(`0,`1,`0,`1)">
            <summary>
            指定したキーを持つ値のキーを変更する
            キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="oldKey1">検索する値のキー1</param>
            <param name="oldKey2">検索する値のキー2</param>
            <param name="newKey1">変更後のキー1</param>
            <param name="newKey2">変更後のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldKey1"/>または<paramref name="oldKey2"/>，<paramref name="newKey1"/>，<paramref name="newKey2"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey1"/>と<paramref name="newKey2"/>の組み合わせが既に使用されている</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="oldKey1"/>と<paramref name="oldKey2"/>の組み合わせが存在していない</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
            <returns>変更された要素のインデックス</returns>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.OverWrite(System.Int32,`0)">
            <summary>
            指定したインデックスの要素のキーを変更する キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="index">キーを変更する要素のインデックス</param>
            <param name="newKey1">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newKey1"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey1"/>が既に使用されている</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.OverWrite(System.Int32,`1)">
            <summary>
            指定したインデックスの要素のキーを変更する キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="index">キーを変更する要素のインデックス</param>
            <param name="newKey2">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newKey2"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey2"/>が既に使用されている</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.OverWrite(System.Int32,`0,`1)">
            <summary>
            指定したインデックスの要素のキーを変更する キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="index">キーを変更する要素のインデックス</param>
            <param name="newKey1">変更後のキー1</param>
            <param name="newKey2">変更後のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newKey1"/>または<paramref name="newKey2"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey1"/>と<paramref name="newKey2"/>の組み合わせが既に使用されている</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
        </member>
        <member name="M:fslib.Collections.INumericDoubleKeyDictionary`3.Remove(`2)">
            <summary>
            指定した値のうち先頭の物を削除する
            </summary>
            <param name="value">削除する値</param>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.IReadOnlyDoubleKeyDictionary`3">
            <summary>
            2つのキーと値の読み取り専用コレクションを表す。
            </summary>
            <typeparam name="TKey1">読み取り専用ディクショナリの1つ目のキー</typeparam>
            <typeparam name="TKey2">読み取り専用ディクショナリの2つ目のキー</typeparam>
            <typeparam name="TValue">読み取り専用ディクショナリの値</typeparam>
        </member>
        <member name="P:fslib.Collections.IReadOnlyDoubleKeyDictionary`3.Item(`0,`1)">
            <summary>
            インデクサ
            <typeparamref name="TKey1"/>，<typeparamref name="TKey2"/>のペアと一致する<typeparamref name="TValue"/>を取得する
            </summary>
            <param name="key1">1つ目の<typeparamref name="TKey1"/></param>
            <param name="key2">2つ目の<typeparamref name="TKey2"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが<see cref="T:fslib.Collections.IReadOnlyDoubleKeyDictionary`3"/>内に存在しない</exception>
        </member>
        <member name="P:fslib.Collections.IReadOnlyDoubleKeyDictionary`3.Key1Collection">
            <summary>
            読み取り専用のディクショナリに含まれる列挙可能な<typeparamref name="TKey1"/>のコレクションを返す。
            </summary>
        </member>
        <member name="P:fslib.Collections.IReadOnlyDoubleKeyDictionary`3.Key2Collection">
            <summary>
            読み取り専用のディクショナリに含まれる列挙可能な<typeparamref name="TKey2"/>のコレクションを返す。
            </summary>
        </member>
        <member name="P:fslib.Collections.IReadOnlyDoubleKeyDictionary`3.Values">
            <summary>
            読み取り専用のディクショナリに含まれる列挙可能な<typeparamref name="TValue"/>のコレクションを返す。
            </summary>
        </member>
        <member name="M:fslib.Collections.IReadOnlyDoubleKeyDictionary`3.ContainsKeyPair(`0,`1)">
            <summary>
            指定した2つのキーが読み取り専用ディクショナリに存在するかどうかを返す。
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <returns>存在する場合はtrue, それ以外はfalse</returns>
            <exception cref="T:System.ArgumentNullException">keyがnull</exception>
        </member>
        <member name="M:fslib.Collections.IReadOnlyDoubleKeyDictionary`3.SelectFromKey1(`0)">
            <summary>
            指定したキー1を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.IReadOnlyDoubleKeyDictionary`3.SelectFromKey2(`1)">
            <summary>
            指定したキー2を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.IReadOnlyDoubleKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            指定した<typeparamref name="TKey1"/>と<typeparamref name="TKey2"/>のペアに結び付けられている値を返す。
            </summary>
            <param name="key1"><typeparamref name="TValue"/>を検索するための<typeparamref name="TKey1"/></param>
            <param name="key2"><typeparamref name="TValue"/>を検索するための<typeparamref name="TKey2"/></param>
            <param name="value"><typeparamref name="TValue"/>が存在した場合はその値が，存在しなかったら規定値が返される。</param>
            <returns>指定した要素が含まれている場合true，それ以外はfalse</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>又は<paramref name="key2"/>がnull</exception>
        </member>
        <member name="T:fslib.Collections.IReadOnlyNumericDictionary`2">
            <summary>
            インデックス検索とキー検索両方が出来る読み取り専用のジェネリックコレクションの基底インターフェイス
            </summary>
            <typeparam name="TKey">キーの型</typeparam>
            <typeparam name="TValue">値の型</typeparam>
        </member>
        <member name="P:fslib.Collections.IReadOnlyNumericDictionary`2.Keys">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.IReadOnlyNumericDictionary`2.Values">
            <summary>
            格納されている値のコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.IReadOnlyNumericDictionary`2.ContainsValue(`1)">
            <summary>
            指定した値が存在するかどうかを返す
            </summary>
            <param name="value">検索するキー</param>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.IReadOnlyNumericDoubleKeyDictionary`3">
            <summary>
            インデックス検索とキー検索両方が出来る読み取り専用のジェネリックコレクションの基底インターフェイス
            </summary>
            <typeparam name="TKey1">キーの型1</typeparam>
            <typeparam name="TKey2">キーの型2</typeparam>
            <typeparam name="TValue">値の型</typeparam>
        </member>
        <member name="P:fslib.Collections.IReadOnlyNumericDoubleKeyDictionary`3.Key1Collection">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.IReadOnlyNumericDoubleKeyDictionary`3.Key2Collection">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.IReadOnlyNumericDoubleKeyDictionary`3.Values">
            <summary>
            格納されている値のコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.IReadOnlyNumericDoubleKeyDictionary`3.ContainsKey1(`0)">
            <summary>
            指定したキーが存在するかどうかを返す
            </summary>
            <param name="key1">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>がnull</exception>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.IReadOnlyNumericDoubleKeyDictionary`3.ContainsKey2(`1)">
            <summary>
            指定したキーが存在するかどうかを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.IReadOnlyNumericDoubleKeyDictionary`3.ContainsValue(`2)">
            <summary>
            指定した値が存在するかどうかを返す
            </summary>
            <param name="value">検索するキー</param>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.IReversibleDictionary`2">
            <summary>
            双方向検索の可能なディクショナリを表す
            </summary>
            <typeparam name="T1">使用する型1</typeparam>
            <typeparam name="T2">使用する型2</typeparam>
        </member>
        <member name="P:fslib.Collections.IReversibleDictionary`2.Values1">
            <summary>
            <typeparamref name="T1"/>型の値のコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.IReversibleDictionary`2.Values2">
            <summary>
            <typeparamref name="T2"/>型の値のコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.IReversibleDictionary`2.Item(`0)">
            <summary>
            <typeparamref name="T1"/>型の値から<typeparamref name="T2"/>型の値を検索する
            </summary>
            <param name="value1">検索に使用する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value1"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="value1"/>が見つからなかった</exception>
            <returns><paramref name="value1"/>に該当する<typeparamref name="T2"/>型の値</returns>
        </member>
        <member name="P:fslib.Collections.IReversibleDictionary`2.Item(`1)">
            <summary>
            <typeparamref name="T2"/>型の値から<typeparamref name="T1"/>型の値を検索する
            </summary>
            <param name="value2">検索に使用する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="value2"/>が見つからなかった</exception>
            <returns><paramref name="value2"/>に該当する<typeparamref name="T1"/>型の値</returns>
        </member>
        <member name="M:fslib.Collections.IReversibleDictionary`2.Add(`0,`1)">
            <summary>
            値のペアを追加する
            </summary>
            <param name="value1">追加する<typeparamref name="T1"/>型の値</param>
            <param name="value2">追加する<typeparamref name="T2"/>型の値</param>
            <exception cref="T:System.ArgumentException"><typeparamref name="T1"/>または<typeparamref name="T2"/>が重複している</exception>
            <exception cref="T:System.ArgumentNullException"><typeparamref name="T1"/>または<typeparamref name="T2"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.IReversibleDictionary`2.ContainsValue1(`0)">
            <summary>
            指定した<typeparamref name="T1"/>型の値が格納されているかどうかを返す
            </summary>
            <param name="value1">検索する<typeparamref name="T1"/>型の値</param>
            <returns><paramref name="value1"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.IReversibleDictionary`2.ContainsValue2(`1)">
            <summary>
            指定した<typeparamref name="T2"/>型の値が格納されているかどうかを返す
            </summary>
            <param name="value2">検索する<typeparamref name="T2"/>型の値</param>
            <returns><paramref name="value2"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.IReversibleDictionary`2.Remove(`0)">
            <summary>
            指定した<typeparamref name="T1"/>型の値を持つペアを削除する
            </summary>
            <param name="value1">削除するペアの<typeparamref name="T1"/>型の値</param>
            <returns><paramref name="value1"/>を持つペアを削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.IReversibleDictionary`2.Remove(`1)">
            <summary>
            指定した<typeparamref name="T2"/>型の値を持つペアを削除する
            </summary>
            <param name="value2">削除するペアの<typeparamref name="T2"/>型の値</param>
            <returns><paramref name="value2"/>を持つペアを削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.IReversibleDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            <typeparamref name="T1"/>型の値から<typeparamref name="T2"/>型の値を検索する
            </summary>
            <param name="value1">検索に使用する値</param>
            <param name="value2"><paramref name="value1"/>に該当する<typeparamref name="T2"/>型の値 見つからなかったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value1"/>がnull</exception>
            <returns><paramref name="value2"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.IReversibleDictionary`2.TryGetValue(`1,`0@)">
            <summary>
            <typeparamref name="T2"/>型の値から<typeparamref name="T1"/>型の値を検索する
            </summary>
            <param name="value2">検索に使用する値</param>
            <param name="value1"><paramref name="value2"/>に該当する<typeparamref name="T1"/>型の値 見つからなかったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value2"/>がnull</exception>
            <returns><paramref name="value1"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="P:fslib.Collections.NodeCollection`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NodeCollection`1.Nodes">
            <summary>
            ノードを格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NodeCollection`1.Positions">
            <summary>
            位置情報を格納するコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.#ctor">
            <summary>
            既定の容量を備えた空の<see cref="T:fslib.Collections.NodeCollection`1"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.#ctor(System.Int32)">
            <summary>
            指定した容量を備えた空の<see cref="T:fslib.Collections.NodeCollection`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされた情報をもとに<see cref="T:fslib.Collections.NodeCollection`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="info">シリアライズされた情報を格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="P:fslib.Collections.NodeCollection`1.Item(System.Int32[])">
            <summary>
            指定した位置のノードを取得または設定する
            </summary>
            <param name="position">検索するノードの位置</param>
            <exception cref="T:System.ArgumentException">設定するノードの位置と<paramref name="position"/>が不適合</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>または設定しようとした値がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="position"/>の位置のノードが見つからない</exception>
            <returns><paramref name="position"/>の位置にあるノード</returns>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.Add(fslib.Collections.TreeNode{`0})">
            <summary>
            指定したノードを追加する
            </summary>
            <param name="node">追加するノード</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.ContainsKey(System.Int32[])">
            <summary>
            指定した位置にノードがあるかどうかを判定する
            </summary>
            <param name="position">検索するノードの位置</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>がnull</exception>
            <returns><paramref name="position"/>が存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.ContainsValue(fslib.Collections.TreeNode{`0})">
            <summary>
            指定したノードがあるかどうかを判定する
            </summary>
            <param name="node">検索するノード</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/>がnull</exception>
            <returns><paramref name="node"/>が存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.NodeCollection`1.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズする情報を設定する
            </summary>
            <param name="info">シリアライズする情報を格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現在はサポートされておらず，常にnullを返す</param>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.Remove(System.Int32[])">
            <summary>
            指定した位置のノードを削除する
            </summary>
            <param name="position">削除するノードの位置</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>がnull</exception>
            <returns>ノードを削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.Remove(fslib.Collections.TreeNode{`0})">
            <summary>
            指定したノードを削除する
            </summary>
            <param name="node">削除するノード</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/>がnull</exception>
            <returns><paramref name="node"/>を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.TryGetValue(System.Int32[],fslib.Collections.TreeNode{`0}@)">
            <summary>
            指定した位置のノードを検索する
            </summary>
            <param name="position">検索するノードの位置</param>
            <param name="node"><paramref name="position"/>の位置にあるノード 無かったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="position"/>がnull</exception>
            <returns><paramref name="node"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NodeCollection`1.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.NodeCollection`1.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            次に進められたらtrie，それ以外でfalse
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NodeCollection`1.PositionCollection">
            <summary>
            位置情報を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.NodeCollection`1.PositionCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.PositionCollection.CopyTo(System.Int32[][],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.PositionCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.NodeCollection`1.PositionCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Collections.NodeCollection`1.PositionCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.NodeCollection`1.PositionCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.PositionCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.PositionCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NodeCollection`1.TreeNodeCollection">
            <summary>
            ノードを格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.NodeCollection`1.TreeNodeCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.TreeNodeCollection.CopyTo(fslib.Collections.TreeNode{`0}[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.TreeNodeCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.NodeCollection`1.TreeNodeCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Collections.NodeCollection`1.TreeNodeCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.NodeCollection`1.TreeNodeCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.TreeNodeCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.NodeCollection`1.TreeNodeCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NumericDictionary`2">
            <summary>
            インデックスとキー両方で検索するコレクション
            </summary>
            <typeparam name="TKey">キーの型</typeparam>
            <typeparam name="TValue">値の型</typeparam>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.Comparer">
            <summary>
            キーを比較する比較子を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.Keys">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.Values">
            <summary>
            格納されている値のコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.#ctor">
            <summary>
            既定の容量と比較子を備えた空の<see cref="T:fslib.Collections.NumericDictionary`2"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を備えた空の<see cref="T:fslib.Collections.NumericDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            既定の容量と指定した比較子を備えた空の<see cref="T:fslib.Collections.NumericDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer">設定する比較子 nullの場合は既定の物を使う</param>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            指定した容量と比較子を備えた空の<see cref="T:fslib.Collections.NumericDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer">設定する比較子 nullの場合は既定の物を使う</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.Item(System.Int32)">
            <summary>
            指定したインデックスに対応する要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDictionary`2.Count"/>以上</exception>
            <returns>インデックスに対応する要素</returns>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.Item(`0)">
            <summary>
            指定したキーに対応する値を取得または設定する
            </summary>
            <param name="key">検索する値のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/>が存在しない</exception>
            <returns>キーに対応する値</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.Add(`0,`1)">
            <summary>
            指定したキーと値の組み合わせを末尾に追加する
            </summary>
            <param name="key">追加するキー</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key"/>が既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.Clear">
            <summary>
            コレクション内の要素をすべて削除する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="arrayIndex"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.ContainsKey(`0)">
            <summary>
            指定したキーが存在するかどうかを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.ContainsValue(`1)">
            <summary>
            指定した値が存在するかどうかを返す
            </summary>
            <param name="value">検索するキー</param>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.NumericDictionary`2.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.IndexOf(`0)">
            <summary>
            指定したキーを持つ値のインデックスを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>見つかったらそのインデックス，見つからなかったら見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.IndexOf(`1)">
            <summary>
            指定した値のインデックスのうち先頭の物を返す
            </summary>
            <param name="value">検索する値</param>
            <returns>見つかったらそのインデックス，見つからなかったら見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            指定したインデックスにキーと値のペアを挿入する
            </summary>
            <param name="index">挿入する位置</param>
            <param name="key">挿入する値のキー</param>
            <param name="value">挿入する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDictionary`2.Count"/>より大きい</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key"/>が既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.LastIndexOf(`1)">
            <summary>
            指定した値のインデックスのうち末尾の物を返す
            </summary>
            <param name="value">検索する値</param>
            <returns>見つかったらそのインデックス，見つからなかったら見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.OverWrite(`0,`0)">
            <summary>
            指定したキーを持つ値のキーを変更する
            キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="oldKey">検索する値のキー</param>
            <param name="newKey">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldKey"/>または<paramref name="newKey"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey"/>が既に使用されている</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="oldKey"/>が存在していない</exception>
            <returns>変更された要素のインデックス</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.OverWrite(System.Int32,`0)">
            <summary>
            指定したインデックスの要素のキーを変更する キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="index">キーを変更する要素のインデックス</param>
            <param name="newKey">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newKey"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDictionary`2.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey"/>が既に使用されている</exception>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.Remove(`0)">
            <summary>
            指定したキーを持つ値を削除する
            </summary>
            <param name="key">削除する値のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.Remove(`1)">
            <summary>
            指定した値のうち先頭の物を削除する
            </summary>
            <param name="value">削除する値</param>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.RemoveAt(System.Int32)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDictionary`2.Count"/>以上</exception>
            <exception cref="T:System.NotSupportedException">コレクションが読み取り専用</exception>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.ToDictionary">
            <summary>
            要素のコピーを持つ<see cref="T:System.Collections.Generic.Dictionary`2"/>のインスタンスを返す
            </summary>
            <returns>コピーを持つ<see cref="T:System.Collections.Generic.Dictionary`2"/>のインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            指定したキーを持つ値を検索する
            </summary>
            <param name="key">検索する値のキー</param>
            <param name="value"><paramref name="key"/>を持つ値 見つからなかったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>値が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NumericDictionary`2.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NumericDictionary`2.KeyCollection">
            <summary>
            <see cref="T:fslib.Collections.NumericDictionary`2"/>に格納されているキーのコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.KeyCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.KeyCollection.Item(System.Int32)">
            <summary>
            指定したインデックスに対応する要素を取得する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDictionary`2.KeyCollection.Count"/>以上</exception>
            <returns>インデックスに対応する要素</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="arrayIndex"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.NumericDictionary`2.KeyCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Collections.NumericDictionary`2.KeyCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.KeyCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.KeyCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NumericDictionary`2.ValueCollection">
            <summary>
            <see cref="T:fslib.Collections.NumericDictionary`2"/>に格納されている値のコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.ValueCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.ValueCollection.Item(System.Int32)">
            <summary>
            指定したインデックスに対応する要素を取得する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDictionary`2.ValueCollection.Count"/>以上</exception>
            <returns>インデックスに対応する要素</returns>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="arrayIndex"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.NumericDictionary`2.ValueCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Collections.NumericDictionary`2.ValueCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDictionary`2.ValueCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.ValueCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDictionary`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NumericDoubleKeyDictionary`3">
            <summary>
            インデックスと2種類のキーで検索できるコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.Comparer1">
            <summary>
            <typeparamref name="TKey1"/>を比較する比較子を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.Comparer2">
            <summary>
            <typeparamref name="TKey2"/>を比較する比較子を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.Keys1">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.Keys2">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.Values">
            <summary>
            格納されている値のコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.#ctor">
            <summary>
            既定の容量と比較子を備えた空の<see cref="T:fslib.Collections.NumericDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を備えた空の<see cref="T:fslib.Collections.NumericDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            既定の容量と指定した比較子を備えた空の<see cref="T:fslib.Collections.NumericDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer1"><typeparamref name="TKey1"/>の比較に用いる比較子 nullの場合は既定の物を使う</param>
            <param name="comparer2"><typeparamref name="TKey2"/>の比較に用いる比較子 nullの場合は既定の物を使う</param>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            指定した容量と比較子を備えた空の<see cref="T:fslib.Collections.NumericDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer1"><typeparamref name="TKey1"/>の比較に用いる比較子 nullの場合は既定の物を使う</param>
            <param name="comparer2"><typeparamref name="TKey2"/>の比較に用いる比較子 nullの場合は既定の物を使う</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEnumerable{fslib.Collections.DoubleKeyValuePair{`0,`1,`2}})">
            <summary>
            既定の比較子を備えコレクションのコピーを格納した<see cref="T:fslib.Collections.NumericDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーするコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEnumerable{fslib.Collections.DoubleKeyValuePair{`0,`1,`2}},System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            指定した比較子を備えコレクションのコピーを格納した<see cref="T:fslib.Collections.NumericDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーするコレクション</param>
            <param name="comparer1">キー1の比較子 nullの場合は既定の物を使用する</param>
            <param name="comparer2">キー2の比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.Item(System.Int32)">
            <summary>
            指定したインデックスに対応する要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>以上</exception>
            <returns>インデックスに対応する要素</returns>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.Item(`0,`1)">
            <summary>
            指定したキーに対応する値を取得または設定する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが存在しない</exception>
            <returns>キーに対応する値</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.Add(`0,`1,`2)">
            <summary>
            指定したキーと値の組み合わせを末尾に追加する
            </summary>
            <param name="key1">追加するキー1</param>
            <param name="key2">追加するキー2</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.Clear">
            <summary>
            要素をすべて削除する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.ContainsKey1(`0)">
            <summary>
            指定したキーが存在するかどうかを返す
            </summary>
            <param name="key1">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>がnull</exception>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.ContainsKey2(`1)">
            <summary>
            指定したキーが存在するかどうかを返す
            </summary>
            <param name="key2">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key2"/>がnull</exception>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.ContainsKeyPair(`0,`1)">
            <summary>
            指定したキーの組み合わせが存在するかどうかを返す
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns>存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.ContainsValue(`2)">
            <summary>
            指定した値が存在するかどうかを返す
            </summary>
            <param name="value">検索するキー</param>
            <returns>キーが存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.CopyTo(`2[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="arrayIndex"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.NumericDoubleKeyDictionary`3.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.IndexOf(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ値のインデックスを返す
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns>見つかったらそのインデックス，見つからなかったら見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.IndexOf(`2)">
            <summary>
            指定した値のインデックスのうち先頭の物を返す
            </summary>
            <param name="value">検索する値</param>
            <returns>見つかったらそのインデックス，見つからなかったら見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.Insert(System.Int32,`0,`1,`2)">
            <summary>
            指定したインデックスにキーと値のペアを挿入する
            </summary>
            <param name="index">挿入する位置</param>
            <param name="key1">挿入する値のキー1</param>
            <param name="key2">挿入する値のキー2</param>
            <param name="value">挿入する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDoubleKeyDictionary`3.Count"/>より大きい</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.LastIndexOf(`2)">
            <summary>
            指定した値のインデックスのうち末尾の物を返す
            </summary>
            <param name="value">検索する値</param>
            <returns>見つかったらそのインデックス，見つからなかったら見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.OverWrite(`0,`1,`0)">
            <summary>
            指定したキーを持つ値のキーを変更する
            キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="oldKey1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <param name="newKey1">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldKey1"/>または<paramref name="key2"/>，<paramref name="newKey1"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey1"/>と<paramref name="key2"/>の組み合わせが既に使用されている</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="oldKey1"/>と<paramref name="key2"/>の組み合わせが存在していない</exception>
            <returns>変更された要素のインデックス</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.OverWrite(`0,`1,`1)">
            <summary>
            指定したキーを持つ値のキーを変更する
            キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="oldKey2">検索する値のキー2</param>
            <param name="newKey2">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="oldKey2"/>，<paramref name="newKey2"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key1"/>と<paramref name="newKey2"/>の組み合わせが既に使用されている</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="oldKey2"/>の組み合わせが存在していない</exception>
            <returns>変更された要素のインデックス</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.OverWrite(`0,`1,`0,`1)">
            <summary>
            指定したキーを持つ値のキーを変更する
            キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="oldKey1">検索する値のキー1</param>
            <param name="oldKey2">検索する値のキー2</param>
            <param name="newKey1">変更後のキー1</param>
            <param name="newKey2">変更後のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldKey1"/>または<paramref name="oldKey2"/>，<paramref name="newKey1"/>，<paramref name="newKey2"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey1"/>と<paramref name="newKey2"/>の組み合わせが既に使用されている</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="oldKey1"/>と<paramref name="oldKey2"/>の組み合わせが存在していない</exception>
            <returns>変更された要素のインデックス</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.OverWrite(System.Int32,`0)">
            <summary>
            指定したインデックスの要素のキーを変更する キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="index">キーを変更する要素のインデックス</param>
            <param name="newKey1">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newKey1"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDoubleKeyDictionary`3.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey1"/>が既に使用されている</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.OverWrite(System.Int32,`1)">
            <summary>
            指定したインデックスの要素のキーを変更する キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="index">キーを変更する要素のインデックス</param>
            <param name="newKey2">変更後のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newKey2"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDoubleKeyDictionary`3.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey2"/>が既に使用されている</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.OverWrite(System.Int32,`0,`1)">
            <summary>
            指定したインデックスの要素のキーを変更する キーが変更された要素のインデックスは変わらない
            </summary>
            <param name="index">キーを変更する要素のインデックス</param>
            <param name="newKey1">変更後のキー1</param>
            <param name="newKey2">変更後のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newKey1"/>または<paramref name="newKey2"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDoubleKeyDictionary`3.Count"/>以上</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="newKey1"/>と<paramref name="newKey2"/>の組み合わせが既に使用されている</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.Remove(`0,`1)">
            <summary>
            指定したキーを持つ値を削除する
            </summary>
            <param name="key1">削除する値のキー1</param>
            <param name="key2">削除する値のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.Remove(`2)">
            <summary>
            指定した値のうち先頭の物を削除する
            </summary>
            <param name="value">削除する値</param>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.RemoveAt(System.Int32)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDoubleKeyDictionary`3.Count"/>以上</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.SelectFromKey1(`0)">
            <summary>
            指定しキー1を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.SelectFromKey2(`1)">
            <summary>
            指定しキー2を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            指定したキーを持つ値を検索する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <param name="value"><paramref name="key1"/>と<paramref name="key2"/>を持つ値 見つからなかったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns>値が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NumericDoubleKeyDictionary`3.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1">
            <summary>
            キーを格納するコレクションの基底クラス
            </summary>
            <typeparam name="TKey">キーの型</typeparam>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1.Item(System.Int32)">
            <summary>
            指定したインデックスに対応する要素を取得する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1.Count"/>以上</exception>
            <returns>インデックスに対応する要素</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1.CopyTo(`3[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="arrayIndex"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.KeyCollectionBase`1.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.NumericDoubleKeyDictionary`3.Key1Collection">
            <summary>
            <typeparamref name="TKey1"/>を格納するコレクションのクラス
            </summary>
        </member>
        <member name="T:fslib.Collections.NumericDoubleKeyDictionary`3.Key2Collection">
            <summary>
            <typeparamref name="TKey2"/>を格納するコレクションのクラス
            </summary>
        </member>
        <member name="T:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection">
            <summary>
            <typeparamref name="TValue"/>を格納するコレクションのクラス
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection.Item(System.Int32)">
            <summary>
            指定したインデックスに対応する要素を取得する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection.Count"/>以上</exception>
            <returns>インデックスに対応する要素</returns>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection.CopyTo(`2[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="arrayIndex"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.NumericDoubleKeyDictionary`3.ValueCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.ReversibleDictionary`2">
            <summary>
            双方から検索が可能なディクショナリ
            </summary>
            <typeparam name="T1">使用する型1</typeparam>
            <typeparam name="T2">使用する型2</typeparam>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Comparer1">
            <summary>
            <typeparamref name="T1"/>型の値の比較子を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Comparer2">
            <summary>
            <typeparamref name="T2"/>型の値の比較子を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Values1">
            <summary>
            <typeparamref name="T1"/>型の値のコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Values2">
            <summary>
            <typeparamref name="T2"/>型の値のコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.#ctor">
            <summary>
            既定の容量と比較子を持った<see cref="T:fslib.Collections.ReversibleDictionary`2"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を持った<see cref="T:fslib.Collections.ReversibleDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            既定の容量と指定した比較子を持った<see cref="T:fslib.Collections.ReversibleDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer1">使用する<typeparamref name="T1"/>型の比較子</param>
            <param name="comparer2">使用する<typeparamref name="T2"/>型の比較子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer1"/>または<paramref name="comparer2"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            指定した容量と比較子を持った<see cref="T:fslib.Collections.ReversibleDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer1">使用する<typeparamref name="T1"/>型の比較子</param>
            <param name="comparer2">使用する<typeparamref name="T2"/>型の比較子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer1"/>または<paramref name="comparer2"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Item(`0)">
            <summary>
            <typeparamref name="T1"/>型の値から<typeparamref name="T2"/>型の値を検索する
            </summary>
            <param name="value1">検索に使用する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value1"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="value1"/>が見つからなかった</exception>
            <returns><paramref name="value1"/>に該当する<typeparamref name="T2"/>型の値</returns>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Item(`1)">
            <summary>
            <typeparamref name="T2"/>型の値から<typeparamref name="T1"/>型の値を検索する
            </summary>
            <param name="value2">検索に使用する値</param>
            <returns><paramref name="value2"/>に該当する<typeparamref name="T1"/>型の値</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="value2"/>が見つからなかった</exception>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Add(`0,`1)">
            <summary>
            値のペアを追加する
            </summary>
            <param name="value1">追加する<typeparamref name="T1"/>型の値</param>
            <param name="value2">追加する<typeparamref name="T2"/>型の値</param>
            <exception cref="T:System.ArgumentException"><typeparamref name="T1"/>または<typeparamref name="T2"/>が重複している</exception>
            <exception cref="T:System.ArgumentNullException"><typeparamref name="T1"/>または<typeparamref name="T2"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Clear">
            <summary>
            コレクションの要素をすべて削除する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.ContainsValue1(`0)">
            <summary>
            指定した<typeparamref name="T1"/>型の値が格納されているかどうかを返す
            </summary>
            <param name="value1">検索する<typeparamref name="T1"/>型の値</param>
            <returns><paramref name="value1"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.ContainsValue2(`1)">
            <summary>
            指定した<typeparamref name="T2"/>型の値が格納されているかどうかを返す
            </summary>
            <param name="value2">検索する<typeparamref name="T2"/>型の値</param>
            <returns><paramref name="value2"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.ReversibleDictionary`2.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Remove(`0)">
            <summary>
            指定した<typeparamref name="T1"/>型の値を持つペアを削除する
            </summary>
            <param name="value1">削除するペアの<typeparamref name="T1"/>型の値</param>
            <returns><paramref name="value1"/>を持つペアを削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Remove(`1)">
            <summary>
            指定した<typeparamref name="T2"/>型の値を持つペアを削除する
            </summary>
            <param name="value2">削除するペアの<typeparamref name="T2"/>型の値</param>
            <returns><paramref name="value2"/>を持つペアを削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.TryAdd(`0,`1)">
            <summary>
            値のペアを追加する
            </summary>
            <param name="value1">追加する<typeparamref name="T1"/>型の値</param>
            <param name="value2">追加する<typeparamref name="T2"/>型の値</param>
            <exception cref="T:System.ArgumentNullException"><typeparamref name="T1"/>または<typeparamref name="T2"/>がnull</exception>
            <returns><paramref name="value1"/>または<paramref name="value2"/>に重複があった場合false，それ以外でtrue</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            <typeparamref name="T1"/>型の値から<typeparamref name="T2"/>型の値を検索する
            </summary>
            <param name="value1">検索に使用する値</param>
            <param name="value2"><paramref name="value1"/>に該当する<typeparamref name="T2"/>型の値 見つからなかったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value1"/>がnull</exception>
            <returns><paramref name="value2"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.TryGetValue(`1,`0@)">
            <summary>
            <typeparamref name="T2"/>型の値から<typeparamref name="T1"/>型の値を検索する
            </summary>
            <param name="value2">検索に使用する値</param>
            <param name="value1"><paramref name="value2"/>に該当する<typeparamref name="T1"/>型の値 見つからなかったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value2"/>がnull</exception>
            <returns><paramref name="value1"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.ReversibleDictionary`2.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.ReversibleDictionary`2.Value1Collection">
            <summary>
            <typeparamref name="T1"/>型の値のコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Value1Collection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value1Collection.CopyTo(`0[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value1Collection.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value1Collection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.ReversibleDictionary`2.Value1Collection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value1Collection.ToArray">
            <summary>
            配列に変換する
            </summary>
            <returns>このインスタンスのコピーを持つ配列</returns>
        </member>
        <member name="T:fslib.Collections.ReversibleDictionary`2.Value1Collection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Value1Collection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value1Collection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value1Collection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.ReversibleDictionary`2.Value2Collection">
            <summary>
            <typeparamref name="T2"/>型の値のコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Value2Collection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value2Collection.CopyTo(`1[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value2Collection.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value2Collection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.ReversibleDictionary`2.Value2Collection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value2Collection.ToArray">
            <summary>
            配列に変換する
            </summary>
            <returns>このインスタンスのコピーを持つ配列</returns>
        </member>
        <member name="T:fslib.Collections.ReversibleDictionary`2.Value2Collection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.ReversibleDictionary`2.Value2Collection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value2Collection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleDictionary`2.Value2Collection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.TreeNode`1">
            <summary>
            木構造のノードのクラス
            </summary>
            <typeparam name="T">格納される値の型</typeparam>
        </member>
        <member name="P:fslib.Collections.TreeNode`1.Children">
            <summary>
            子ノードを格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.TreeNode`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.TreeNode`1.Position">
            <summary>
            このノードの位置を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.TreeNode`1.Parent">
            <summary>
            このノードの親ノードを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.#ctor(System.Int32)">
            <summary>
            指定した容量を持つ空の<see cref="T:fslib.Collections.TreeNode`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.Add(`0)">
            <summary>
            指定した要素を追加する
            </summary>
            <param name="item">追加する要素</param>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.CopyTo(`0[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.Contains(`0)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.TreeNode`1.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.Remove(`0)">
            <summary>
            指定した要素を削除する
            </summary>
            <param name="item">削除する要素</param>
            <returns><paramref name="item"/>を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.ToArray">
            <summary>
            格納されている要素を配列化して返す
            </summary>
            <returns>格納されている要素の配列</returns>
        </member>
        <member name="T:fslib.Collections.TreeNode`1.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.TreeNode`1.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.TreeNode`1.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.ReversibleValuePair`2">
            <summary>
            反転可能な2種類の値を格納する構造体
            </summary>
            <typeparam name="T1">使用する型1</typeparam>
            <typeparam name="T2">使用する型2</typeparam>
        </member>
        <member name="P:fslib.Collections.ReversibleValuePair`2.Value1">
            <summary>
            <typeparamref name="T1"/>型の値を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.ReversibleValuePair`2.Value2">
            <summary>
            <typeparamref name="T2"/>型の値を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.ReversibleValuePair`2.#ctor(`0,`1)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="value1"><typeparamref name="T1"/>型の値</param>
            <param name="value2"><typeparamref name="T2"/>型の値</param>
        </member>
        <member name="M:fslib.Collections.ReversibleValuePair`2.Equals(fslib.Collections.ReversibleValuePair{`0,`1})">
            <summary>
            もう一つの<see cref="T:fslib.Collections.ReversibleValuePair`2"/>との等価性を判定する
            </summary>
            <param name="other">等価性を判定する<see cref="T:fslib.Collections.ReversibleValuePair`2"/>のインスタンス</param>
            <returns><paramref name="other"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleValuePair`2.Equals(fslib.Collections.ReversibleValuePair{`1,`0})">
            <summary>
            要素が逆な<see cref="T:fslib.Collections.ReversibleValuePair`2"/>との等価性を判定する
            </summary>
            <param name="reversal">等価性を判定する<see cref="T:fslib.Collections.ReversibleValuePair`2"/>のインスタンス</param>
            <returns><paramref name="reversal"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleValuePair`2.Equals(System.Object)">
            <summary>
            あるオブジェクトとの等価性を判定する
            </summary>
            <param name="obj">等価性を判定するオブジェクト</param>
            <returns><paramref name="obj"/>との等価性が確認されたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleValuePair`2.GetHashCode">
            <summary>
            ハッシュコードを取得する
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="M:fslib.Collections.ReversibleValuePair`2.Reverse">
            <summary>
            要素が逆な<see cref="T:fslib.Collections.ReversibleValuePair`2"/>の新しいインスタンスを生成する
            </summary>
            <returns>要素が逆な<see cref="T:fslib.Collections.ReversibleValuePair`2"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Collections.DoubleKeyDictionary`3">
            <summary>
            2種類のキーと値のコレクションを表す。
            </summary>
            <typeparam name="TKey1">キー1</typeparam>
            <typeparam name="TKey2">キー2</typeparam>
            <typeparam name="TValue">値</typeparam>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Comparer1">
            <summary>
            <typeparamref name="TKey1"/>の比較子を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Comparer2">
            <summary>
            <typeparamref name="TKey2"/>の比較子を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Keys1">
            <summary>
            <typeparamref name="TKey1"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Keys2">
            <summary>
            <typeparamref name="TKey2"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Values">
            <summary>
            <typeparamref name="TValue"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.#ctor">
            <summary>
            既定の容量と比較子を備えた<see cref="T:fslib.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を備えた<see cref="T:fslib.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            既定の容量と指定した比較子を備えた<see cref="T:fslib.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer1">比較子1</param>
            <param name="comparer2">比較子2</param>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            指定した容量と比較子を備えた<see cref="T:fslib.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer1">比較子1</param>
            <param name="comparer2">比較子2</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされた情報をもとに<see cref="T:fslib.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="info">シリアライズされた情報を格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Item(`0,`1)">
            <summary>
            指定した組み合わせのキーを持つ値を取得または設定する
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <returns><paramref name="key1"/>と<paramref name="key2"/>に割り当てられた値</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが見つからなかった</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Add(`0,`1,`2)">
            <summary>
            指定したキーと値の組み合わせを追加する
            </summary>
            <param name="key1">追加するキー1</param>
            <param name="key2">追加するキー2</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが既に存在している</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.ContainsKeyPair(`0,`1)">
            <summary>
            指定したキーの組み合わせが格納されているかどうかを返す
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.ContainsKey1(`0)">
            <summary>
            指定したキーが格納されているかどうかを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.ContainsKey2(`1)">
            <summary>
            指定したキーが格納されているかどうかを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.ContainsValue(`2)">
            <summary>
            指定した値が格納されているかどうかを返す
            </summary>
            <param name="value">検索する値</param>
            <returns><paramref name="value"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.DoubleKeyDictionary`3.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズする情報を設定する
            </summary>
            <param name="info">シリアライズする情報を格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Remove(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ要素を削除する
            </summary>
            <param name="key1">削除する要素のキー1</param>
            <param name="key2">削除する要素のキー2</param>
            <returns>要素を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.SelectFromKey1(`0)">
            <summary>
            指定したキー1を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.SelectFromKey2(`1)">
            <summary>
            指定したキー2を持つ要素のコレクションを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値のコレクション</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.TryAdd(`0,`1,`2)">
            <summary>
            指定したキーと値の組み合わせを追加する
            </summary>
            <param name="key1">追加するキー1</param>
            <param name="key2">追加するキー2</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが既に存在している</exception>
            <returns>追加出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            指定したキーの組み合わせを持つ値を取得する
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <param name="value"><paramref name="key1"/>と<paramref name="key2"/>を持つ値 無かったら既定値</param>
            <returns><paramref name="value"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.DoubleKeyDictionary`3.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.DoubleKeyDictionary`3.Key1Collection">
            <summary>
            <typeparamref name="TKey1"/>型の要素を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Key1Collection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key1Collection.CopyTo(`0[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key1Collection.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key1Collection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.DoubleKeyDictionary`3.Key1Collection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key1Collection.ToArray">
            <summary>
            配列に変換する
            </summary>
            <returns>このインスタンスの要素のコピーを格納した配列</returns>
        </member>
        <member name="T:fslib.Collections.DoubleKeyDictionary`3.Key1Collection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Key1Collection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key1Collection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key1Collection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.DoubleKeyDictionary`3.Key2Collection">
            <summary>
            <typeparamref name="TKey2"/>型の要素を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Key2Collection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key2Collection.CopyTo(`1[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key2Collection.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key2Collection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.DoubleKeyDictionary`3.Key2Collection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key2Collection.ToArray">
            <summary>
            配列に変換する
            </summary>
            <returns>このインスタンスの要素のコピーを格納した配列</returns>
        </member>
        <member name="T:fslib.Collections.DoubleKeyDictionary`3.Key2Collection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.Key2Collection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key2Collection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.Key2Collection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Collections.DoubleKeyDictionary`3.ValueCollection">
            <summary>
            <typeparamref name="TValue"/>型の要素を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.ValueCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.ValueCollection.CopyTo(`2[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.ValueCollection.CopyTo(`2[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.ValueCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib.Collections.DoubleKeyDictionary`3.ValueCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.ValueCollection.ToArray">
            <summary>
            配列に変換する
            </summary>
            <returns>このインスタンスの要素のコピーを格納した配列</returns>
        </member>
        <member name="T:fslib.Collections.DoubleKeyDictionary`3.ValueCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.Collections.DoubleKeyDictionary`3.ValueCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.ValueCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Collections.DoubleKeyDictionary`3.ValueCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.ColorPlus">
            <summary>
            <see cref="T:asd.Color"/>と互換性がある色の構造体
            </summary>
        </member>
        <member name="P:fslib.ColorPlus.R">
            <summary>
            赤の値を取得する
            </summary>
        </member>
        <member name="P:fslib.ColorPlus.G">
            <summary>
            緑の値を取得する
            </summary>
        </member>
        <member name="P:fslib.ColorPlus.B">
            <summary>
            青の値を取得する
            </summary>
        </member>
        <member name="P:fslib.ColorPlus.A">
            <summary>
            透明度を取得する
            </summary>
        </member>
        <member name="P:fslib.ColorPlus.WindowDefaultColor">
            <summary>
            <see cref="F:fslib.ColorSet.WindowDefault"/>のRGBA
            </summary>
        </member>
        <member name="P:fslib.ColorPlus.CursorDefaultColor">
            <summary>
            <see cref="F:fslib.ColorSet.CursorDefault"/>のRGBA
            </summary>
        </member>
        <member name="M:fslib.ColorPlus.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            コンストラクタ
            </summary>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
        </member>
        <member name="M:fslib.ColorPlus.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            コンストラクタ
            </summary>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
            <param name="a">透明度</param>
        </member>
        <member name="M:fslib.ColorPlus.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
        </member>
        <member name="M:fslib.ColorPlus.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="r">赤</param>
            <param name="g">緑</param>
            <param name="b">青</param>
            <param name="a">透明度</param>
        </member>
        <member name="M:fslib.ColorPlus.#ctor(asd.Color)">
            <summary>
            コンストラクタ
            </summary>
            <param name="color">変換元の<see cref="T:asd.Color"/></param>
        </member>
        <member name="M:fslib.ColorPlus.#ctor(fslib.ColorSet)">
            <summary>
            <see cref="T:fslib.ColorSet"/>から<see cref="T:fslib.ColorPlus"/>のインスタンスを生成する
            </summary>
            <param name="colorSet">生成したい色を表す<see cref="T:fslib.ColorSet"/>のインスタンス</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="colorSet"/>が<see cref="T:fslib.ColorSet"/>における定義外</exception>
            <returns><paramref name="colorSet"/>で指定された色を持つ<see cref="T:fslib.ColorPlus"/>のインスタンス</returns>
        </member>
        <member name="M:fslib.ColorPlus.Add(fslib.ColorPlus,fslib.ColorPlus)">
            <summary>
            2つの<see cref="T:fslib.ColorPlus"/>を加算する
            </summary>
            <param name="c1">もととなる色</param>
            <param name="c2">足す色</param>
            <returns>加算された色</returns>
        </member>
        <member name="M:fslib.ColorPlus.ColorDetermination(fslib.ColorSet)">
            <summary>
            <see cref="T:fslib.ColorPlus"/>に変換する
            </summary>
            <param name="colorSet">色の種類</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">不正な値が指定された</exception>
        </member>
        <member name="M:fslib.ColorPlus.Divide(fslib.ColorPlus,System.Byte)">
            <summary>
            <see cref="T:fslib.ColorPlus"/>と8ビット符号なし整数で除算する
            </summary>
            <param name="c">もととなる色</param>
            <param name="scalar">割る値</param>
            <returns>除算された色</returns>
        </member>
        <member name="M:fslib.ColorPlus.Equals(fslib.ColorPlus)">
            <summary>
            もう一つの<see cref="T:fslib.ColorPlus"/>のインスタンスとの同値性を検証する
            </summary>
            <param name="other">比較するもう一つの<see cref="T:fslib.ColorPlus"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ColorPlus.Equals(fslib.ColorPlus,fslib.ColorPlus)">
            <summary>
            二つの<see cref="T:fslib.ColorPlus"/>のインスタンスの同値性を検証する
            </summary>
            <param name="color1">比較する<see cref="T:fslib.ColorPlus"/>のインスタンス</param>
            <param name="color2">比較するもう一つの<see cref="T:fslib.ColorPlus"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ColorPlus.Equals(fslib.ColorPlus,asd.Color)">
            <summary>
            <see cref="T:fslib.ColorPlus"/>のインスタンスと<see cref="T:asd.Color"/>の同値性を検証する
            </summary>
            <param name="fscolor">比較する<see cref="T:fslib.ColorPlus"/>のインスタンス</param>
            <param name="asdcolor">比較する<see cref="T:asd.Color"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ColorPlus.Equals(System.Object)">
            <summary>
            このインスタンスと指定したオブジェクトが等しいかどうか判定する
            </summary>
            <param name="obj">判定する<see cref="T:System.Object"/>のインスタンス</param>
            <returns>等しかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ColorPlus.FromSystemColor(System.Drawing.Color)">
            <summary>
            <see cref="T:System.Drawing.Color"/>から<see cref="T:fslib.ColorPlus"/>の新しいインスタンスを生成する
            </summary>
            <param name="systemcolor">もととなる<see cref="T:System.Drawing.Color"/>のインスタンス</param>
            <returns><paramref name="systemcolor"/>と等価な<see cref="T:fslib.ColorPlus"/>のインスタンス</returns>
        </member>
        <member name="M:fslib.ColorPlus.GetHashCode">
            <summary>
            このインスタンスのハッシュコードを返す
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="M:fslib.ColorPlus.Multiply(fslib.ColorPlus,System.Byte)">
            <summary>
            <see cref="T:fslib.ColorPlus"/>と8ビット符号なし整数で乗算する
            </summary>
            <param name="c">もととなる色</param>
            <param name="scalar">掛ける値</param>
            <returns>乗算された色</returns>
        </member>
        <member name="M:fslib.ColorPlus.Substract(fslib.ColorPlus,fslib.ColorPlus)">
            <summary>
            2つの<see cref="T:fslib.ColorPlus"/>を減算する
            </summary>
            <param name="c1">もととなる色</param>
            <param name="c2">引く色</param>
            <returns>減算された色</returns>
        </member>
        <member name="M:fslib.ColorPlus.ToAsdColor">
            <summary>
            <see cref="T:asd.Color"/>に変換する
            </summary>
            <returns><see cref="T:asd.Color"/>のインスタンス</returns>
        </member>
        <member name="M:fslib.ColorPlus.ToSystemColor">
            <summary>
            このインスタンスと等価な<see cref="T:System.Drawing.Color"/>のインスタンスを生成する
            </summary>
            <returns>このインスタンスと等価な<see cref="T:System.Drawing.Color"/>のインスタンス</returns>
        </member>
        <member name="M:fslib.ColorPlus.TryGetColorSet(asd.Color,fslib.ColorPlus@)">
            <summary>
            <see cref="T:asd.Color"/>が<see cref="T:fslib.ColorSet"/>のセットに存在するか返す
            </summary>
            <param name="color">調べたい<see cref="T:asd.Color"/></param>
            <param name="default">存在していたらその値を，存在していなかったら既定値を返す</param>
            <returns>存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ColorPlus.ToString">
            <summary>
            このインスタンスを表す文字列を返す
            </summary>
            <returns>このインスタンスを表す文字列</returns>
        </member>
        <member name="T:fslib.CompareHelper">
            <summary>
            オブジェクトの比較をサポートするクラス
            </summary>
        </member>
        <member name="M:fslib.CompareHelper.AssignIfNull``1(``0@,``0)">
            <summary>
            指定した値がnullの場合，指定した値を代入して返す
            </summary>
            <typeparam name="T">null判定を行う値</typeparam>
            <param name="value">検証する値</param>
            <param name="assignValue"><paramref name="value"/>がnullの時代入される値</param>
            <returns><paramref name="value"/>がnullだったら<paramref name="assignValue"/>が代入されて返され，それ以外ではそのまま</returns>
        </member>
        <member name="M:fslib.CompareHelper.AssignIfNull``1(``0@,System.Func{``0})">
            <summary>
            指定した値がnullの場合，指定した値を代入して返す
            </summary>
            <typeparam name="T">null判定を行う値</typeparam>
            <param name="value">検証する値</param>
            <param name="provider"><paramref name="value"/>がnullの時代入される値を返す関数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>がnull</exception>
            <returns><paramref name="value"/>がnullだったら<paramref name="provider"/>の結果が代入されて返され，それ以外ではそのまま</returns>
        </member>
        <member name="M:fslib.CompareHelper.CompareAssign``1(``0@,``0,``0)">
            <summary>
            指定した2つの値が等しい場合，指定した値を代入して返す
            </summary>
            <typeparam name="T">判定を行う型</typeparam>
            <param name="value">検証する値</param>
            <param name="comparison">比較する値</param>
            <param name="assignValue"><paramref name="value"/>が<paramref name="comparison"/>と等しい時代入される値</param>
            <returns><paramref name="value"/>が<paramref name="comparison"/>と等しい場合は<paramref name="assignValue"/>が代入されて返され，それ以外ではそのまま</returns>
        </member>
        <member name="M:fslib.CompareHelper.CompareAssign``1(``0@,``0,System.Func{``0})">
            <summary>
            指定した2つの値が等しい場合，指定した値を代入して返す
            </summary>
            <typeparam name="T">判定を行う型</typeparam>
            <param name="value">検証する値</param>
            <param name="comparison">比較する値</param>
            <param name="provider"><paramref name="value"/>が<paramref name="comparison"/>と等しい時代入される値を返す関数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/>がnull</exception>
            <returns><paramref name="value"/>が<paramref name="comparison"/>と等しい場合は<paramref name="provider"/>の結果が代入されて返され，それ以外ではそのまま</returns>
        </member>
        <member name="M:fslib.CompareHelper.Equals``1(``0@,``0@)">
            <summary>
            2つの値の等価性を判定する
            </summary>
            <typeparam name="T">等価性を判定する型</typeparam>
            <param name="t1">等価性を判定する値1</param>
            <param name="t2">等価性を判定する値2</param>
            <returns><paramref name="t1"/>と<paramref name="t2"/>が等価だった場合はtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.CompareHelper.Equals``1(``0@,``0@,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            2つの値の等価性を判定する
            </summary>
            <typeparam name="T">等価性を判定する型</typeparam>
            <param name="t1">等価性を判定する値1</param>
            <param name="t2">等価性を判定する値2</param>
            <param name="comparer"><paramref name="t1"/>と<paramref name="t2"/>を比較する比較子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/>がnull</exception>
            <returns><paramref name="t1"/>と<paramref name="t2"/>が等価だったらtrue，それ以外でfalse</returns>
            <remarks><paramref name="comparer"/>は必ず使用されるとは限らない</remarks>
        </member>
        <member name="M:fslib.CompareHelper.IsCompatibleValue``1(System.Object)">
            <summary>
            指定したオブジェクトが特定のジェネリック型に適合するかどうかを検証する
            </summary>
            <typeparam name="T">検証する型</typeparam>
            <param name="value"><typeparamref name="T"/>として適切か検証する値</param>
            <returns><paramref name="value"/>が<typeparamref name="T"/>として適切な値であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.CompareHelper.IsCompatibleValue``1(System.Object,``0@)">
            <summary>
            指定したオブジェクトが特定のジェネリック型に適合するかどうかを検証する
            </summary>
            <typeparam name="T">検証する型</typeparam>
            <param name="value"><typeparamref name="T"/>として適切か検証する値</param>
            <param name="result"><typeparamref name="T"/>としてのキャスト結果 <paramref name="value"/>が<typeparamref name="T"/>として適切ならキャストされた値，それ以外で既定値</param>
            <returns><paramref name="value"/>が<typeparamref name="T"/>として適切な値であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.CompareHelper.IsCompatibleUsableValue``1(System.Object,``0@)">
            <summary>
            指定したオブジェクトが特定のジェネリック型に適合するかどうかを検証する
            </summary>
            <typeparam name="T">検証する型</typeparam>
            <param name="value"><typeparamref name="T"/>として適切かどうか検証する値</param>
            <param name="result"><typeparamref name="T"/>としてのキャスト結果 <paramref name="value"/>が<typeparamref name="T"/>として適切ならキャストされた値，それ以外で既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>がnull</exception>
            <returns><paramref name="value"/>が<typeparamref name="T"/>として適切な値であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Components.CoroutineInfo`2">
            <summary>
            コルーチン実行時の情報を格納するクラス
            このクラスは継承不可
            </summary>
            <typeparam name="TCounter">コルーチンを行うカウンターのジェネリック</typeparam>
            <typeparam name="TOwner">コルーチンを実行するオーナーのジェネリック</typeparam>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.Key">
            <summary>
            自身に割り当てられたキーを取得する
            </summary>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.IsLooping">
            <summary>
            コルーチンの動作をループするかどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.IsPaused">
            <summary>
            一時停止しているかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.IsSlept">
            <summary>
            コルーチンが一時停止しているかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.Counter">
            <summary>
            コルーチンにおけるカウンタを取得する
            </summary>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.Continue">
            <summary>
            コルーチンを継続する条件を取得する
            </summary>
            <remarks>引数としては<see cref="P:fslib.Components.CoroutineInfo`2.Counter"/>が使用される。</remarks>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.Process">
            <summary>
            コルーチン時に実行される処理を取得または設定する
            </summary>
            <remarks>引数としては<see cref="P:fslib.Components.CoroutineInfo`2.Counter"/>とコルーチンコンポーネントのオーナーが使用される。</remarks>
            <exception cref="T:System.ArgumentNullException">設定する値がnull</exception>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.CountProcess">
            <summary>
            コルーチン実行時に行う<see cref="P:fslib.Components.CoroutineInfo`2.Counter"/>への処理
            </summary>
            <remarks>
            引数として<see cref="P:fslib.Components.CoroutineInfo`2.Counter"/>を使用し，返り値として処理後の値が返される。
            つまり<c><see cref="P:fslib.Components.CoroutineInfo`2.Counter"/> = <see cref="P:fslib.Components.CoroutineInfo`2.CountProcess"/>.Invoke(<see cref="P:fslib.Components.CoroutineInfo`2.Counter"/>)</c>が実行される、
            </remarks>
            <exception cref="T:System.ArgumentNullException">設定する値がnull</exception>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.OnStarted">
            <summary>
            コルーチンがスタートした直後に呼び出される実装を取得する
            </summary>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.AwakeTerms">
            <summary>
            sleep状態が解除される条件を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentNullException">設定する値がnull</exception>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.OnFinished">
            <summary>
            コルーチンの動作が終了した後に呼び出したときに一回だけ動作する実装を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentNullException">設定する値がnull</exception>
        </member>
        <member name="P:fslib.Components.CoroutineInfo`2.OnLooped">
            <summary>
            コルーチンの動作がループするときに一回だけ動作する実装を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentNullException">設定する値がnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineInfo`2.#ctor(System.String,System.Predicate{`0},System.Func{`0,`0},System.Action{`0,`1},`0,System.Func{`0,`1,`0})">
            <summary>
            コンストラクタ
            </summary>
            <exception cref="T:System.ArgumentNullException">引数のいずれかがnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineInfo`2.DoProcess">
            <summary>
            コルーチンの実行条件を満たしているかどうかを返す。
            </summary>
        </member>
        <member name="T:fslib.Components.CoroutineHelperLayer`1">
            <summary>
            コルーチン実行を補助する<see cref="T:asd.Layer2DComponent"/>クラス
            </summary>
            <typeparam name="TCounter">コルーチン実行用のカウンタ</typeparam>
        </member>
        <member name="F:fslib.Components.CoroutineHelperLayer`1.results">
            <summary>
            コルーチン実行時の結果(カウンタ)が返される<see cref="T:System.Collections.Generic.Dictionary`2"/>
            キーは<see cref="M:fslib.Components.CoroutineHelperLayer`1.StartCoroutine(System.String,System.Predicate{`0},System.Func{`0,`0},System.Action{`0,asd.Layer2D},`0,System.Func{`0,asd.Layer2D,`0})"/>にて設定されるキーと同じ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer`1.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer`1.ProcessCoroutine(System.String)">
            <summary>
            コルーチンを実行する
            </summary>
            <param name="key">実行するコルーチンのキー</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer`1.StartCoroutine(System.String,System.Predicate{`0},System.Func{`0,`0},System.Action{`0,asd.Layer2D},`0,System.Func{`0,asd.Layer2D,`0})">
            <summary>
            コルーチンをスタートする
            </summary>
            <param name="key">コルーチンのキー</param>
            <param name="goNext">コルーチンを続行する条件</param>
            <param name="count">コルーチンのカウンタ</param>
            <param name="process">コルーチンの実行内容</param>
            <param name="defaultValue">カウンタ変数の初期値</param>
            <param name="startUp">直後に実行される実装</param>
            <exception cref="T:System.ArgumentException">キーが既に存在する</exception>
            <exception cref="T:System.ArgumentNullException">引数のいずれかがnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer`1.PauseCoroutine(System.String)">
            <summary>
            コルーチンを停止する
            </summary>
            <param name="key">停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが既に停止中</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer`1.ResumeCoroutine(System.String)">
            <summary>
            <see cref="M:fslib.Components.CoroutineHelperLayer`1.PauseCoroutine(System.String)"/>で停止されたコルーチンを再開する
            </summary>
            <param name="key">再開するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが停止してない</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer`1.SleepCoroutine(System.String,System.Predicate{`0})">
            <summary>
            コルーチンを一時停止する
            </summary>
            <param name="key">一時停止するコルーチンのキー</param>
            <param name="awakeCondition">コルーチンが再開する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>又は<paramref name="awakeCondition"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが既に一時停止中</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer`1.RemoveCoroutine(System.String)">
            <summary>
            実行コルーチンを強制停止して削除する
            </summary>
            <param name="key">強制停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer`1.GetCoroutineInfo(System.String)">
            <summary>
            コルーチンの情報を返す。
            </summary>
            <param name="key">検索するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer`1.GetEnumerator(System.String)">
            <summary>
            コルーチンの結果コレクションを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="T:fslib.Components.CoroutineHelperLayer">
            <summary>
            コルーチン実行を補助する<see cref="T:asd.Layer2DComponent"/>クラス
            </summary>
        </member>
        <member name="F:fslib.Components.CoroutineHelperLayer.results">
            <summary>
            コルーチン実行時の結果(カウンタ)が返される<see cref="T:System.Collections.Generic.Dictionary`2"/>
            キーは<see cref="M:fslib.Components.CoroutineHelperLayer.StartCoroutine(System.String,System.Int32,System.Action{System.Int32,asd.Layer2D},System.Func{System.Int32,asd.Layer2D,System.Int32})"/>にて設定されるキーと同じ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer.ProcessCoroutine(System.String)">
            <summary>
            コルーチンを実行する
            </summary>
            <param name="key">実行するコルーチンのキー</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer.StartCoroutine(System.String,System.Int32,System.Action{System.Int32,asd.Layer2D},System.Func{System.Int32,asd.Layer2D,System.Int32})">
            <summary>
            コルーチンをスタートする
            </summary>
            <param name="key">コルーチンのキー</param>
            <param name="flames">コルーチンの実行回数</param>
            <param name="process">コルーチンの実行内容</param>
            <param name="startUp">直後に実行される実装</param>
            <exception cref="T:System.ArgumentException">キーが既に存在する</exception>
            <exception cref="T:System.ArgumentNullException">引数のいずれかがnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="flames"/>が0以下</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer.PauseCoroutine(System.String)">
            <summary>
            コルーチンを停止する
            </summary>
            <param name="key">停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが既に停止中</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer.ResumeCoroutine(System.String)">
            <summary>
            <see cref="M:fslib.Components.CoroutineHelperLayer.PauseCoroutine(System.String)"/>で停止されたコルーチンを再開する
            </summary>
            <param name="key">再開するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが停止してない</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer.SleepCoroutine(System.String,System.Int32)">
            <summary>
            コルーチンを一時停止する
            </summary>
            <param name="key">一時停止するコルーチンのキー</param>
            <param name="awakeflame">コルーチンが再起動するフレーム</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="awakeflame"/>が0以下</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer.RemoveCoroutine(System.String)">
            <summary>
            実行コルーチンを強制停止して削除する
            </summary>
            <param name="key">強制停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer.GetCoroutineInfo(System.String)">
            <summary>
            コルーチンの情報を返す。
            </summary>
            <param name="key">検索するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperLayer.GetEnumerator(System.String)">
            <summary>
            コルーチンの結果コレクションを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="T:fslib.Components.CoroutineHelperObject`1">
            <summary>
            コルーチン実行を補助する<see cref="T:asd.Object2DComponent"/>クラス
            </summary>
            <typeparam name="TCounter">コルーチン実行用のカウンタ</typeparam>
        </member>
        <member name="F:fslib.Components.CoroutineHelperObject`1.results">
            <summary>
            コルーチン実行時の結果(カウンタ)が返される<see cref="T:System.Collections.Generic.Dictionary`2"/>
            キーは<see cref="M:fslib.Components.CoroutineHelperObject`1.StartCoroutine(System.String,System.Predicate{`0},System.Func{`0,`0},System.Action{`0,asd.Object2D},`0,System.Func{`0,asd.Object2D,`0})"/>にて設定されるキーと同じ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject`1.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject`1.ProcessCoroutine(System.String)">
            <summary>
            コルーチンを実行する
            </summary>
            <param name="key">実行するコルーチンのキー</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject`1.StartCoroutine(System.String,System.Predicate{`0},System.Func{`0,`0},System.Action{`0,asd.Object2D},`0,System.Func{`0,asd.Object2D,`0})">
            <summary>
            コルーチンをスタートする
            </summary>
            <param name="key">コルーチンのキー</param>
            <param name="goNext">コルーチンを続行する条件</param>
            <param name="count">コルーチンのカウンタ</param>
            <param name="process">コルーチンの実行内容</param>
            <param name="defaultValue">カウンタ変数の初期値</param>
            <param name="startUp">直後に実行される実装</param>
            <exception cref="T:System.ArgumentException">キーが既に存在する</exception>
            <exception cref="T:System.ArgumentNullException">引数のいずれかがnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject`1.PauseCoroutine(System.String)">
            <summary>
            コルーチンを停止する
            </summary>
            <param name="key">停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが既に停止中</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject`1.ResumeCoroutine(System.String)">
            <summary>
            <see cref="M:fslib.Components.CoroutineHelperObject`1.PauseCoroutine(System.String)"/>で停止されたコルーチンを再開する
            </summary>
            <param name="key">再開するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが停止してない</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject`1.SleepCoroutine(System.String,System.Predicate{`0})">
            <summary>
            コルーチンを一時停止する
            </summary>
            <param name="key">一時停止するコルーチンのキー</param>
            <param name="awakeCondition">コルーチンが再開する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>又は<paramref name="awakeCondition"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが既に一時停止中</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject`1.RemoveCoroutine(System.String)">
            <summary>
            実行コルーチンを強制停止して削除する
            </summary>
            <param name="key">強制停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject`1.GetCoroutineInfo(System.String)">
            <summary>
            コルーチンの情報を返す。
            </summary>
            <param name="key">検索するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject`1.GetEnumerator(System.String)">
            <summary>
            コルーチンの結果コレクションを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="T:fslib.Components.CoroutineHelperObject">
            <summary>
            コルーチン実行を補助する<see cref="T:asd.Object2DComponent"/>クラス
            </summary>
        </member>
        <member name="F:fslib.Components.CoroutineHelperObject.results">
            <summary>
            コルーチン実行時の結果(カウンタ)が返される<see cref="T:System.Collections.Generic.Dictionary`2"/>
            キーは<see cref="M:fslib.Components.CoroutineHelperObject.StartCoroutine(System.String,System.Int32,System.Action{System.Int32,asd.Object2D},System.Func{System.Int32,asd.Object2D,System.Int32})"/>にて設定されるキーと同じ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject.ProcessCoroutine(System.String)">
            <summary>
            コルーチンを実行する
            </summary>
            <param name="key">実行するコルーチンのキー</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject.StartCoroutine(System.String,System.Int32,System.Action{System.Int32,asd.Object2D},System.Func{System.Int32,asd.Object2D,System.Int32})">
            <summary>
            コルーチンをスタートする
            </summary>
            <param name="key">コルーチンのキー</param>
            <param name="flames">コルーチンの実行回数</param>
            <param name="process">コルーチンの実行内容</param>
            <param name="startUp">直後に実行される実装</param>
            <exception cref="T:System.ArgumentException">キーが既に存在する</exception>
            <exception cref="T:System.ArgumentNullException">引数のいずれかがnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="flames"/>が0以下</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject.PauseCoroutine(System.String)">
            <summary>
            コルーチンを停止する
            </summary>
            <param name="key">停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが既に停止中</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject.ResumeCoroutine(System.String)">
            <summary>
            <see cref="M:fslib.Components.CoroutineHelperObject.PauseCoroutine(System.String)"/>で停止されたコルーチンを再開する
            </summary>
            <param name="key">再開するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが停止してない</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject.SleepCoroutine(System.String,System.Int32)">
            <summary>
            コルーチンを一時停止する
            </summary>
            <param name="key">一時停止するコルーチンのキー</param>
            <param name="awakeflame">コルーチンが何フレーム後に再起動するか</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="awakeflame"/>が0以下</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject.RemoveCoroutine(System.String)">
            <summary>
            実行コルーチンを強制停止して削除する
            </summary>
            <param name="key">強制停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject.GetCoroutineInfo(System.String)">
            <summary>
            コルーチンの情報を返す。
            </summary>
            <param name="key">検索するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperObject.GetEnumerator(System.String)">
            <summary>
            コルーチンの結果コレクションを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="T:fslib.Components.CoroutineHelperScene`1">
            <summary>
            コルーチン実行を補助する<see cref="T:asd.SceneComponent"/>クラス
            </summary>
            <typeparam name="TCounter">コルーチン実行用のカウンタ</typeparam>
        </member>
        <member name="F:fslib.Components.CoroutineHelperScene`1.results">
            <summary>
            コルーチン実行時の結果(カウンタ)が返される<see cref="T:System.Collections.Generic.Dictionary`2"/>
            キーは<see cref="M:fslib.Components.CoroutineHelperScene`1.StartCoroutine(System.String,System.Predicate{`0},System.Func{`0,`0},System.Action{`0,asd.Scene},`0,System.Func{`0,asd.Scene,`0})"/>にて設定されるキーと同じ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene`1.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene`1.ProcessCoroutine(System.String)">
            <summary>
            コルーチンを実行する
            </summary>
            <param name="key">実行するコルーチンのキー</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene`1.StartCoroutine(System.String,System.Predicate{`0},System.Func{`0,`0},System.Action{`0,asd.Scene},`0,System.Func{`0,asd.Scene,`0})">
            <summary>
            コルーチンをスタートする
            </summary>
            <param name="key">コルーチンのキー</param>
            <param name="goNext">コルーチンを続行する条件</param>
            <param name="count">コルーチンのカウンタ</param>
            <param name="process">コルーチンの実行内容</param>
            <param name="defaultValue">カウンタ変数の初期値</param>
            <param name="startUp">直後に実行される実装</param>
            <exception cref="T:System.ArgumentException">キーが既に存在する</exception>
            <exception cref="T:System.ArgumentNullException">引数のいずれかがnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene`1.PauseCoroutine(System.String)">
            <summary>
            コルーチンを停止する
            </summary>
            <param name="key">停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが既に停止中</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene`1.ResumeCoroutine(System.String)">
            <summary>
            <see cref="M:fslib.Components.CoroutineHelperScene`1.PauseCoroutine(System.String)"/>で停止されたコルーチンを再開する
            </summary>
            <param name="key">再開するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが停止してない</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene`1.SleepCoroutine(System.String,System.Predicate{`0})">
            <summary>
            コルーチンを一時停止する
            </summary>
            <param name="key">一時停止するコルーチンのキー</param>
            <param name="awakeCondition">コルーチンが再開する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>又は<paramref name="awakeCondition"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが既に一時停止中</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene`1.RemoveCoroutine(System.String)">
            <summary>
            実行コルーチンを強制停止して削除する
            </summary>
            <param name="key">強制停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene`1.GetCoroutineInfo(System.String)">
            <summary>
            コルーチンの情報を返す。
            </summary>
            <param name="key">検索するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene`1.GetEnumerator(System.String)">
            <summary>
            コルーチンの結果コレクションを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="T:fslib.Components.CoroutineHelperScene">
            <summary>
            コルーチン実行を補助する<see cref="T:asd.SceneComponent"/>クラス
            </summary>
        </member>
        <member name="F:fslib.Components.CoroutineHelperScene.results">
            <summary>
            コルーチン実行時の結果(カウンタ)が返される<see cref="T:System.Collections.Generic.Dictionary`2"/>
            キーは<see cref="M:fslib.Components.CoroutineHelperScene.StartCoroutine(System.String,System.Int32,System.Action{System.Int32,asd.Scene},System.Func{System.Int32,asd.Scene,System.Int32})"/>にて設定されるキーと同じ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene.ProcessCoroutine(System.String)">
            <summary>
            コルーチンを実行する
            </summary>
            <param name="key">実行するコルーチンのキー</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene.StartCoroutine(System.String,System.Int32,System.Action{System.Int32,asd.Scene},System.Func{System.Int32,asd.Scene,System.Int32})">
            <summary>
            コルーチンをスタートする
            </summary>
            <param name="key">コルーチンのキー</param>
            <param name="flames">コルーチンの実行回数</param>
            <param name="process">コルーチンの実行内容</param>
            <param name="startUp">直後に実行される実装</param>
            <exception cref="T:System.ArgumentException">キーが既に存在する</exception>
            <exception cref="T:System.ArgumentNullException">引数のいずれかがnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="flames"/>が0以下</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene.PauseCoroutine(System.String)">
            <summary>
            コルーチンを停止する
            </summary>
            <param name="key">停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが既に停止中</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene.ResumeCoroutine(System.String)">
            <summary>
            <see cref="M:fslib.Components.CoroutineHelperScene.PauseCoroutine(System.String)"/>で停止されたコルーチンを再開する
            </summary>
            <param name="key">再開するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが停止してない</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene.SleepCoroutine(System.String,System.Int32)">
            <summary>
            コルーチンを一時停止する
            </summary>
            <param name="key">一時停止するコルーチンのキー</param>
            <param name="awakeflame">コルーチンを再開するフレーム</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="awakeflame"/>が0以下</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene.RemoveCoroutine(System.String)">
            <summary>
            実行コルーチンを強制停止して削除する
            </summary>
            <param name="key">強制停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene.GetCoroutineInfo(System.String)">
            <summary>
            コルーチンの情報を返す。
            </summary>
            <param name="key">検索するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.CoroutineHelperScene.GetEnumerator(System.String)">
            <summary>
            コルーチンの結果コレクションを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="T:fslib.Components.ICoroutineHelper`2">
            <summary>
            コルーチン補助実装を表すインターフェイス
            </summary>
            <typeparam name="TCounter">コルーチンを行うカウンターのジェネリック</typeparam>
            <typeparam name="TOwner">コルーチンを実行するオーナーのジェネリック</typeparam>
        </member>
        <member name="P:fslib.Components.ICoroutineHelper`2.Results">
            <summary>
            コルーチン実行時の結果(カウンタ)が返される<see cref="T:System.Collections.Generic.Dictionary`2"/>
            キーは<see cref="M:fslib.Components.ICoroutineHelper`2.StartCoroutine(System.String,System.Predicate{`0},System.Func{`0,`0},System.Action{`0,`1},`0,System.Func{`0,`1,`0})"/>にて設定されるキーと同じ
            </summary>
        </member>
        <member name="P:fslib.Components.ICoroutineHelper`2.Infomations">
            <summary>
            コルーチンを行うためのキーとその情報を格納する<see cref="T:System.Collections.Generic.Dictionary`2"/>を取得する
            </summary>
        </member>
        <member name="P:fslib.Components.ICoroutineHelper`2.Owner">
            <summary>
            コルーチンが実行されるオブジェクト
            </summary>
        </member>
        <member name="M:fslib.Components.ICoroutineHelper`2.StartCoroutine(System.String,System.Predicate{`0},System.Func{`0,`0},System.Action{`0,`1},`0,System.Func{`0,`1,`0})">
            <summary>
            コルーチンをスタートする
            </summary>
            <param name="key">コルーチンのキー</param>
            <param name="goNext">コルーチンを続行する条件</param>
            <param name="count">コルーチンのカウンタ</param>
            <param name="process">コルーチンの実行内容</param>
            <param name="defaultValue">カウンタ変数の初期値</param>
            <param name="startUp">直後に実行される実装。</param>
            <exception cref="T:System.ArgumentException">キーが既に存在する</exception>
            <exception cref="T:System.ArgumentNullException">引数のいずれかがnull</exception>
        </member>
        <member name="M:fslib.Components.ICoroutineHelper`2.ProcessCoroutine(System.String)">
            <summary>
            コルーチンを実行する
            </summary>
            <param name="key">実行するコルーチンのキー</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:fslib.Components.ICoroutineHelper`2.PauseCoroutine(System.String)">
            <summary>
            コルーチンを停止する
            </summary>
            <param name="key">停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが既に停止中</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.ICoroutineHelper`2.ResumeCoroutine(System.String)">
            <summary>
            <see cref="M:fslib.Components.ICoroutineHelper`2.PauseCoroutine(System.String)"/>で停止されたコルーチンを再開する
            </summary>
            <param name="key">再開するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">指定したコルーチンが停止してない</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.ICoroutineHelper`2.SleepCoroutine(System.String,System.Predicate{`0})">
            <summary>
            コルーチンを一時停止する
            </summary>
            <param name="key">一時停止するコルーチンのキー</param>
            <param name="awakeCondition">コルーチンが再開する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>又は<paramref name="awakeCondition"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.ICoroutineHelper`2.RemoveCoroutine(System.String)">
            <summary>
            実行コルーチンを強制停止して削除する
            </summary>
            <param name="key">強制停止するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.ICoroutineHelper`2.GetCoroutineInfo(System.String)">
            <summary>
            コルーチンの情報を返す。
            </summary>
            <param name="key">検索するコルーチンのキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="M:fslib.Components.ICoroutineHelper`2.GetEnumerator(System.String)">
            <summary>
            コルーチンの結果コレクションを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="T:fslib.Components.ICoroutineHelper`1">
            <summary>
            数値カウンタで制御するコルーチン補助実装を表すインターフェイス
            </summary>
            <typeparam name="TOwner">コルーチンを実行するオーナーのジェネリック</typeparam>
        </member>
        <member name="M:fslib.Components.ICoroutineHelper`1.StartCoroutine(System.String,System.Int32,System.Action{System.Int32,`0},System.Func{System.Int32,`0,System.Int32})">
            <summary>
            コルーチンをスタートする
            </summary>
            <param name="key">コルーチンのキー</param>
            <param name="flames">コルーチンの実行回数</param>
            <param name="process">コルーチンの実行内容</param>
            <param name="startUp">直後に実行される実装</param>
            <exception cref="T:System.ArgumentException">キーが既に存在する</exception>
            <exception cref="T:System.ArgumentNullException">引数のいずれかがnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="flames"/>が0以下</exception>
        </member>
        <member name="M:fslib.Components.ICoroutineHelper`1.SleepCoroutine(System.String,System.Int32)">
            <summary>
            コルーチンを一時停止する
            </summary>
            <param name="key">一時停止するコルーチンのキー</param>
            <param name="awakeflame">コルーチンを再開するフレーム</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="awakeflame"/>が0以下</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーが存在しない</exception>
        </member>
        <member name="T:fslib.DividePicture">
            <summary>
            テクスチャを分割して一律で流す。
            </summary>
        </member>
        <member name="P:fslib.DividePicture.IsLoopingMode">
            <summary>
            ループするかどうか
            </summary>
        </member>
        <member name="P:fslib.DividePicture.Interval">
            <summary>
            画像を変更する間隔(フレーム)
            </summary>
        </member>
        <member name="P:fslib.DividePicture.DivideAmount">
            <summary>
            縦横に何枚ずつに分けるか
            </summary>
        </member>
        <member name="P:fslib.DividePicture.Size">
            <summary>
            一枚当たりの大きさ
            </summary>
        </member>
        <member name="M:fslib.DividePicture.#ctor(asd.Vector2DF,asd.Texture2D,asd.Vector2DI,System.UInt32,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">座標</param>
            <param name="texture">テクスチャ</param>
            <param name="amount">縦横それぞれに分割する個数</param>
            <param name="interval">画像を切り替えるフレーム</param>
            <param name="loop">ループするかどうか</param>
        </member>
        <member name="T:fslib.DrawAdditionalType">
            <summary>
            追加描画の種類を表す列挙体
            </summary>
        </member>
        <member name="F:fslib.DrawAdditionalType.Arc">
            <summary>
            円弧
            </summary>
        </member>
        <member name="F:fslib.DrawAdditionalType.Circle">
            <summary>
            円
            </summary>
        </member>
        <member name="F:fslib.DrawAdditionalType.Line">
            <summary>
            直線
            </summary>
        </member>
        <member name="F:fslib.DrawAdditionalType.Rectangle">
            <summary>
            長方形
            </summary>
        </member>
        <member name="F:fslib.DrawAdditionalType.RotatedRectangle">
            <summary>
            回転可能な長方形
            </summary>
        </member>
        <member name="F:fslib.DrawAdditionalType.Shape">
            <summary>
            図形
            </summary>
        </member>
        <member name="F:fslib.DrawAdditionalType.Sprite">
            <summary>
            画像
            </summary>
        </member>
        <member name="F:fslib.DrawAdditionalType.SpriteWithMaterial">
            <summary>
            マテリアルを用いて画像を描画
            </summary>
        </member>
        <member name="F:fslib.DrawAdditionalType.Text">
            <summary>
            テキスト
            </summary>
        </member>
        <member name="F:fslib.DrawAdditionalType.Triangle">
            <summary>
            三角形
            </summary>
        </member>
        <member name="T:fslib.DrawAdditionalBase">
            <summary>
            追加描画を扱うクラスの基底
            </summary>
        </member>
        <member name="P:fslib.DrawAdditionalBase.AlphaBlend">
            <summary>
            アルファブレンドの方法を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.DrawAdditionalBase.DrawingPriority">
            <summary>
            描画優先度を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.DrawAdditionalBase.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.DrawAdditionalBase.Layer">
            <summary>
            登録されているレイヤーを取得する
            </summary>
        </member>
        <member name="M:fslib.DrawAdditionalBase.Draw">
            <summary>
            登録されているレイヤーにて描画を実行する
            </summary>
            <exception cref="T:System.InvalidOperationException">登録されているレイヤーが破棄されているまたはnull</exception>
        </member>
        <member name="M:fslib.DrawAdditionalBase.DrawOtherLayer(asd.Layer2D)">
            <summary>
            指定したレイヤーで描画を実行する
            </summary>
            <param name="layer">描画先のレイヤー</param>
            <exception cref="T:System.ArgumentException"><paramref name="layer"/>が破棄されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="layer"/>がnull</exception>
        </member>
        <member name="T:fslib.AdditionalArc">
            <summary>
            円弧の追加描画クラス
            </summary>
        </member>
        <member name="P:fslib.AdditionalArc.Angle">
            <summary>
            回転角度を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalArc.Center">
            <summary>
            中心座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalArc.Color">
            <summary>
            色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalArc.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.AdditionalArc.EndingVerticalNum">
            <summary>
            描画を終了する頂点の番号を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalArc.InnerDiameter">
            <summary>
            内側の半径を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が0未満</exception>
        </member>
        <member name="P:fslib.AdditionalArc.OuterDiameter">
            <summary>
            外側の半径を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が0未満</exception>
        </member>
        <member name="P:fslib.AdditionalArc.StartingVerticalNum">
            <summary>
            描画を開始する頂点の番号を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalArc.Texture">
            <summary>
            使用するテクスチャを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalArc.VertNum">
            <summary>
            頂点の数を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が3未満</exception>
        </member>
        <member name="M:fslib.AdditionalArc.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.AdditionalArc.#ctor(asd.Vector2DF,System.Single,System.Single,asd.Color,System.Int32,System.Int32,System.Int32,System.Single,asd.Texture2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="center">中心座標</param>
            <param name="outerDiameter">外側の半径</param>
            <param name="innerDiameter">内側の半径</param>
            <param name="color">色</param>
            <param name="vertNum">頂点の数</param>
            <param name="startingVerticalAngle">描画を開始する頂点の番号</param>
            <param name="endingVerticalAngle">描画を終了する頂点の番号</param>
            <param name="angle">回転角度</param>
            <param name="texture">使用するテクスチャ</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="innerDiameter"/>または<paramref name="outerDiameter"/>が0未満若しくは<paramref name="vertNum"/>が3未満</exception>
        </member>
        <member name="T:fslib.AdditionalCircle">
            <summary>
            円の追加描画クラス
            </summary>
        </member>
        <member name="P:fslib.AdditionalCircle.Angle">
            <summary>
            回転角度を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalCircle.Center">
            <summary>
            中心座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalCircle.Color">
            <summary>
            色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalCircle.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.AdditionalCircle.InnerDiameter">
            <summary>
            内側の半径を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が0未満</exception>
        </member>
        <member name="P:fslib.AdditionalCircle.OuterDiameter">
            <summary>
            外側の半径を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が0未満</exception>
        </member>
        <member name="P:fslib.AdditionalCircle.Texture">
            <summary>
            使用するテクスチャを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalCircle.VertNum">
            <summary>
            頂点の数を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が3未満</exception>
        </member>
        <member name="M:fslib.AdditionalCircle.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.AdditionalCircle.#ctor(asd.Vector2DF,System.Single,System.Single,asd.Color,System.Int32,System.Single,asd.Texture2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="center">中心座標</param>
            <param name="outerDiameter">外側の半径</param>
            <param name="innerDiameter">内側の半径</param>
            <param name="color">色</param>
            <param name="vertNum">頂点の数</param>
            <param name="angle">回転角度</param>
            <param name="texture">使用するテクスチャ</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="innerDiameter"/>または<paramref name="outerDiameter"/>が0未満若しくは<paramref name="vertNum"/>が3未満</exception>
        </member>
        <member name="T:fslib.AdditionalLine">
            <summary>
            直線の追加描画クラス
            </summary>
        </member>
        <member name="P:fslib.AdditionalLine.Color">
            <summary>
            色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalLine.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.AdditionalLine.Point1">
            <summary>
            直線の端点1の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalLine.Point2">
            <summary>
            直線の端点2の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalLine.ThickNess">
            <summary>
            直線の太さを取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が0未満</exception>
        </member>
        <member name="M:fslib.AdditionalLine.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.AdditionalLine.#ctor(asd.Vector2DF,asd.Vector2DF,System.Single,asd.Color,asd.AlphaBlendMode,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="point1">端点1の座標</param>
            <param name="point2">端点2の座標</param>
            <param name="thickness">直線の太さ</param>
            <param name="color">色</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="thickness"/>が0未満</exception>
        </member>
        <member name="T:fslib.AdditionalRectangle">
            <summary>
            長方形の追加描画クラス
            </summary>
        </member>
        <member name="P:fslib.AdditionalRectangle.Color">
            <summary>
            色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalRectangle.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.AdditionalRectangle.DrawingArea">
            <summary>
            描画範囲を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalRectangle.Texture">
            <summary>
            使用するテクスチャを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalRectangle.UV">
            <summary>
            UV値を取得または設定する
            </summary>
        </member>
        <member name="M:fslib.AdditionalRectangle.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.AdditionalRectangle.#ctor(asd.RectF,asd.Color,asd.RectF,asd.Texture2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="drawingArea">描画範囲</param>
            <param name="color">色</param>
            <param name="uv">UV値</param>
            <param name="texture">使用するテクスチャ</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
        </member>
        <member name="T:fslib.AdditionalRotatedRectangle">
            <summary>
            回転可能な長方形の追加描画クラス
            </summary>
        </member>
        <member name="P:fslib.AdditionalRotatedRectangle.Angle">
            <summary>
            回転角度を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalRotatedRectangle.Color">
            <summary>
            色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalRotatedRectangle.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.AdditionalRotatedRectangle.DrawingArea">
            <summary>
            描画範囲を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalRotatedRectangle.RotationCenter">
            <summary>
            回転の中心を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalRotatedRectangle.Texture">
            <summary>
            使用するテクスチャを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalRotatedRectangle.UV">
            <summary>
            UV値を取得または設定する
            </summary>
        </member>
        <member name="M:fslib.AdditionalRotatedRectangle.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.AdditionalRotatedRectangle.#ctor(asd.RectF,asd.Color,asd.Vector2DF,System.Single,asd.RectF,asd.Texture2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="drawingArea">描画範囲</param>
            <param name="color">色</param>
            <param name="rotationCenter">回転の中心の座標</param>
            <param name="angle">回転角度</param>
            <param name="uv">UV値</param>
            <param name="texture">使用するテクスチャ</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
        </member>
        <member name="T:fslib.AdditionalShape">
            <summary>
            図形の追加描画クラス
            </summary>
        </member>
        <member name="P:fslib.AdditionalShape.Color">
            <summary>
            色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalShape.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.AdditionalShape.Shape">
            <summary>
            描画する図形を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentNullException">設定しようとした値がnull</exception>
        </member>
        <member name="P:fslib.AdditionalShape.Texture">
            <summary>
            使用するテクスチャを取得または設定する
            </summary>
        </member>
        <member name="M:fslib.AdditionalShape.#ctor(asd.Shape,asd.Color,asd.Texture2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="shape">描画する図形</param>
            <param name="color">色</param>
            <param name="texture">使用するテクスチャ</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shape"/>がnull</exception>
        </member>
        <member name="T:fslib.AdditionalSprite">
            <summary>
            画像の追加描画クラス
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.LowerLeftCol">
            <summary>
            左下の色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.LowerRightCol">
            <summary>
            右下の色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.LowerLeftPos">
            <summary>
            左下の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.LowerRightPos">
            <summary>
            右下の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.LowerLeftUV">
            <summary>
            左下のUV値を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.LowerRightUV">
            <summary>
            右下のUV値を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.Texture">
            <summary>
            使用するテクスチャを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.UpperLeftCol">
            <summary>
            左上の色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.UpperRightCol">
            <summary>
            右上の色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.UpperLeftPos">
            <summary>
            左上の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.UpperRightPos">
            <summary>
            右上の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.UpperLeftUV">
            <summary>
            左上のUV値を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSprite.UpperRightUV">
            <summary>
            右上のUV値を取得または設定する
            </summary>
        </member>
        <member name="M:fslib.AdditionalSprite.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.AdditionalSprite.#ctor(asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Color,asd.Color,asd.Color,asd.Color,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Texture2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="upperLeftPos">左上の座標</param>
            <param name="upperRightPos">右上の座標</param>
            <param name="lowerRightPos">右下の座標</param>
            <param name="lowerLeftPos">左下の座標</param>
            <param name="upperLeftCol">左上の色</param>
            <param name="upperRightCol">右上の色</param>
            <param name="lowerRightCol">右下の色</param>
            <param name="lowerLeftCol">左下の色</param>
            <param name="upperLeftUV">左上のUV値</param>
            <param name="upperRightUV">右上のUV値</param>
            <param name="lowerRightUV">右下のUV値</param>
            <param name="lowerLeftUV">左下のUV値</param>
            <param name="texture">使用するテクスチャ</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
        </member>
        <member name="T:fslib.AdditionalSpriteWithMaterial">
            <summary>
            マテリアルを用いた画像の追加描画クラス
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.LowerLeftCol">
            <summary>
            左下の色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.LowerRightCol">
            <summary>
            右下の色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.LowerLeftPos">
            <summary>
            左下の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.LowerRightPos">
            <summary>
            右下の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.LowerLeftUV">
            <summary>
            左下のUV値を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.LowerRightUV">
            <summary>
            右下のUV値を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.Material">
            <summary>
            使用するマテリアルを取得または設定する
            </summary>
            <exception cref="T:System.ArgumentNullException">設定しようとした値がnul</exception>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.UpperLeftCol">
            <summary>
            左上の色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.UpperRightCol">
            <summary>
            右上の色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.UpperLeftPos">
            <summary>
            左上の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.UpperRightPos">
            <summary>
            右上の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.UpperLeftUV">
            <summary>
            左上のUV値を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalSpriteWithMaterial.UpperRightUV">
            <summary>
            右上のUV値を取得または設定する
            </summary>
        </member>
        <member name="M:fslib.AdditionalSpriteWithMaterial.#ctor(asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Color,asd.Color,asd.Color,asd.Color,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Material2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="upperLeftPos">左上の座標</param>
            <param name="upperRightPos">右上の座標</param>
            <param name="lowerRightPos">右下の座標</param>
            <param name="lowerLeftPos">左下の座標</param>
            <param name="upperLeftCol">左上の色</param>
            <param name="upperRightCol">右上の色</param>
            <param name="lowerRightCol">右下の色</param>
            <param name="lowerLeftCol">左下の色</param>
            <param name="upperLeftUV">左上のUV値</param>
            <param name="upperRightUV">右上のUV値</param>
            <param name="lowerRightUV">右下のUV値</param>
            <param name="lowerLeftUV">左下のUV値</param>
            <param name="material">使用するマテリアル</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="material"/>がnull</exception>
        </member>
        <member name="T:fslib.AdditionalText">
            <summary>
            テキストの追加描画クラス
            </summary>
        </member>
        <member name="P:fslib.AdditionalText.Color">
            <summary>
            色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalText.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.AdditionalText.Font">
            <summary>
            使用するフォントを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalText.Pos">
            <summary>
            座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalText.Text">
            <summary>
            表示する文字列を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentNullException">設定しようとした値がnull</exception>
        </member>
        <member name="P:fslib.AdditionalText.WritingDirection">
            <summary>
            文字列の方向を取得または設定する
            </summary>
        </member>
        <member name="M:fslib.AdditionalText.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.AdditionalText.#ctor(asd.Vector2DF,asd.Color,asd.Font,System.String,asd.WritingDirection,asd.AlphaBlendMode,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="pos">座標</param>
            <param name="color">色</param>
            <param name="font">フォント</param>
            <param name="text">テキスト</param>
            <param name="writingDirection">文字列の方向</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/>がnull</exception>
        </member>
        <member name="T:fslib.AdditionalTriangle">
            <summary>
            三角形の追加描画クラス
            </summary>
        </member>
        <member name="P:fslib.AdditionalTriangle.Color">
            <summary>
            色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalTriangle.DrawType">
            <summary>
            描画のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.AdditionalTriangle.Position1">
            <summary>
            頂点1の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalTriangle.Position2">
            <summary>
            頂点2の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalTriangle.Position3">
            <summary>
            頂点3の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalTriangle.UV1">
            <summary>
            頂点1のUV値を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalTriangle.UV2">
            <summary>
            頂点2のUV値を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalTriangle.UV3">
            <summary>
            頂点3のUV値を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.AdditionalTriangle.Texture">
            <summary>
            使用するテクスチャを取得または設定する
            </summary>
        </member>
        <member name="M:fslib.AdditionalTriangle.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.AdditionalTriangle.#ctor(asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Color,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Texture2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position1">頂点1の座標</param>
            <param name="position2">頂点2の座標</param>
            <param name="position3">頂点3の座標</param>
            <param name="color">色</param>
            <param name="uv1">頂点1のUV</param>
            <param name="uv2">頂点2のUV</param>
            <param name="uv3">頂点3のUV</param>
            <param name="texture">使用するテクスチャ</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
        </member>
        <member name="T:fslib.EncodingType">
            <summary>
            エンコードの方法
            </summary>
        </member>
        <member name="F:fslib.EncodingType.Default">
            <summary>
            既定のエンコードタイプ
            安定しない可能性あり
            </summary>
        </member>
        <member name="F:fslib.EncodingType.ASCII">
            <summary>
            ASCII
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF7">
            <summary>
            UTF7
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF8">
            <summary>
            UTF8のBOM無し
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF8WithBOM">
            <summary>
            UTF8のBOM付き
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF16LE">
            <summary>
            UTF16のリトルエンディアンBOM無し
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF16LEWithBOM">
            <summary>
            UTF16のリトルエンディアンBOM付き
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF16BE">
            <summary>
            UTF16のビッグエンディアンBOM無し
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF16BEWithBOM">
            <summary>
            UTF16のビッグエンディアンBOM付き
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF32LE">
            <summary>
            UTF32のリトルエンディアンBOM無し
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF32LEWithBOM">
            <summary>
            UTF32のリトルエンディアンBOM付き
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF32BE">
            <summary>
            UTF32のビッグエンディアンBOM無し
            </summary>
        </member>
        <member name="F:fslib.EncodingType.UTF32BEWithBOM">
            <summary>
            UTF32のビッグエンディアンBOM付き
            </summary>
        </member>
        <member name="T:fslib.EncodeOption">
            <summary>
            文字エンコードのオプションのクラス。
            </summary>
        </member>
        <member name="P:fslib.EncodeOption.Default">
            <summary>
            <see cref="F:fslib.EncodingType.UTF8"/>による<see cref="T:fslib.EncodeOption"/>を取得する。
            </summary>
        </member>
        <member name="P:fslib.EncodeOption.Encoding">
            <summary>
            エンコードクラスを取得する。
            </summary>
        </member>
        <member name="P:fslib.EncodeOption.Decoder">
            <summary>
            バイトシーケンスを文字に変換するデコーダーを取得する
            </summary>
        </member>
        <member name="P:fslib.EncodeOption.Encoder">
            <summary>
            文字のエンコーダーを取得する
            </summary>
        </member>
        <member name="M:fslib.EncodeOption.#ctor">
            <summary>
            コンストラクタ
            <see cref="F:fslib.EncodingType.Default"/>として実行
            </summary>
        </member>
        <member name="M:fslib.EncodeOption.#ctor(System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="name">指定するエンコードの名前</param>
            <exception cref="T:System.ArgumentException">指定したエンコード名が見つからなかった</exception>
        </member>
        <member name="M:fslib.EncodeOption.#ctor(fslib.EncodingType)">
            <summary>
            コンストラクタ
            </summary>
            <param name="type">エンコードのタイプ</param>
        </member>
        <member name="M:fslib.EncodeOption.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化したデータで<see cref="T:fslib.EncodeOption"/>のインスタンスを生成する。
            </summary>
            <param name="info"><see cref="T:fslib.EncodeOption"/>をシリアル化するために必要な情報を格納している<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context"><see cref="T:fslib.EncodeOption"/>に関連付けられているシリアル化ストリームの送信元及び送信先を格納している<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.EncodeOption.Clone">
            <summary>
            このインスタンスのコピーである新しいオブジェクトを生成する。
            </summary>
        </member>
        <member name="M:fslib.EncodeOption.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="T:fslib.EncodeOption"/>をシリアル化するため必要なデータを返す<see cref="T:System.Runtime.Serialization.ISerializable"/>の実装。
            </summary>
            <param name="info"><see cref="T:fslib.EncodeOption"/>の情報を格納するための<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context"><see cref="T:fslib.EncodeOption"/>に関連付けられているシリアル化ストリームの転送元及び転送先を格納する<see cref="T:System.Runtime.Serialization.StreamingContext"/>構造体</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.EnumHelper">
            <summary>
            列挙体の処理を補助するクラス
            </summary>
        </member>
        <member name="M:fslib.EnumHelper.Count``1">
            <summary>
            指定された列挙体のうち定義されているものの個数を取得する
            </summary>
            <typeparam name="TEnum">要素数を取得する列挙体の型</typeparam>
            <returns><typeparamref name="TEnum"/>で定義されている値の個数</returns>
        </member>
        <member name="M:fslib.EnumHelper.FromNumber``1(System.SByte)">
            <summary>
            数値から列挙体に変換する
            </summary>
            <typeparam name="TEnum">変換先の列挙体</typeparam>
            <param name="value">変換元の数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib.EnumHelper.FromNumber``1(System.Byte)">
            <summary>
            数値から列挙体に変換する
            </summary>
            <typeparam name="TEnum">変換先の列挙体</typeparam>
            <param name="value">変換元の数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib.EnumHelper.FromNumber``1(System.Int16)">
            <summary>
            数値から列挙体に変換する
            </summary>
            <typeparam name="TEnum">変換先の列挙体</typeparam>
            <param name="value">変換元の数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib.EnumHelper.FromNumber``1(System.UInt16)">
            <summary>
            数値から列挙体に変換する
            </summary>
            <typeparam name="TEnum">変換先の列挙体</typeparam>
            <param name="value">変換元の数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib.EnumHelper.FromNumber``1(System.Int32)">
            <summary>
            数値から列挙体に変換する
            </summary>
            <typeparam name="TEnum">変換先の列挙体</typeparam>
            <param name="value">変換元の数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib.EnumHelper.FromNumber``1(System.UInt32)">
            <summary>
            数値から列挙体に変換する
            </summary>
            <typeparam name="TEnum">変換先の列挙体</typeparam>
            <param name="value">変換元の数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib.EnumHelper.FromNumber``1(System.Int64)">
            <summary>
            数値から列挙体に変換する
            </summary>
            <typeparam name="TEnum">変換先の列挙体</typeparam>
            <param name="value">変換元の数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib.EnumHelper.FromNumber``1(System.UInt64)">
            <summary>
            数値から列挙体に変換する
            </summary>
            <typeparam name="TEnum">変換先の列挙体</typeparam>
            <param name="value">変換元の数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib.EnumHelper.FromString``1(System.String)">
            <summary>
            文字列から列挙体に変換する
            </summary>
            <typeparam name="TEnum">変換先の列挙体</typeparam>
            <param name="value">変換する文字列</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/>が空白文字からなる又は<typeparamref name="TEnum"/>で定義されている文字列ではない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>がnull</exception>
            <exception cref="T:System.OverflowException"><paramref name="value"/>が<typeparamref name="TEnum"/>の範囲外を示す</exception>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib.EnumHelper.GetName``1(System.Object)">
            <summary>
            指定した値を持つ<typeparamref name="TEnum"/>の文字列を返す
            </summary>
            <typeparam name="TEnum">文字列を獲得したい列挙体の型</typeparam>
            <param name="value"><typeparamref name="TEnum"/>に変換したい値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>がnull</exception>
            <returns><paramref name="value"/>を持つ<typeparamref name="TEnum"/>の文字列</returns>
        </member>
        <member name="M:fslib.EnumHelper.GetNames``1">
            <summary>
            列挙体の文字列を全て取得する
            </summary>
            <typeparam name="TEnum">文字列を得る列挙体の種類</typeparam>
            <returns><typeparamref name="TEnum"/>で定義された全ての文字列</returns>
        </member>
        <member name="M:fslib.EnumHelper.GetUnderlyingType``1">
            <summary>
            指定した列挙体の型が持つ値のタイプを返す
            </summary>
            <typeparam name="TEnum">値のタイプを調べたい列挙体の型</typeparam>
            <returns>指定した列挙体の型が持つ値のタイプ</returns>
        </member>
        <member name="M:fslib.EnumHelper.GetValues``1">
            <summary>
            列挙体の値をすべて取得する
            </summary>
            <typeparam name="TEnum">値を取得する列挙体の値</typeparam>
            <returns><typeparamref name="TEnum"/>で定義されたすべての要素</returns>
        </member>
        <member name="M:fslib.EnumHelper.HaveFlagAttribute``1">
            <summary>
            指定した列挙体の型が<see cref="T:System.FlagsAttribute"/>を持つかどうかを返す
            </summary>
            <typeparam name="TEnum"><see cref="T:System.FlagsAttribute"/>の存在を調査する列挙体の型</typeparam>
            <returns><see cref="T:System.FlagsAttribute"/>を持っていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EnumHelper.Max``1">
            <summary>
            指定した列挙体の中で定義されているもののうち割り当てられた値が最大の物を返す
            </summary>
            <typeparam name="TEnum">最大値を検索する列挙体の型</typeparam>
            <returns><typeparamref name="TEnum"/>で定義されている値のうち最大値を持つ者のインスタンス</returns>
        </member>
        <member name="M:fslib.EnumHelper.Max``1(``0[])">
            <summary>
            指定した列挙体の配列内の値のうち割り当てられた値が最大の物を返す
            </summary>
            <typeparam name="TEnum">処理する列挙体の型</typeparam>
            <param name="array">最大値を検索する<typeparamref name="TEnum"/>の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>の容量が0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <returns><paramref name="array"/>内の列挙体の値のうち最大値を持つもの</returns>
        </member>
        <member name="M:fslib.EnumHelper.Max``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            指定した列挙体のコレクション内の値のうち割り当てられた値が最大の物を返す
            </summary>
            <typeparam name="TEnum">処理する列挙体の型</typeparam>
            <param name="collection">最大値を検索する<typeparamref name="TEnum"/>の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/>の容量が0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
            <returns><paramref name="collection"/>内の列挙体の値のうち最大値を持つもの</returns>
        </member>
        <member name="M:fslib.EnumHelper.Min``1">
            <summary>
            指定した列挙体の中で定義されているもののうち割り当てられた値が最小の物を返す
            </summary>
            <typeparam name="TEnum">最小値を検索する列挙体の型</typeparam>
            <returns><typeparamref name="TEnum"/>で定義されている値のうち最小値を持つ者のインスタンス</returns>
        </member>
        <member name="M:fslib.EnumHelper.Min``1(``0[])">
            <summary>
            指定した列挙体の配列内の値のうち割り当てられた値が最小の物を返す
            </summary>
            <typeparam name="TEnum">処理する列挙体の型</typeparam>
            <param name="array">最小値を検索する<typeparamref name="TEnum"/>の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>の容量が0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <returns><paramref name="array"/>内の列挙体の値のうち最小値を持つもの</returns>
        </member>
        <member name="M:fslib.EnumHelper.Min``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            指定した列挙体のコレクション内の値のうち割り当てられた値が最小の物を返す
            </summary>
            <typeparam name="TEnum">処理する列挙体の型</typeparam>
            <param name="collection">最小値を検索する<typeparamref name="TEnum"/>の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/>の容量が0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
            <returns><paramref name="collection"/>内の列挙体の値のうち最小値を持つもの</returns>
        </member>
        <member name="M:fslib.EnumHelper.Split``1(``0)">
            <summary>
            列挙体の値を定義された値で分割していく
            </summary>
            <typeparam name="TEnum">分割する列挙体の型</typeparam>
            <param name="value">分割する列挙体の値</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/>に<see cref="T:System.FlagsAttribute"/>が適用されていない</exception>
            <returns>分割されて生じた<typeparamref name="TEnum"/>のすべての値</returns>
        </member>
        <member name="M:fslib.EnumHelper.Sort``1(``0[])">
            <summary>
            指定した列挙体の配列を，小さい値順に整列していく
            </summary>
            <typeparam name="TEnum">ソートする列挙体の型</typeparam>
            <param name="enums">ソートしたい列挙体が格納される配列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="enums"/>がnull</exception>
            <returns>ソートされた配列</returns>
        </member>
        <member name="M:fslib.EnumHelper.IsDefined``1(``0)">
            <summary>
            指定した値が列挙体として列挙されているかどうかを返す
            </summary>
            <typeparam name="TEnum">定義されているかどうかを調査する型</typeparam>
            <param name="value">定義されているか調べる値</param>
            <returns>定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EnumHelper.IsDefined``1(System.SByte)">
            <summary>
            指定した値が列挙体として列挙されているかどうかを返す
            </summary>
            <typeparam name="TEnum">定義されているかどうかを調査する型</typeparam>
            <param name="value">定義されているか調べる値</param>
            <returns>定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EnumHelper.IsDefined``1(System.Byte)">
            <summary>
            指定した値が列挙体として列挙されているかどうかを返す
            </summary>
            <typeparam name="TEnum">定義されているかどうかを調査する型</typeparam>
            <param name="value">定義されているか調べる値</param>
            <returns>定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EnumHelper.IsDefined``1(System.Int16)">
            <summary>
            指定した値が列挙体として列挙されているかどうかを返す
            </summary>
            <typeparam name="TEnum">定義されているかどうかを調査する型</typeparam>
            <param name="value">定義されているか調べる値</param>
            <returns>定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EnumHelper.IsDefined``1(System.UInt16)">
            <summary>
            指定した値が列挙体として列挙されているかどうかを返す
            </summary>
            <typeparam name="TEnum">定義されているかどうかを調査する型</typeparam>
            <param name="value">定義されているか調べる値</param>
            <returns>定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EnumHelper.IsDefined``1(System.Int32)">
            <summary>
            指定した値が列挙体として列挙されているかどうかを返す
            </summary>
            <typeparam name="TEnum">定義されているかどうかを調査する型</typeparam>
            <param name="value">定義されているか調べる値</param>
            <returns>定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EnumHelper.IsDefined``1(System.UInt32)">
            <summary>
            指定した値が列挙体として列挙されているかどうかを返す
            </summary>
            <typeparam name="TEnum">定義されているかどうかを調査する型</typeparam>
            <param name="value">定義されているか調べる値</param>
            <returns>定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EnumHelper.IsDefined``1(System.Int64)">
            <summary>
            指定した値が列挙体として列挙されているかどうかを返す
            </summary>
            <typeparam name="TEnum">定義されているかどうかを調査する型</typeparam>
            <param name="value">定義されているか調べる値</param>
            <returns>定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EnumHelper.IsDefined``1(System.UInt64)">
            <summary>
            指定した値が列挙体として列挙されているかどうかを返す
            </summary>
            <typeparam name="TEnum">定義されているかどうかを調査する型</typeparam>
            <param name="value">定義されているか調べる値</param>
            <returns>定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EnumHelper.IsDefined``1(System.String)">
            <summary>
            指定した値が列挙体として列挙されているかどうかを返す
            </summary>
            <typeparam name="TEnum">定義されているかどうかを調査する型</typeparam>
            <param name="value">定義されているか調べる値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>がnull</exception>
            <returns>定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Equality`1">
            <summary>
            2つのオブジェクトの等価性を判定するデリゲート
            </summary>
            <typeparam name="T">等価性を判定する値の型</typeparam>
            <param name="t1">等価性を判定したい値1</param>
            <param name="t2">等価性を判定したい値2</param>
            <returns>2つのオブジェクトの等価性</returns>
        </member>
        <member name="T:fslib.EqualityComparerF`1">
            <summary>
            関数で等価性を判定する比較子のクラス
            </summary>
            <typeparam name="T">等価性を判定する型</typeparam>
        </member>
        <member name="M:fslib.EqualityComparerF`1.#ctor(fslib.Equality{`0})">
            <summary>
            <see cref="T:fslib.EqualityComparerF`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="match">等価性判定に使用する関数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
        </member>
        <member name="M:fslib.EqualityComparerF`1.Equals(`0,`0)">
            <summary>
            2つのオブジェクトの等価性を判定する
            </summary>
            <param name="x">等価性を判定する値1</param>
            <param name="y">等価性を判定する値2</param>
            <returns><paramref name="x"/>と<paramref name="y"/>の間に等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.EqualityComparerF`1.GetHashCode(`0)">
            <summary>
            オブジェクトのハッシュコードを取得する
            </summary>
            <param name="obj">ハッシュコードを取得するオブジェクト</param>
            <returns><paramref name="obj"/>のハッシュコード</returns>
        </member>
        <member name="T:fslib.AsdEx">
            <summary>
            Altseedの拡張メソッド
            </summary>
        </member>
        <member name="M:fslib.AsdEx.ToStringEx(asd.Color)">
            <summary>
            <see cref="T:asd.Color"/>用のToStringメソッド
            </summary>
        </member>
        <member name="M:fslib.AsdEx.Add(asd.Color,asd.Color)">
            <summary>
            色の加算を行う
            </summary>
        </member>
        <member name="M:fslib.AsdEx.Substract(asd.Color,asd.Color)">
            <summary>
            色の減算を行う
            </summary>
        </member>
        <member name="M:fslib.AsdEx.Multply(asd.Color,asd.Color)">
            <summary>
            色の乗算を行う
            </summary>
        </member>
        <member name="M:fslib.AsdEx.Multply(asd.Color,System.Byte)">
            <summary>
            色の乗算を行う
            </summary>
        </member>
        <member name="M:fslib.AsdEx.Divide(asd.Color,asd.Color)">
            <summary>
            色の除算を行う
            </summary>
        </member>
        <member name="M:fslib.AsdEx.Divide(asd.Color,System.Byte)">
            <summary>
            色の除算を行う
            </summary>
        </member>
        <member name="M:fslib.AsdEx.BitmapToTexture(asd.Graphics,System.Drawing.Bitmap)">
            <summary>
            <see cref="T:System.Drawing.Bitmap"/>を<see cref="T:asd.Texture2D"/>に変換する
            </summary>
            <param name="texture">変換したい<see cref="T:System.Drawing.Bitmap"/>オブジェクト</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="g"/>がnull</exception>
        </member>
        <member name="M:fslib.AsdEx.GetSize(asd.TextObject2D)">
            <summary>
            <see cref="P:asd.Object2D.Scale"/>を考慮したサイズを返す。
            参照：<seealso cref="M:asd.Font.CalcTextureSize(System.String,asd.WritingDirection)"/>
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="t"/>の<see cref="P:asd.TextObject2D.Text"/>がnull</exception>
        </member>
        <member name="M:fslib.AsdEx.GetSize(asd.TextureObject2D)">
            <summary>
            <see cref="P:asd.Object2D.Scale"/>を考慮したサイズを返す。
            参照：<seealso cref="P:asd.Texture2D.Size"/>
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="t"/>の<see cref="P:asd.TextureObject2D.Texture"/>がnull</exception>
        </member>
        <member name="M:fslib.AsdEx.RemoveMyself(asd.Component)">
            <summary>
            オーナーから自身をRemoveさせる
            </summary>
        </member>
        <member name="M:fslib.AsdEx.RemoveMyself(asd.Object2D)">
            <summary>
            <see cref="T:asd.Layer2D"/>から自身を<see cref="M:asd.Layer2D.RemoveObject(asd.Object2D)"/>させる
            </summary>
        </member>
        <member name="M:fslib.AsdEx.RemoveMyself(asd.Object3D)">
            <summary>
            <see cref="T:asd.Layer3D"/>から自身を<see cref="M:asd.Layer3D.RemoveObject(asd.Object3D)"/>させる
            </summary>
        </member>
        <member name="M:fslib.AsdEx.CreateTexture2DStrict(asd.Graphics,System.String)">
            <summary>
            テクスチャを読み込む
            例外を投げまくる
            </summary>
            <param name="path">読み込むテクスチャのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる又は使えない文字が含まれる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="g"/>または<paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.IOException">ファイルの読み込みに失敗した</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <returns><paramref name="path"/>で読み込まれるテクスチャ</returns>
        </member>
        <member name="M:fslib.AsdEx.TryCreateTexture2D(asd.Graphics,System.String,asd.Texture2D@)">
            <summary>
            テクスチャを読み込む
            </summary>
            <param name="path">読み込むテクスチャのファイルのパス</param>
            <param name="texture">読み込まれたテクスチャ 読み込めなかったらnull</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="g"/>がnull</exception>
            <returns><paramref name="texture"/>を読み込めたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.ObjectEx">
            <summary>
            <see cref="T:System.Object"/>クラスの拡張メソッド
            </summary>
        </member>
        <member name="M:fslib.ObjectEx.ToObject(System.Object)">
            <summary>
            object型に変換する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>がnull</exception>
        </member>
        <member name="T:fslib.GenericEx">
            <summary>
            ジェネリックの拡張メソッド
            </summary>
        </member>
        <member name="M:fslib.GenericEx.Count``1">
            <summary>
            列挙体の要素数を返す。
            </summary>
            <typeparam name="T">要素数を求める列挙体。</typeparam>
        </member>
        <member name="M:fslib.GenericEx.ToArray``1(System.ValueTuple{``0,``0})">
            <summary>
            <see cref="T:System.Tuple`2"/>を配列化する
            </summary>
        </member>
        <member name="M:fslib.GenericEx.ToArray``1(System.ValueTuple{``0,``0,``0})">
            <summary>
            <see cref="T:System.Tuple`3"/>を配列化する
            </summary>
        </member>
        <member name="M:fslib.GenericEx.ToArray``1(System.ValueTuple{``0,``0,``0,``0})">
            <summary>
            <see cref="T:System.Tuple`4"/>を配列化する
            </summary>
        </member>
        <member name="M:fslib.GenericEx.ToArray``1(System.ValueTuple{``0,``0,``0,``0,``0})">
            <summary>
            <see cref="T:System.Tuple`5"/>を配列化する
            </summary>
        </member>
        <member name="M:fslib.GenericEx.ToArray``1(System.ValueTuple{``0,``0,``0,``0,``0,``0})">
            <summary>
            <see cref="T:System.Tuple`6"/>を配列化する
            </summary>
        </member>
        <member name="M:fslib.GenericEx.ToArray``1(System.ValueTuple{``0,``0,``0,``0,``0,``0,``0})">
            <summary>
            <see cref="T:System.Tuple`7"/>を配列化する
            </summary>
        </member>
        <member name="M:fslib.GenericEx.ToArray``1(System.ValueTuple{``0,``0,``0,``0,``0,``0,``0,System.ValueTuple{``0}})">
            <summary>
            <see cref="T:System.Tuple`8"/>を配列化する
            </summary>
        </member>
        <member name="M:fslib.GenericEx.GetValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/>から要素を取り出す
            </summary>
            <typeparam name="T">取り出す要素の型</typeparam>
            <param name="info">要素を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="name">取り出す要素の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>または<paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidCastException">取り出した要素を<typeparamref name="T"/>にキャストできない</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="name"/>に結びつけられた値が存在しない</exception>
            <returns><paramref name="info"/>内に格納されている<paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="T:fslib.NumberEx">
            <summary>
            数値系の拡張メソッド
            </summary>
        </member>
        <member name="M:fslib.NumberEx.ToEnum``1(System.Byte)">
            <summary>
            <see cref="T:System.Byte"/>→<see cref="T:System.Enum"/>変換
            </summary>
            <typeparam name="T">変換先の列挙体</typeparam>
            <param name="value">変換したい値</param>
            <exception cref="T:System.ArgumentOutOfRangeException">valueが負の値または要素数以上</exception>
        </member>
        <member name="M:fslib.NumberEx.ToEnum``1(System.SByte)">
            <summary>
            <see cref="T:System.SByte"/>→<see cref="T:System.Enum"/>変換
            </summary>
            <typeparam name="T">変換先の列挙体</typeparam>
            <param name="value">変換したい値</param>
            <exception cref="T:System.ArgumentOutOfRangeException">valueが負の値または要素数以上</exception>
        </member>
        <member name="M:fslib.NumberEx.ToEnum``1(System.Int16)">
            <summary>
            <see cref="T:System.Int16"/>→<see cref="T:System.Enum"/>変換
            </summary>
            <typeparam name="T">変換先の列挙体</typeparam>
            <param name="value">変換したい値</param>
            <exception cref="T:System.ArgumentOutOfRangeException">valueが負の値または要素数以上</exception>
        </member>
        <member name="M:fslib.NumberEx.ToEnum``1(System.UInt16)">
            <summary>
            <see cref="T:System.UInt16"/>→<see cref="T:System.Enum"/>変換
            </summary>
            <typeparam name="T">変換先の列挙体</typeparam>
            <param name="value">変換したい値</param>
            <exception cref="T:System.ArgumentOutOfRangeException">valueが負の値または要素数以上</exception>
        </member>
        <member name="M:fslib.NumberEx.ToEnum``1(System.Int32)">
            <summary>
            <see cref="T:System.Int32"/>→<see cref="T:System.Enum"/>変換
            </summary>
            <typeparam name="T">変換先の列挙体</typeparam>
            <param name="value">変換したい値</param>
            <exception cref="T:System.ArgumentOutOfRangeException">valueが負の値または要素数以上</exception>
        </member>
        <member name="M:fslib.NumberEx.ToEnum``1(System.UInt32)">
            <summary>
            <see cref="T:System.UInt32"/>→<see cref="T:System.Enum"/>変換
            </summary>
            <typeparam name="T">変換先の列挙体</typeparam>
            <param name="value">変換したい値</param>
            <exception cref="T:System.ArgumentOutOfRangeException">valueが負の値または要素数以上</exception>
        </member>
        <member name="M:fslib.NumberEx.ToEnum``1(System.Int64)">
            <summary>
            <see cref="T:System.Int64"/>→<see cref="T:System.Enum"/>変換
            </summary>
            <typeparam name="T">変換先の列挙体</typeparam>
            <param name="value">変換したい値</param>
            <exception cref="T:System.ArgumentOutOfRangeException">valueが負の値または要素数以上</exception>
        </member>
        <member name="M:fslib.NumberEx.ToEnum``1(System.UInt64)">
            <summary>
            <see cref="T:System.UInt64"/>→<see cref="T:System.Enum"/>変換
            </summary>
            <typeparam name="T">変換先の列挙体</typeparam>
            <param name="value">変換したい値</param>
            <exception cref="T:System.ArgumentOutOfRangeException">valueが負の値または要素数以上</exception>
        </member>
        <member name="M:fslib.NumberEx.SplitToBytes(System.Byte)">
            <summary>
            数字を1桁ずつ分解した配列を返す。
            一番大きな桁から格納されている。
            </summary>
        </member>
        <member name="M:fslib.NumberEx.SplitToSBytes(System.SByte)">
            <summary>
            数字を1桁ずつ分解した配列を返す。
            一番大きな桁から格納されている。
            </summary>
        </member>
        <member name="M:fslib.NumberEx.SplitToShorts(System.Int16)">
            <summary>
            数字を1桁ずつ分解した配列を返す。
            一番大きな桁から格納されている。
            </summary>
        </member>
        <member name="M:fslib.NumberEx.SplitToUShorts(System.UInt16)">
            <summary>
            数字を1桁ずつ分解した配列を返す。
            一番大きな桁から格納されている。
            </summary>
        </member>
        <member name="M:fslib.NumberEx.SplitToInts(System.Int32)">
            <summary>
            数字を1桁ずつ分解した配列を返す。
            一番大きな桁から格納されている。
            </summary>
        </member>
        <member name="M:fslib.NumberEx.SplitToUInts(System.UInt32)">
            <summary>
            数字を1桁ずつ分解した配列を返す。
            一番大きな桁から格納されている。
            </summary>
        </member>
        <member name="M:fslib.NumberEx.SplitToLongs(System.Int64)">
            <summary>
            数字を1桁ずつ分解した配列を返す。
            一番大きな桁から格納されている。
            </summary>
        </member>
        <member name="M:fslib.NumberEx.SplitToULongs(System.UInt64)">
            <summary>
            数字を1桁ずつ分解した配列を返す。
            一番大きな桁から格納されている。
            </summary>
        </member>
        <member name="M:fslib.NumberEx.SplitBits(System.Int32)">
            <summary>
            ビットごとに値が存在するかどうかを返す。0でfalse，1でtrue
            </summary>
            <param name="value">ビットが存在するか調べる値</param>
        </member>
        <member name="T:fslib.StringEx">
            <summary>
            <see cref="T:System.String"/>の拡張メソッド
            </summary>
        </member>
        <member name="M:fslib.StringEx.Tobytes(System.String)">
            <summary>
            <see cref="T:System.Byte"/>の配列に直す。
            </summary>
        </member>
        <member name="M:fslib.StringEx.Tosbytes(System.String)">
            <summary>
            <see cref="T:System.SByte"/>の配列に直す。
            </summary>
        </member>
        <member name="M:fslib.StringEx.Toshorts(System.String)">
            <summary>
            <see cref="T:System.Int16"/>の配列に直す。
            </summary>
        </member>
        <member name="M:fslib.StringEx.Toushorts(System.String)">
            <summary>
            <see cref="T:System.UInt16"/>の配列に直す。
            </summary>
        </member>
        <member name="M:fslib.StringEx.Toints(System.String)">
            <summary>
            <see cref="T:System.Int32"/>の配列に直す。
            </summary>
        </member>
        <member name="M:fslib.StringEx.Touints(System.String)">
            <summary>
            <see cref="T:System.UInt32"/>の配列に直す。
            </summary>
        </member>
        <member name="M:fslib.StringEx.Tolongs(System.String)">
            <summary>
            <see cref="T:System.Int64"/>の配列に直す。
            </summary>
        </member>
        <member name="M:fslib.StringEx.Toulongs(System.String)">
            <summary>
            <see cref="T:System.UInt64"/>の配列に直す。
            </summary>
        </member>
        <member name="M:fslib.StringEx.ToSmallLines(System.String,System.Int32)">
            <summary>
            指定した文字数で区切っていく。
            </summary>
            <param name="count">区切る文字数</param>
        </member>
        <member name="M:fslib.StringEx.CanParse``1(System.String)">
            <summary>
            指定した型でParseできるかを返す。
            </summary>
            <typeparam name="T">数値型(<see cref="T:System.SByte"/>, <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Char"/>)</typeparam>
            <exception cref="T:System.ArgumentException">Tの型が上で指定した型以外である</exception>
        </member>
        <member name="M:fslib.StringEx.StringToEnum``1(System.String,System.Boolean)">
            <summary>
            <see cref="T:System.String"/>→<see cref="T:System.Enum"/>への変換
            </summary>
            <typeparam name="T">変換先の列挙体</typeparam>
            <param name="value">変換したい値</param>
            <param name="ignoreCase">大文字と小文字の区別を無視するかどうか</param>
        </member>
        <member name="M:fslib.StringEx.Concat(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            指定した文字列のコレクションを指定した文字で区切りながら連結する。
            </summary>
            <param name="splitChar">区切る文字</param>
            <exception cref="T:System.ArgumentNullException">valuesがnull</exception>
        </member>
        <member name="T:fslib.DelegateEx">
            <summary>
            デリゲートの拡張メソッド
            </summary>
        </member>
        <member name="M:fslib.DelegateEx.ToPredicate``1(System.Func{``0,System.Boolean})">
            <summary>
            <see cref="T:System.Func`2"/>型を<see cref="T:System.Predicate`1"/>型に変換する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/>がnull</exception>
        </member>
        <member name="M:fslib.DelegateEx.ToFunc``1(System.Predicate{``0})">
            <summary>
            <see cref="T:System.Predicate`1"/>型を<see cref="T:System.Func`2"/>型に変換する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/>がnull</exception>
        </member>
        <member name="M:fslib.DelegateEx.ToFunc``1(fslib.Equality{``0})">
            <summary>
            <see cref="T:fslib.Equality`1"/>型を<see cref="T:System.Func`3"/>型に変換する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
        </member>
        <member name="M:fslib.DelegateEx.ToEquality``1(System.Func{``0,``0,System.Boolean})">
            <summary>
            <see cref="T:System.Func`3"/>型を<see cref="T:fslib.Equality`1"/>型に変換する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
        </member>
        <member name="T:fslib.IEnumerableEx">
            <summary>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>に関する拡張メソッド
            </summary>
        </member>
        <member name="M:fslib.IEnumerableEx.ToDoubleKeyDictionary``3(System.Collections.Generic.IEnumerable{fslib.Collections.DoubleKeyValuePair{``0,``1,``2}})">
            <summary>
            <see cref="T:fslib.Collections.DoubleKeyValuePair`3"/>のコレクションを<see cref="T:fslib.Collections.DoubleKeyDictionary`3"/>に変換する
            </summary>
            <exception cref="T:System.ArgumentException">指定した<typeparamref name="TKey1"/>と<typeparamref name="TKey2"/>の組み合わせが既に存在する</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>がnull</exception>
        </member>
        <member name="M:fslib.IEnumerableEx.ToDoubleKeyDictionary``3(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{fslib.Collections.DoubleKey{``0,``1},``2}})">
            <summary>
            キーが<see cref="T:fslib.Collections.DoubleKey`2"/>である<see cref="T:System.Collections.Generic.KeyValuePair`2"/>のコレクションを<see cref="T:fslib.Collections.DoubleKeyDictionary`3"/>に変換する
            </summary>
            <exception cref="T:System.ArgumentException">指定した<typeparamref name="TKey1"/>と<typeparamref name="TKey2"/>の組み合わせが既に存在する</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="pairs"/>がnull</exception>
        </member>
        <member name="M:fslib.IEnumerableEx.ToDoubleKeyDictionary``3(System.Collections.Generic.IEnumerable{``2},System.Func{``2,``0},System.Func{``2,``1})">
            <summary>
            指定した値のコレクションからキーを生成しながら<see cref="T:fslib.Collections.DoubleKeyDictionary`3"/>のインスタンスを生成する
            </summary>
            <param name="key1selector"><typeparamref name="TKey1"/>を割り当てるデリゲート</param>
            <param name="key2selector"><typeparamref name="TKey2"/>を割り当てるデリゲート</param>
            <exception cref="T:System.ArgumentNullException">引数のいずれかがnull</exception>
            <exception cref="T:System.FormatException"><paramref name="key1selector"/>又は<paramref name="key2selector"/>によって生成されたキーがnullになる</exception>
        </member>
        <member name="M:fslib.IEnumerableEx.GetIndexes``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            指定した要素と一致する要素の通し番号の配列を返す。
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/>がnull</exception>
            <exception cref="T:System.OverflowException">要素数が<see cref="F:System.Int32.MaxValue"/>を超えた</exception>
        </member>
        <member name="M:fslib.IEnumerableEx.GetIndexes``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            指定した要素と一致する要素の通し番号の配列を返す。
            </summary>
            <param name="predicate">検索する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/>又は<paramref name="predicate"/>がnull</exception>
        </member>
        <member name="M:fslib.IEnumerableEx.TakeRandom``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            コレクションの中のランダムな要素を1つ返す。
            </summary>
            <param name="init">疑似乱数の初期化子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="c"/>がnull</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/>の要素数が<see cref="F:System.Int32.MaxValue"/>より大きい</exception>
        </member>
        <member name="M:fslib.IEnumerableEx.TakeRandom``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            コレクションの中のランダムな要素を指定数返す。
            </summary>
            <param name="count">取り出す要素数</param>
            <param name="init">疑似乱数の初期化子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="c"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/>が0未満または<paramref name="c"/>の要素数より大きい</exception>
            <exception cref="T:System.OverflowException"><paramref name="c"/>の要素数が<see cref="F:System.Int32.MaxValue"/>より大きい</exception>
        </member>
        <member name="M:fslib.IEnumerableEx.ReverseGenerics``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            キーと値を入れ替えた<see cref="T:System.Collections.Generic.Dictionary`2"/>を返す。
            </summary>
        </member>
        <member name="M:fslib.IEnumerableEx.Extract``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            リストの指定した番号の要素を取り出す。
            取り出されたらその要素はリストから削除される。
            </summary>
            <param name="index">取り出す要素のインデックス</param>
        </member>
        <member name="M:fslib.IEnumerableEx.Transfer``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            リストの指定した要素を取り出し指定したコレクションの末尾に追加する。
            取り出された要素はそのリストから削除される。
            </summary>
            <param name="listindex">取り出す要素のインデックス</param>
            <param name="collection">要素の追加先となるコレクション</param>
        </member>
        <member name="M:fslib.IEnumerableEx.Transfer``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0}@,System.Int32)">
            <summary>
            リストの指定した要素を取り出し指定したコレクションに挿入する。
            取り出された要素はそのリストから削除される。
            </summary>
            <param name="listindex">取り出す要素のインデックス</param>
            <param name="collection">要素の追加先となるコレクション</param>
            <param name="insertindex">挿入される場所</param>
        </member>
        <member name="M:fslib.IEnumerableEx.Insert``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            指定した場所に要素を挿入する。
            </summary>
            <param name="item">挿入する要素</param>
            <param name="index">挿入する場所</param>
        </member>
        <member name="M:fslib.IEnumerableEx.InsertRange``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            指定した場所にコレクションを挿入する。
            </summary>
            <param name="collection">挿入するコレクション</param>
            <param name="index">挿入する場所</param>
        </member>
        <member name="M:fslib.IEnumerableEx.Count``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            指定した要素に一致する要素の数を返す。
            </summary>
            <param name="item">検索する要素</param>
        </member>
        <member name="M:fslib.IEnumerableEx.All``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            コレクション内のすべての要素が指定した要素に一致するかどうかを返す。
            </summary>
            <param name="item">検索する要素</param>
        </member>
        <member name="M:fslib.IEnumerableEx.AllEquals``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            コレクション内のすべての要素が一致しているかどうかを返す。
            </summary>
            <remarks>要素数が0の場合はtrueが返される。</remarks>
        </member>
        <member name="M:fslib.IEnumerableEx.Duplicate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            指定したコレクションのデータに重複があるかどうかを返す。
            </summary>
        </member>
        <member name="M:fslib.IEnumerableEx.Dispence``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}@,System.Predicate{``0})">
            <summary>
            指定した条件の要素を別のコレクションに移す。
            </summary>
            <param name="newCollection">要素を移し替えられた新しいコレクション</param>
            <param name="match">要素を移す条件</param>
            <returns>要素を抜かれた元のコレクション</returns>
        </member>
        <member name="M:fslib.IEnumerableEx.ReverseDimention``1(``0[0:,0:])">
            <summary>
            2次元正方配列の縦横を入れ替える。
            </summary>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のX方向の長さとY方向の長さが異なっていた。</exception>
        </member>
        <member name="M:fslib.IEnumerableEx.CloneAll(System.Collections.Generic.IEnumerable{System.ICloneable})">
            <summary>
            <see cref="T:System.ICloneable"/>からなるコレクションをディープコピーして返す。
            </summary>
        </member>
        <member name="M:fslib.IEnumerableEx.ToBasicCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            <see cref="T:fslib.Collections.BasicModel.BasicCollection`1"/>に型変換する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>がnull</exception>
            <returns><paramref name="source"/>のコピーを持つ<see cref="T:fslib.Collections.BasicModel.BasicCollection`1"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Carsol">
            <summary>
            汎用的なカーソル
            </summary>
        </member>
        <member name="P:fslib.Carsol.OnMoved">
            <summary>
            カーソルが動かされたときに実行される実装。
            自身が引数となる。
            </summary>
        </member>
        <member name="P:fslib.Carsol.CarsolSound">
            <summary>
            カーソルが動いたときになるサウンド
            </summary>
        </member>
        <member name="P:fslib.Carsol.SystemPosition">
            <summary>
            便宜上のカーソルの位置
            初期値(0, 0)
            </summary>
        </member>
        <member name="P:fslib.Carsol.MaxSystemPosition">
            <summary>
            <see cref="P:fslib.Carsol.SystemPosition"/>の最大値
            </summary>
        </member>
        <member name="P:fslib.Carsol.Firstpos">
            <summary>
            最初の<see cref="P:asd.Object2D.Position"/>
            </summary>
        </member>
        <member name="P:fslib.Carsol.Count">
            <summary>
            カーソルを動かすカウンタ
            初期値0
            </summary>
        </member>
        <member name="P:fslib.Carsol.Statement">
            <summary>
            カーソルの位置情報
            <see cref="P:fslib.Carsol.SystemPosition"/>に準拠
            初期値0
            </summary>
        </member>
        <member name="P:fslib.Carsol.IsLocked">
            <summary>
            カーソルの動きをロックしているかどうかを取得する。
            </summary>
        </member>
        <member name="M:fslib.Carsol.#ctor(asd.Vector2DF,System.Int32,asd.Vector2DI,asd.Color,System.Boolean,asd.Vector2DF,asd.Vector2DI,asd.Vector2DI,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position"><see cref="P:fslib.Carsol.Statement"/> = 0の時の座標</param>
            <param name="priority">描画優先度</param>
            <param name="size">大きさ</param>
            <param name="color">色(RGBA)</param>
            <param name="flame">枠線の有無</param>
            <param name="moveVelocity"><see cref="P:fslib.Carsol.Statement"/>変化時の動く量</param>
            <param name="maxPos"><see cref="P:fslib.Carsol.MaxSystemPosition"/>の決定</param>
            <param name="firstPos"><see cref="P:fslib.Carsol.SystemPosition"/>の初期値</param>
            <param name="firstStatement"><see cref="P:fslib.Carsol.Statement"/>の初期値</param>
        </member>
        <member name="M:fslib.Carsol.#ctor(asd.Vector2DF,System.Int32,asd.Vector2DI,fslib.ColorSet,System.Boolean,asd.Vector2DF,asd.Vector2DI,asd.Vector2DI,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position"><see cref="P:fslib.Carsol.Statement"/> = 0の時の座標</param>
            <param name="priority">描画優先度</param>
            <param name="size">大きさ</param>
            <param name="colorSet">色の種類</param>
            <param name="flame">枠線の有無</param>
            <param name="moveVelocity"><see cref="P:fslib.Carsol.Statement"/>変化時の動く量</param>
            <param name="maxPos"><see cref="P:fslib.Carsol.MaxSystemPosition"/>の決定</param>
            <param name="firstPos"><see cref="P:fslib.Carsol.SystemPosition"/>の初期値</param>
            <param name="firstStatement"><see cref="P:fslib.Carsol.Statement"/>の初期値</param>
        </member>
        <member name="M:fslib.Carsol.#ctor(asd.Vector2DF,System.Int32,asd.Vector2DI,asd.Color,System.Boolean,asd.Vector2DF,asd.Vector2DI)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position"><see cref="P:fslib.Carsol.Statement"/> = 0の時の座標</param>
            <param name="priority">描画優先度</param>
            <param name="size">大きさ</param>
            <param name="color">色(RGBA)</param>
            <param name="flame">枠線の有無</param>
            <param name="moveVelocity"><see cref="P:fslib.Carsol.Statement"/>変化時の動く量</param>
            <param name="maxPos"><see cref="P:fslib.Carsol.MaxSystemPosition"/>の決定</param>
        </member>
        <member name="M:fslib.Carsol.#ctor(asd.Vector2DF,System.Int32,asd.Vector2DI,fslib.ColorSet,System.Boolean,asd.Vector2DF,asd.Vector2DI)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position"><see cref="P:fslib.Carsol.Statement"/> = 0の時の座標</param>
            <param name="priority">描画優先度</param>
            <param name="size">大きさ</param>
            <param name="colorSet">色の種類</param>
            <param name="flame">枠線の有無</param>
            <param name="moveVelocity"><see cref="P:fslib.Carsol.Statement"/>変化時の動く量</param>
            <param name="maxPos"><see cref="P:fslib.Carsol.MaxSystemPosition"/>の決定</param>
        </member>
        <member name="M:fslib.Carsol.ToString">
            <summary>
            文字列化
            </summary>
        </member>
        <member name="M:fslib.Carsol.OnUpdate">
            <summary>
            asdのアップデートごとに作動
            </summary>
        </member>
        <member name="M:fslib.Carsol.CarsolMoveAX(System.UInt32,System.Boolean)">
            <summary>
            カーソルを横だけに動かす場合に使用
            </summary>
            <param name="minusCount">次のカーソル移動までの猶予時間</param>
            <param name="soundPlay">移動効果音を流すか</param>
        </member>
        <member name="M:fslib.Carsol.CarsolMoveAY(System.UInt32,System.Boolean)">
            <summary>
            カーソルを縦だけに動かす場合に使用
            </summary>
            <param name="minusCount">次のカーソル移動までの猶予時間</param>
            <param name="soundPlay">移動効果音を流すか</param>
        </member>
        <member name="M:fslib.Carsol.CarsolMoveV(asd.Vector2DF,System.Int32,System.Int32,fslib.Base,System.UInt32,System.Boolean)">
            <summary>
            2次元的に動かしたい場合
            </summary>
            <param name="interval">座標の変動量</param>
            <param name="updown">上下したときの<see cref="P:fslib.Carsol.Statement"/>の変動</param>
            <param name="side">左右したときの<see cref="P:fslib.Carsol.Statement"/>の変動</param>
            <param name="baseDimention">X, Yどちらを基準にするか</param>
            <param name="minusCount"><see cref="P:fslib.Carsol.Count"/>の減少量</param>
            <param name="soundPlay">移動効果音を流すか</param>
        </member>
        <member name="T:fslib.CarsolS">
            <summary>
            位置でごり押したい場合のカーソル
            </summary>
        </member>
        <member name="P:fslib.CarsolS.PosList">
            <summary>
            位置のリスト
            </summary>
        </member>
        <member name="P:fslib.CarsolS.PosArray">
            <summary>
            位置の配列を取得する
            </summary>
        </member>
        <member name="P:fslib.CarsolS.SizeList">
            <summary>
            大きさのリスト
            コンストラクタで指定しなかった場合は要素が1つだけ
            </summary>
        </member>
        <member name="P:fslib.CarsolS.SizeArray">
            <summary>
            大きさの配列を取得する
            </summary>
        </member>
        <member name="M:fslib.CarsolS.#ctor(System.Int32,asd.Color,System.Boolean,System.Collections.Generic.List{asd.Vector2DF},System.Collections.Generic.List{asd.Vector2DI})">
            <summary>
            コンストラクタ
            </summary>
            <param name="priority">描画優先度</param>
            <param name="color">色</param>
            <param name="flame">枠の有無</param>
            <param name="posList">座標のリスト</param>
            <param name="sizeList">大きさのリスト</param>
        </member>
        <member name="M:fslib.CarsolS.#ctor(System.Int32,asd.Vector2DI,asd.Color,System.Boolean,System.Collections.Generic.List{asd.Vector2DF})">
            <summary>
            コンストラクタ
            </summary>
            <param name="priority">描画優先度</param>
            <param name="size">大きさ</param>
            <param name="color">色</param>
            <param name="flame">枠の有無</param>
            <param name="posList">座標のリスト</param>
        </member>
        <member name="M:fslib.CarsolS.#ctor(System.Int32,fslib.ColorSet,System.Boolean,System.Collections.Generic.List{asd.Vector2DF},System.Collections.Generic.List{asd.Vector2DI})">
            <summary>
            コンストラクタ
            </summary>
            <param name="priority">描画優先度</param>
            <param name="colorSet">色の種類</param>
            <param name="flame">枠の有無</param>
            <param name="posList">座標のリスト</param>
            <param name="sizeList">大きさのリスト</param>
        </member>
        <member name="M:fslib.CarsolS.#ctor(System.Int32,asd.Vector2DI,fslib.ColorSet,System.Boolean,System.Collections.Generic.List{asd.Vector2DF})">
            <summary>
            コンストラクタ
            </summary>
            <param name="priority">描画優先度</param>
            <param name="size">大きさ</param>
            <param name="colorSet">色の種類</param>
            <param name="flame">枠の有無</param>
            <param name="posList">座標のリスト</param>
        </member>
        <member name="M:fslib.CarsolS.CarsolMoveSX(System.UInt32,System.Boolean)">
            <summary>
            左右で<see cref="P:fslib.Carsol.Statement"/>を変更
            </summary>
            <param name="soundPlay">移動時効果音の有無</param>
            <param name="minusCount"><see cref="P:fslib.Carsol.Count"/>の減算値</param>
        </member>
        <member name="M:fslib.CarsolS.CarsolMoveSY(System.UInt32,System.Boolean)">
            <summary>
            上下で<see cref="P:fslib.Carsol.Statement"/>を変更
            </summary>
            <param name="soundPlay">移動時効果音の有無</param>
            <param name="minusCount"><see cref="P:fslib.Carsol.Count"/>の減算値</param>
        </member>
        <member name="T:fslib.Central">
            <summary>
            fslibの中心となるクラス
            </summary>
        </member>
        <member name="P:fslib.Central.Logger">
            <summary>
            ロガーを取得する
            </summary>
        </member>
        <member name="P:fslib.Central.ThrowHelper">
            <summary>
            例外を投げるヘルパーを取得する
            </summary>
        </member>
        <member name="T:fslib.ThrowHelper">
            <summary>
            例外を投げる補助をする
            </summary>
        </member>
        <member name="M:fslib.ThrowHelper.Throw(System.Exception,System.Boolean)">
            <summary>
            指定した条件が成立する場合例外をスローする
            </summary>
            <param name="exception">スローする例外 nullの場合は何もスローされない</param>
            <param name="condition">trueの場合<paramref name="exception"/>がスローされる</param>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfNull(System.Object[])">
            <summary>
            引数のいずれかがnullだった場合に例外をスローする
            </summary>
            <param name="values">検証する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>のいずれかがnull</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfBigger``1(``0,``0,System.String)">
            <summary>
            指定した値が比較する値より大きい場合に例外をスローする
            </summary>
            <typeparam name="T">比較する値の型</typeparam>
            <param name="value">比較する値</param>
            <param name="comparison"><paramref name="value"/>の比較対象</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/>が<paramref name="comparison"/>より大きい</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfBiggerOrEqual``1(``0,``0,System.String)">
            <summary>
            指定した値が比較する値以上の場合に例外をスローする
            </summary>
            <typeparam name="T">比較する値の型</typeparam>
            <param name="value">比較する値</param>
            <param name="comparison"><paramref name="value"/>の比較対象</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/>が<paramref name="comparison"/>以上</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfEqual_C``1(``0,``0,System.String)">
            <summary>
            指定した値の順番が等しい場合に例外をスローする
            </summary>
            <typeparam name="T">比較する値の型</typeparam>
            <param name="value">比較する値</param>
            <param name="comparison"><paramref name="value"/>の比較対象</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/>が<paramref name="comparison"/>と順番的に等しい</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfNotEqual_C``1(``0,``0,System.String)">
            <summary>
            指定した値の順番が等しくない場合に例外をスローする
            </summary>
            <typeparam name="T">比較する値の型</typeparam>
            <param name="value">比較する値</param>
            <param name="comparison"><paramref name="value"/>の比較対象</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/>が<paramref name="comparison"/>と順番的に等しくない</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfLower``1(``0,``0,System.String)">
            <summary>
            指定した値が比較する値より小さい場合に例外をスローする
            </summary>
            <typeparam name="T">比較する値の型</typeparam>
            <param name="value">比較する値</param>
            <param name="comparison"><paramref name="value"/>の比較対象</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/>が<paramref name="comparison"/>より小さい</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfLowerOrEqual``1(``0,``0,System.String)">
            <summary>
            指定した値が比較する値以下の場合に例外をスローする
            </summary>
            <typeparam name="T">比較する値の型</typeparam>
            <param name="value">比較する値</param>
            <param name="comparison"><paramref name="value"/>の比較対象</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/>が<paramref name="comparison"/>以下</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfEqual_E``1(``0,``0,System.String)">
            <summary>
            指定した値が等しい場合に例外をスローする
            </summary>
            <typeparam name="T">比較する値の型</typeparam>
            <param name="value">比較する値</param>
            <param name="comparison"><paramref name="value"/>の比較対象</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/>が<paramref name="comparison"/>が等しい</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfNotEqual_E``1(``0,``0,System.String)">
            <summary>
            指定した値が等しくない場合に例外をスローする
            </summary>
            <typeparam name="T">比較する値の型</typeparam>
            <param name="value">比較する値</param>
            <param name="comparison"><paramref name="value"/>の比較対象</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/>が<paramref name="comparison"/>が等しくない</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfSame``1(``0,``0,System.String)">
            <summary>
            指定した値が同一の場合に例外をスローする
            </summary>
            <typeparam name="T">比較する値の型</typeparam>
            <param name="value">比較する値</param>
            <param name="comparison"><paramref name="value"/>の比較対象</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/>が<paramref name="comparison"/>が同一</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfNotSame``1(``0,``0,System.String)">
            <summary>
            指定した値が同一でない場合に例外をスローする
            </summary>
            <typeparam name="T">比較する値の型</typeparam>
            <param name="value">比較する値</param>
            <param name="comparison"><paramref name="value"/>の比較対象</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/>が<paramref name="comparison"/>が同一でない</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfInvalidOperation(System.Boolean,System.String)">
            <summary>
            指定した条件を満たす場合例外をスローする
            </summary>
            <param name="condition">trueの時に例外スロー</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="condition"/>がtrueの時にスロー</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfNotSupported(System.Boolean,System.String)">
            <summary>
            指定した条件を満たす場合例外をスローする
            </summary>
            <param name="condition">trueの時に例外スロー</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.NotSupportedException"><paramref name="condition"/>がtrueの時にスロー</exception>
        </member>
        <member name="M:fslib.ThrowHelper.ThrowIfNotDefined``1(``0,System.String)">
            <summary>
            指定した列挙型の値が定義されていない場合例外をスローする
            </summary>
            <typeparam name="TEnum">検証する列挙型の型</typeparam>
            <param name="value">定義されているか検証する値</param>
            <param name="message">例外スロー時に使用するメッセージ</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value"/>が定義されていない時にスロー</exception>
        </member>
        <member name="T:fslib.ColorSet">
            <summary>
            色の種類
            </summary>
        </member>
        <member name="T:fslib.Base">
            <summary>
            動かすときX, Yどちらを基準とするか
            </summary>
        </member>
        <member name="F:fslib.Base.X">
            <summary>
            →Statement+1
            </summary>
        </member>
        <member name="F:fslib.Base.Y">
            <summary>
            ↓Statement+1
            </summary>
        </member>
        <member name="T:fslib.PriorityType">
            <summary>
            描画優先度の設定タイプ
            </summary>
        </member>
        <member name="F:fslib.PriorityType.Assign">
            <summary>
            =
            </summary>
        </member>
        <member name="F:fslib.PriorityType.Add">
            <summary>
            +=
            </summary>
        </member>
        <member name="F:fslib.PriorityType.Substract">
            <summary>
            -=
            </summary>
        </member>
        <member name="F:fslib.PriorityType.Multiple">
            <summary>
            *=
            </summary>
        </member>
        <member name="F:fslib.PriorityType.Divide">
            <summary>
            /*
            </summary>
        </member>
        <member name="T:fslib.DispenseType">
            <summary>
            文字列の分け方
            </summary>
        </member>
        <member name="F:fslib.DispenseType.Side">
            <summary>
            横
            </summary>
        </member>
        <member name="F:fslib.DispenseType.Vertical">
            <summary>
            縦
            </summary>
        </member>
        <member name="T:fslib.ColorType">
            <summary>
            色の変更の変化
            </summary>
        </member>
        <member name="F:fslib.ColorType.Normal">
            <summary>
            色の変化なし
            </summary>
        </member>
        <member name="F:fslib.ColorType.Random">
            <summary>
            乱数で適当に色を決める(フレーム毎)
            </summary>
        </member>
        <member name="F:fslib.ColorType.Rainbow">
            <summary>
            グラデーション
            </summary>
        </member>
        <member name="T:fslib.FontType">
            <summary>
            フォントのタイプを表す
            </summary>
        </member>
        <member name="F:fslib.FontType.Dynamic">
            <summary>
            <see cref="M:asd.Graphics.CreateDynamicFont(System.String,System.Int32,asd.Color,System.Int32,asd.Color)"/>によって生成されるフォント
            </summary>
        </member>
        <member name="F:fslib.FontType.Static">
            <summary>
            <see cref="M:asd.Graphics.CreateFont(System.String)"/>によってaffファイルから生成されたフォント
            </summary>
        </member>
        <member name="T:fslib.Exception.KeyDuplicateException">
            <summary>
            キーが重複していた時にスローされる例外を表す
            </summary>
        </member>
        <member name="M:fslib.Exception.KeyDuplicateException.#ctor">
            <summary>
            <see cref="T:fslib.Exception.KeyDuplicateException"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Exception.KeyDuplicateException.#ctor(System.String)">
            <summary>
            指定したエラーメッセージを使用して<see cref="T:fslib.Exception.KeyDuplicateException"/>の新しいインスタンスを生成する
            </summary>
            <param name="message">表示するエラーメッセージ</param>
        </member>
        <member name="M:fslib.Exception.KeyDuplicateException.#ctor(System.String,System.Exception)">
            <summary>
            指定したエラーメッセージとこの例外の原因になった内部例外への参照を用いて<see cref="T:fslib.Exception.KeyDuplicateException"/>の新しいインスタンスを生成する
            </summary>
            <param name="message">表示するエラーメッセージ</param>
            <param name="innerException">現在の例外の原因となった例外</param>
        </member>
        <member name="M:fslib.Exception.KeyDuplicateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化したデータを用いて<see cref="T:fslib.Exception.KeyDuplicateException"/>の新しいインスタンスを生成する
            </summary>
            <param name="info">シリアル化された<see cref="T:fslib.Exception.KeyDuplicateException"/>のインスタンスのデータ</param>
            <param name="context">シリアル化先に関する情報</param>
        </member>
        <member name="T:fslib.Exception.NodeContainedException">
            <summary>
            既に同系統に<see cref="T:fslib.Collections.TreeNode`1"/>が含まれていた時にスローされる例外
            </summary>
        </member>
        <member name="M:fslib.Exception.NodeContainedException.#ctor">
            <summary>
            <see cref="T:fslib.Exception.NodeContainedException"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Exception.NodeContainedException.#ctor(System.String)">
            <summary>
            指定したエラーメッセージを使用して<see cref="T:fslib.Exception.NodeContainedException"/>の新しいインスタンスを生成する
            </summary>
            <param name="message">例外の原因を示すメッセージ</param>
        </member>
        <member name="M:fslib.Exception.NodeContainedException.#ctor(System.String,System.String)">
            <summary>
            指定したエラーメッセージと原因となる<see cref="T:fslib.Collections.TreeNode`1"/>の名前を使用して<see cref="T:fslib.Exception.NodeContainedException"/>の新しいインスタンスを生成する
            </summary>
            <param name="message">例外の原因を表すメッセージ</param>
            <param name="nodeName">原因となる<see cref="T:fslib.Collections.TreeNode`1"/>の名前</param>
        </member>
        <member name="M:fslib.Exception.NodeContainedException.#ctor(System.String,System.Exception)">
            <summary>
            指定したエラーメッセージと例外の原因となる内部例外の参照を使用して<see cref="T:fslib.Exception.NodeContainedException"/>の新しいインスタンスを生成する
            </summary>
            <param name="message">例外の原因を表すメッセージと</param>
            <param name="innerException">現在の例外の原因となる例外</param>
        </member>
        <member name="M:fslib.Exception.NodeContainedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            指定したエラーメッセージと例外の原因となる<see cref="T:fslib.Collections.TreeNode`1"/>の名前，内部例外の参照を使用して<see cref="T:fslib.Exception.NodeContainedException"/>の新しいインスタンスを生成する
            </summary>
            <param name="message">例外の原因を表すメッセージと</param>
            <param name="nodeName">原因となる<see cref="T:fslib.Collections.TreeNode`1"/>の名前</param>
            <param name="innerException">現在の例外の原因となる例外</param>
        </member>
        <member name="M:fslib.Exception.NodeContainedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化したデータを使用して<see cref="T:fslib.Exception.NodeContainedException"/>の新しいインスタンスを生成する
            </summary>
            <param name="info">シリアル化するために必要な<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">シリアル化先の情報を持つ<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="P:fslib.Exception.NodeContainedException.Message">
            <summary>
            エラーメッセージと原因となる<see cref="T:fslib.Collections.TreeNode`1"/>の名前を取得する
            </summary>
        </member>
        <member name="P:fslib.Exception.NodeContainedException.NodeName">
            <summary>
            例外の原因となる<see cref="T:fslib.Collections.TreeNode`1"/>の名前を取得する
            </summary>
        </member>
        <member name="M:fslib.Exception.NodeContainedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            追加された情報を用いて<see cref="T:fslib.Exception.NodeContainedException"/>のオブジェクトを設定する
            </summary>
            <param name="info">シリアル化したデータを持つ<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">シリアル化先の情報を持つ<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.ICloneable`1">
            <summary>
            複製可能なオブジェクトを表す
            </summary>
            <typeparam name="T">複製できるオブジェクトの型</typeparam>
        </member>
        <member name="M:fslib.ICloneable`1.Clone">
            <summary>
            自身の複製を作成する
            </summary>
            <returns>自身の複製</returns>
        </member>
        <member name="T:fslib.IO.FilePathHelper">
            <summary>
            ファイルパスに関する情報を検査するクラス
            </summary>
        </member>
        <member name="M:fslib.IO.FilePathHelper.CheckLength(System.String)">
            <summary>
            指定したパスの長さが適切かどうかを判定する
            </summary>
            <param name="path">長さを判定するパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>パスの長さが260字未満かつディレクトリの長さが248字未満であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.IO.FilePathHelper.GetFilter(System.String,System.String[])">
            <summary>
            指定した拡張子を持つ<see cref="P:System.Windows.Forms.FileDialog.Filter"/>として使用可能な文字列を返す
            </summary>
            <param name="message">表示するファイルの種類を表す文字列</param>
            <param name="extensions">フィルターするファイルの拡張子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/>又は<paramref name="extensions"/>がnull</exception>
            <exception cref="T:System.FormatException"><paramref name="extensions"/>に拡張子ではない文字列が含まれていた</exception>
            <returns>フィルターと指定使用可能な文字列</returns>
        </member>
        <member name="M:fslib.IO.FilePathHelper.GetExtension(System.String)">
            <summary>
            指定したファイルパスの拡張子を返す
            </summary>
            <param name="path">拡張子を調べるファイルパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>ファイル拡張子</returns>
        </member>
        <member name="M:fslib.IO.FilePathHelper.HasInvalidChar(System.String)">
            <summary>
            指定したパスにファイルパスに使えない文字が入っているかどうかを判定する
            </summary>
            <param name="path">判定するパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns><paramref name="path"/>に使用できない文字が含まれていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.IO.FilePathHelper.IsExtension(System.String)">
            <summary>
            指定した文字列がファイルの拡張子かどうかを返す
            </summary>
            <param name="extension">拡張子かどうかを調べる文字列</param>
            <returns>拡張子だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.IO.WriteTextMode">
            <summary>
            テキストファイルの作成に対してどのような操作を行うか判定する
            </summary>
        </member>
        <member name="F:fslib.IO.WriteTextMode.Overwrite">
            <summary>
            前に書き込まれた内容を無視して上書きする
            </summary>
        </member>
        <member name="F:fslib.IO.WriteTextMode.AddBeggining">
            <summary>
            前に書き込まれた内容の文頭に書き込む(改行付き)
            </summary>
        </member>
        <member name="F:fslib.IO.WriteTextMode.AddEnd">
            <summary>
            前に書き込まれた内容の文末に書き込む(改行付き)
            </summary>
        </member>
        <member name="T:fslib.IO.IOHandler">
            <summary>
            ファイルの読み書きなどに関して
            </summary>
        </member>
        <member name="M:fslib.IO.IOHandler.ReadTextS(System.String,fslib.EncodeOption)">
            <summary>
            <see cref="T:System.IO.StreamReader"/>を使ってcsvファイルからテキストを読み込む。
            行ごとにコレクションの要素になる。
            </summary>
            <param name="path">読み込むファイル名</param>
            <param name="option">エンコードのオプション</param>
            <exception cref="T:System.ArgumentException">filenameが空文字または指定エンコードが不正な値だった場合</exception>
            <exception cref="T:System.ArgumentNullException">filenameがnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">ファイルのパスが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException">ファイルが見つからない</exception>
            <exception cref="T:System.NotSupportedException">ファイルパスが不正な値だった場合</exception>
            <exception cref="T:System.OutOfMemoryException">メモリが不足している</exception>
            <exception cref="T:System.IO.IOException"><see cref="N:System.IO"/>上のエラー</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.ReadTextS(System.String,fslib.EncodeOption,System.Char[])">
            <summary>
            <see cref="T:System.IO.StreamReader"/>を使ってcsvファイルからテキストを読み込む。
            行ごとに分割された文字列がコレクションの要素になる。
            </summary>
            <param name="path">読み込むファイル名</param>
            <param name="splitWord">文字列を分割する単語</param>
            <param name="option">エンコードのオプション</param>
            <exception cref="T:System.ArgumentException">filenameが空文字または指定エンコードが不正な値だった場合</exception>
            <exception cref="T:System.ArgumentNullException">filenameがnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">ファイルのパスが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException">ファイルが見つからない</exception>
            <exception cref="T:System.NotSupportedException">ファイルパスが不正な値だった場合</exception>
            <exception cref="T:System.OutOfMemoryException">メモリが不足している</exception>
            <exception cref="T:System.IO.IOException"><see cref="N:System.IO"/>上のエラー</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.WriteText(System.String,System.String,fslib.EncodeOption,fslib.IO.WriteTextMode)">
            <summary>
            テキスト形式のファイルに出力する。
            </summary>
            <param name="path">ファイルのパス</param>
            <param name="txt">書き込むテキスト</param>
            <param name="option">エンコードのオプション</param>
            <param name="mode">書き込み方のモード</param>
            <exception cref="T:System.ArgumentException">filenameが空文字または指定エンコードが不正な値だった場合</exception>
            <exception cref="T:System.ArgumentNullException">filenameがnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">ファイルのパスが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException">ファイルが見つからない</exception>
            <exception cref="T:System.NotSupportedException">ファイルパスが不正な値だった場合</exception>
            <exception cref="T:System.OutOfMemoryException">メモリが不足している</exception>
            <exception cref="T:System.IO.IOException"><see cref="N:System.IO"/>上のエラー</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.WriteText(System.String,System.Collections.Generic.IEnumerable{System.String},fslib.EncodeOption,fslib.IO.WriteTextMode)">
            <summary>
            テキスト形式のファイルに出力する。
            要素ごとに改行して入力する。
            </summary>
            <param name="path">ファイルのパス</param>
            <param name="txts">書き込むテキストのコレクション</param>
            <param name="option">エンコードのオプション</param>
            <param name="mode">書き込み方のモード</param>
            <exception cref="T:System.ArgumentException">filenameが空文字または指定エンコードが不正な値だった場合</exception>
            <exception cref="T:System.ArgumentNullException">filenameがnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">ファイルのパスが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException">ファイルが見つからない</exception>
            <exception cref="T:System.NotSupportedException">ファイルパスが不正な値だった場合</exception>
            <exception cref="T:System.OutOfMemoryException">メモリが不足している</exception>
            <exception cref="T:System.IO.IOException"><see cref="N:System.IO"/>上のエラー</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.ReadTextA(System.String,fslib.EncodeOption)">
            <summary>
            Altseedを使ってcsvファイルからテキストを読み込む。
            行ごとにコレクションの要素になる。
            </summary>
            <param name="path">読み込むファイル名</param>
            <param name="option">エンコードのオプション</param>
            <exception cref="T:System.ArgumentException">filenameが空文字または指定エンコードが不正な値だった場合</exception>
            <exception cref="T:System.ArgumentNullException">filenameがnull</exception>
            <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.ReadTextA(System.String,fslib.EncodeOption,System.Char[])">
            <summary>
            Altseedを使ってcsvファイルからテキストを読み込む。
            行ごとにコレクションの要素になる。
            </summary>
            <param name="path">読み込むファイル名</param>
            <param name="option">エンコードのオプション</param> 
            <param name="splitWord">文字列を分割する単語</param>
            <exception cref="T:System.ArgumentException">filenameが空文字または指定エンコードが不正な値だった場合</exception>
            <exception cref="T:System.ArgumentNullException">filenameがnull</exception>
            <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.Copy(System.String,System.String)">
            <summary>
            ファイルをコピーして生成する
            ファイルパッケージ内の要素も対象コピーできる
            既にファイルが存在していた場合は上書きし，保存先ディレクトリが見つからなかった場合は新しく構築する
            </summary>
            <param name="basefilePath">コピーされるファイルのパス</param>
            <param name="newfilePath">コピー後生成されるファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="basefilePath"/>または<paramref name="newfilePath"/>が空文字または空白で形成されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="basefilePath"/>または<paramref name="newfilePath"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="basefilePath"/>で指定したファイルが存在していなかった</exception>
            <exception cref="T:System.NotSupportedException">:の位置が不正，指定拡張子がサポートされていない</exception>
            <exception cref="T:System.IO.IOException">ファイルを読み込めなかった</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="basefilePath"/>または<paramref name="newfilePath"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセス許可がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.Copy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            ファイルをコピーして生成する
            ファイルパッケージ内の要素も対象コピーできる
            </summary>
            <param name="basefilePath">コピーされるファイルのパス</param>
            <param name="newfilePath">コピー後生成されるファイルのパス</param>
            <param name="overwrite">既にファイルがあった場合上書きするかどうか</param>
            <param name="generateDirectory">ディレクトリが存在しなかった場合自動生成するかどうか</param>
            <exception cref="T:System.ArgumentException"><paramref name="basefilePath"/>または<paramref name="newfilePath"/>が空文字または空白で形成されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="basefilePath"/>または<paramref name="newfilePath"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="generateDirectory"/>がfalseの時に保存先ディレクトリが存在していなかった</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="basefilePath"/>で指定したファイルが存在していなかった</exception>
            <exception cref="T:System.NotSupportedException">:の位置が不正，指定拡張子がサポートされていない</exception>
            <exception cref="T:System.IO.IOException">ファイルを読み込めなかった，<paramref name="overwrite"/>がfalseの時に既にファイルが存在していた</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="basefilePath"/>または<paramref name="newfilePath"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセス許可がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.WriteBinary``1(System.String,``0@)">
            <summary>
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>を用いたデータのセーブを行う
            </summary>
            <param name="path">セーブデータのパス</param>
            <param name="data">セーブされるデータ</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白又は値が不正</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>又は<paramref name="data"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>の値が不正</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した又はストリームが閉じられている</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>が非ファイルデバイスを参照している</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が指定長を超えている</exception>
            <exception cref="T:System.Security.SecurityException">呼び出し元に必要なアクセス許可がない</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="data"/>がシリアル可能としてマークされていない</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.WriteBinary``1(System.String,``0@,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>を用いたデータのセーブを行う
            </summary>
            <param name="path">セーブデータのパス</param>
            <param name="data">セーブされるデータ</param>
            <param name="surrogateSelector">シリアル化時に使用する<see cref="T:System.Runtime.Serialization.ISurrogateSelector"/>のインスタンス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白又は値が不正</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>又は<paramref name="data"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>の値が不正</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した又はストリームが閉じられている</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>が非ファイルデバイスを参照している</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が指定長を超えている</exception>
            <exception cref="T:System.Security.SecurityException">呼び出し元に必要なアクセス許可がない</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="data"/>がシリアル可能としてマークされていない</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.ReadBinary``1(System.String)">
            <summary>
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>を用いたデータのロードを行う
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白又は値が不正</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>の値が不正</exception>
            <exception cref="T:System.IO.FileNotFoundException">開くファイルが見つからない</exception>
            <exception cref="T:System.InvalidCastException">読み込んだデータを<typeparamref name="T"/>にキャストできない</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した又はストリームが閉じられている</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>が非ファイルデバイスを参照している</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が指定長を超えている</exception>
            <exception cref="T:System.Security.SecurityException">呼び出し元に必要なアクセス許可がない</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">データの長さが0</exception>
            <returns>読み込まれたデータ</returns>
        </member>
        <member name="M:fslib.IO.IOHandler.ReadBinary``1(System.String,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>を用いたデータのロードを行う
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <param name="surrogateSelector">シリアル化時に使用する<see cref="T:System.Runtime.Serialization.ISurrogateSelector"/>のインスタンス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白又は値が不正</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>の値が不正</exception>
            <exception cref="T:System.IO.FileNotFoundException">開くファイルが見つからない</exception>
            <exception cref="T:System.InvalidCastException">読み込んだデータを<typeparamref name="T"/>にキャストできない</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した又はストリームが閉じられている</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>が非ファイルデバイスを参照している</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が指定長を超えている</exception>
            <exception cref="T:System.Security.SecurityException">呼び出し元に必要なアクセス許可がない</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">データの長さが0</exception>
            <returns>読み込まれたデータ</returns>
        </member>
        <member name="M:fslib.IO.IOHandler.WriteXML``1(System.String,``0@)">
            <summary>
            <see cref="T:System.Xml.Serialization.XmlSerializer"/>を用いたデータのセーブを行う
            </summary>
            <param name="path">保存するパス</param>
            <param name="data">保存するデータ</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみで形成されている またはファイル特定の拡張子が使用されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>のディレクトリが見つからない</exception>
            <exception cref="T:System.InvalidOperationException">xmlの書き込み失敗</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>の拡張子がサポートされていない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセス許可がない</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.WriteXML``1(System.String,``0@,System.Type[])">
            <summary>
            <see cref="T:System.Xml.Serialization.XmlSerializer"/>を用いたデータのセーブを行う
            </summary>
            <param name="path">保存するパス</param>
            <param name="data">保存するデータ</param>
            <param name="types">シリアル化する為の他の要素の型の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみで形成されている またはファイル特定の拡張子が使用されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>のディレクトリが見つからない</exception>
            <exception cref="T:System.InvalidOperationException">xmlの書き込み失敗</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>の拡張子がサポートされていない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセス許可がない</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.ReadXML``1(System.String)">
            <summary>
            <see cref="T:System.Xml.Serialization.XmlSerializer"/>を用いたデータのロードを行う
            </summary>
            <param name="path">読み込むデータのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみで形成されている またはファイル特定の拡張子が使用されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>のディレクトリが見つからない</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.InvalidCastException">読み込んだデータを<typeparamref name="T"/>にキャストできない</exception>
            <exception cref="T:System.InvalidOperationException">xmlの読み込み失敗</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>の拡張子がサポートされていない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセス許可がない</exception>
            <returns>読み込まれたデータ</returns>
        </member>
        <member name="M:fslib.IO.IOHandler.PlaySound(System.String)">
            <summary>
            音声を流す。
            </summary>
            <param name="path">音声ファイルのパス</param>
        </member>
        <member name="M:fslib.IO.IOHandler.ReadBufferS(System.String)">
            <summary>
            <see cref="T:System.IO.FileStream"/>を用いてファイルを読み込み<see cref="T:System.Byte"/>配列を取得する
            </summary>
            <param name="path">開くファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字からなるまたは特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルパスが存在しない</exception>
            <exception cref="T:System.IO.IOException">I/O上のエラー</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>で指定されたファイルが特定の拡張子を持つ</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセスが拒否された</exception>
            <returns>読み込んだファイルのデータ</returns>
        </member>
        <member name="M:fslib.IO.IOHandler.ReadBufferA(System.String)">
            <summary>
            <see cref="T:asd.StaticFile"/>を用いてファイルを読み込み<see cref="T:System.Byte"/>配列を取得する
            </summary>
            <param name="path">開くファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字からなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.IOException">ファイルの読み込みに失敗した</exception>
            <returns>開かれたファイルのデータ</returns>
        </member>
        <member name="M:fslib.IO.IOHandler.WriteBuffer(System.String,System.Byte[])">
            <summary>
            <see cref="T:System.IO.FileStream"/>を用いて<see cref="T:System.Byte"/>配列のデータをファイルに書き込む
            </summary>
            <param name="path">開くファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字からなるまたは特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>または<paramref name="buffer"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException">I/O上のエラー</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>で指定されたファイルが特定の拡張子を持つ</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセスが拒否された</exception>
            <returns>読み込んだファイルのデータ</returns>
        </member>
        <member name="M:fslib.IO.IOHandler.BitmapToTexture(System.Drawing.Bitmap)">
            <summary>
            <see cref="T:System.Drawing.Bitmap"/>を<see cref="T:asd.Texture2D"/>に変換する
            </summary>
            <param name="texture">変換したい<see cref="T:System.Drawing.Bitmap"/>オブジェクト</param>
        </member>
        <member name="M:fslib.IO.IOHandler.GetTextures(System.String,fslib.EncodeOption,System.String,System.String,System.Char[])">
            <summary>
            <see cref="T:System.IO.StreamReader"/>を使ってテキストファイルからテキストを読み込み，名前をキー，<see cref="T:asd.Texture2D"/>を値とした<see cref="T:System.Collections.Generic.Dictionary`2"/>を返す。
            行ごとにコレクションの要素になる。
            </summary>
            <param name="path">読み込むファイル名</param>
            <param name="option">エンコードのオプション</param>
            <param name="pathDirectoryHead">ファイル名の前につけるディレクトリ部分。</param>
            <param name="fileExtension">ファイルの拡張子。設定しておくと自動的に末尾に追加された状態で処理される。</param>
            <param name="splitWords">テキストファイルのテキストを区切る文字</param>
            <exception cref="T:System.ArgumentException">filepathが空文字または指定エンコードが不正な値だった場合</exception>
            <exception cref="T:System.ArgumentNullException">filepathまたはpathDirectoryHead，fileExtensionがnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">ファイルのパスが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException">ファイルが見つからない</exception>
            <exception cref="T:System.FormatException">テキストファイルの書式が不正だった場合</exception>
            <exception cref="T:System.NotSupportedException">ファイルパスが不正な値だった場合</exception>
            <exception cref="T:System.OutOfMemoryException">メモリが不足している</exception>
            <exception cref="T:System.IO.IOException"><see cref="N:System.IO"/>上のエラー</exception>
        </member>
        <member name="M:fslib.IO.IOHandler.GetTextures(System.String,fslib.EncodeOption,System.String,System.String)">
            <summary>
            <see cref="T:System.IO.StreamReader"/>を使ってテキストファイルからテキストを読み込み，名前をキー，<see cref="T:asd.Texture2D"/>を値とした<see cref="T:System.Collections.Generic.Dictionary`2"/>を返す。
            行ごとにコレクションの要素になる。
            読み込んだテキストを','で分割処理する
            </summary>
            <param name="path">読み込むファイル名</param>
            <param name="option">エンコードのオプション</param>
            <param name="pathDirectoryHead">ファイル名の前につけるディレクトリ部分。</param>
            <param name="fileExtension">ファイルの拡張子。設定しておくと自動的に末尾に追加された状態で処理される。</param>
            <exception cref="T:System.ArgumentException">filepathが空文字または指定エンコードが不正な値だった場合</exception>
            <exception cref="T:System.ArgumentNullException">filepathまたはpathDirectoryHead，fileExtensionがnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">ファイルのパスが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException">ファイルが見つからない</exception>
            <exception cref="T:System.FormatException">テキストファイルの書式が不正だった場合</exception>
            <exception cref="T:System.NotSupportedException">ファイルパスが不正な値だった場合</exception>
            <exception cref="T:System.OutOfMemoryException">メモリが不足している</exception>
            <exception cref="T:System.IO.IOException"><see cref="N:System.IO"/>上のエラー</exception>
        </member>
        <member name="T:fslib.IO.FileData">
            <summary>
            byte配列を用いてデータをシリアライズするクラス
            </summary>
        </member>
        <member name="P:fslib.IO.FileData.Buffer">
            <summary>
            フォントデータを取得する
            </summary>
        </member>
        <member name="P:fslib.IO.FileData.IsDisposed">
            <summary>
            このオブジェクトが破棄されたかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.IO.FileData.Path">
            <summary>
            ファイルパスを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.IO.FileData.SeInfo">
            <summary>
            デシリアライズ時に渡されるデータを取得する
            </summary>
            <remarks>デシリアライズ終了時にnullが代入される</remarks>
        </member>
        <member name="M:fslib.IO.FileData.#ctor(System.String)">
            <summary>
            指定したパスからデータを読み込んでインスタンスを初期化する
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.IOException">ファイルが読み込めなかった</exception>
        </member>
        <member name="M:fslib.IO.FileData.#ctor(System.String,System.Byte[])">
            <summary>
            byte配列とファイルパスからインスタンスを初期化する
            </summary>
            <param name="path">ファイルパス</param>
            <param name="buffer">ファイルのデータ</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>または<paramref name="buffer"/>がnull</exception>
        </member>
        <member name="M:fslib.IO.FileData.#ctor(asd.StaticFile)">
            <summary>
            指定した<see cref="T:asd.StaticFile"/>からインスタンスを初期化する
            </summary>
            <param name="file">初期化に使用する<see cref="T:asd.StaticFile"/>のインスタンス</param>
            <exception cref="T:System.ArgumentException"><paramref name="file"/>の要素がnull</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/>がnull</exception>
        </member>
        <member name="M:fslib.IO.FileData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータを用いてインスタンスを初期化する
            </summary>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="M:fslib.IO.FileData.Clone">
            <summary>
            このインスタンスの複製を作成する
            </summary>
            <exception cref="T:System.ObjectDisposedException">このインスタンスが破棄されている</exception>
            <returns>このインスタンスの複製</returns>
        </member>
        <member name="M:fslib.IO.FileData.Equals(fslib.IO.FileData,fslib.IO.FileData)">
            <summary>
            指定した2つの<see cref="T:fslib.IO.FileData"/>の同一性を検証する
            </summary>
            <param name="f1">同一性を確かめる<see cref="T:fslib.IO.FileData"/>のインスタンス</param>
            <param name="f2">同一性を確かめる<see cref="T:fslib.IO.FileData"/>のもう一つのインスタンス</param>
            <returns>同一性が見られたときはtrue，それ以外でfalse</returns>
            <remarks>どちらかがullだったとき破棄されていた場合は即falseを返す</remarks>
        </member>
        <member name="M:fslib.IO.FileData.Equals(fslib.IO.FileData)">
            <summary>
            もう1つの<see cref="T:fslib.IO.FileData"/>との同値性を判定する
            </summary>
            <param name="other">同値性を判定するもう一つの<see cref="T:fslib.IO.FileData"/>のインスタンス</param>
            <returns>このインスタンスと<paramref name="other"/>が同値だったらtrue，それ以外でfalse</returns>
            <remarks>このインスタンス又は<paramref name="other"/>が破棄されている場合無条件でfalseを返す</remarks>
        </member>
        <member name="M:fslib.IO.FileData.Equals(System.Object)">
            <summary>
            指定したオブジェクトとの等価性を判定する
            </summary>
            <param name="obj">等価性を比較するオブジェクト</param>
            <returns><paramref name="obj"/>との間に等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.IO.FileData.GetHashCode">
            <summary>
            ハッシュコードを取得する
            </summary>
            <returns>このオブジェクトのハッシュコード</returns>
        </member>
        <member name="M:fslib.IO.FileData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズするデータを設定する
            </summary>
            <param name="info">シリアライズするデータを格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
            <exception cref="T:System.ObjectDisposedException">このインスタンスが破棄されている</exception>
        </member>
        <member name="M:fslib.IO.FileData.OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現在はサポートされていない 常にnullを返す</param>
        </member>
        <member name="M:fslib.IO.FileData.Dispose(System.Boolean)">
            <summary>
            このインスタンスを破棄する
            </summary>
            <param name="disposing">マネージソースも破棄するかどうか</param>
        </member>
        <member name="M:fslib.IO.FileData.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.IO.FileData.Save">
            <summary>
            指定したパスにデータを保存する
            </summary>
            <exception cref="T:System.ObjectDisposedException">このインスタンスが破棄されている</exception>
            <exception cref="T:System.Security.SecurityException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib.IO.FileData.Save(System.String)">
            <summary>
            指定したパスにデータを保存する
            </summary>
            <param name="path">保存するファイルパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空文字や特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>のディレクトリが存在しない</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>が特定の拡張子を持つ</exception>
            <exception cref="T:System.ObjectDisposedException">このインスタンスが破棄されている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib.IO.FileData.ThrowIfDisposed">
            <summary>
            このインスタンスが破棄されているときに<see cref="T:System.ObjectDisposedException"/>をスローする
            </summary>
        </member>
        <member name="T:fslib.IUIObject">
            <summary>
            UIのオブジェクトを表す
            </summary>
        </member>
        <member name="T:fslib.IClickableObject">
            <summary>
            クリック可能なオブジェクトを表す。
            </summary>
        </member>
        <member name="P:fslib.IClickableObject.IsClickable">
            <summary>
            クリック可能かどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.IClickableObject.Size">
            <summary>
            テキストの大きさを取得する
            </summary>
        </member>
        <member name="P:fslib.IClickableObject.MouseCursorTouch">
            <summary>
            マウスが当たっているかを取得する
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnCursorEnter">
            <summary>
            マウスが当たったときに実行
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnCursorStay">
            <summary>
            マウスが当たっている時に実行
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnCursorExit">
            <summary>
            マウスが外れたに実行
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnLeftPushed">
            <summary>
            左クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnLeftHolded">
            <summary>
            左クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnLeftReleased">
            <summary>
            左クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnMiddlePushed">
            <summary>
            中央クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnMiddleHolded">
            <summary>
            中央クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnMiddleReleased">
            <summary>
            中央クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnRightPushed">
            <summary>
            右クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnRightHolded">
            <summary>
            右クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnRightReleased">
            <summary>
            右クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnWheelUpped">
            <summary>
            ホイールを上に動かしたときに実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.IClickableObject.OnWheelDowned">
            <summary>
            ホイールを下に動かしたときに実行されるメソッド
            </summary>
        </member>
        <member name="T:fslib.ListenerCollection">
            <summary>
            <see cref="T:System.Diagnostics.TraceListener"/>のコレクション
            </summary>
        </member>
        <member name="P:fslib.ListenerCollection.Capacity">
            <summary>
            格納できる要素数を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が<see cref="P:fslib.ListenerCollection.Count"/>未満</exception>
        </member>
        <member name="P:fslib.ListenerCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.ListenerCollection.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentException">設定しようとした値が既に格納されている</exception>
            <exception cref="T:System.ArgumentNullException">設定しようとした値がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.ListenerCollection.Count"/>以上</exception>
            <returns><paramref name="index"/>に該当する要素</returns>
        </member>
        <member name="P:fslib.ListenerCollection.Item(System.String)">
            <summary>
            指定した名前を持つ要素のうち最初の物の要素を取得する
            </summary>
            <param name="name">検索するリスナーの名前</param>
            <returns><paramref name="name"/>を持つリスナーのうち最初のもの 無かったらnull</returns>
        </member>
        <member name="M:fslib.ListenerCollection.Add(System.Diagnostics.TraceListener)">
            <summary>
            指定したリスナーを追加する
            </summary>
            <param name="listener">追加するリスナー</param>
            <exception cref="T:System.ArgumentException"><paramref name="listener"/>が既に格納されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="listener"/>がnull</exception>
        </member>
        <member name="M:fslib.ListenerCollection.Clear">
            <summary>
            格納されている要素をすべて削除する
            </summary>
        </member>
        <member name="M:fslib.ListenerCollection.Contains(System.Diagnostics.TraceListener)">
            <summary>
            指定したリスナーが含まれているかどうかを返す
            </summary>
            <param name="listener">検索するリスナー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listener"/>がnull</exception>
            <returns><paramref name="listener"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.ListenerCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体の新しいインスタンスを生成する
            </summary>
            <returns><see cref="T:fslib.ListenerCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.ListenerCollection.IndexOf(System.Diagnostics.TraceListener)">
            <summary>
            指定したリスナーのインデックスを検索する
            </summary>
            <param name="listener">検索するリスナー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listener"/>がnull</exception>
            <returns><paramref name="listener"/>に該当するインデックス</returns>
        </member>
        <member name="M:fslib.ListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)">
            <summary>
            指定したインデックスにリスナーを挿入する
            </summary>
            <param name="index">挿入するインデックス</param>
            <param name="listener">挿入するリスナー</param>
            <exception cref="T:System.ArgumentException"><paramref name="listener"/>が既に格納されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="listener"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.ListenerCollection.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib.ListenerCollection.Remove(System.Diagnostics.TraceListener)">
            <summary>
            指定したリスナーを削除する
            </summary>
            <param name="listener">削除するリスナー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listener"/>がnull</exception>
            <returns><paramref name="listener"/>を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ListenerCollection.Remove(System.String)">
            <summary>
            指定した名前を持つリスナーのうち最初のものを削除する
            </summary>
            <param name="name">削除するリスナーの名前</param>
            <returns><paramref name="name"/>を持つ要素を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.ListenerCollection.RemoveAt(System.Int32)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib.ListenerCollection.Count"/>以上</exception>
        </member>
        <member name="T:fslib.ListenerCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib.ListenerCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib.ListenerCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.ListenerCollection.Enumerator.MoveNext">
            <summary>
            列挙を次の要素に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>次の要素に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Logger">
            <summary>
            ロガーのクラス
            </summary>
        </member>
        <member name="P:fslib.Logger.Buffer">
            <summary>
            現在バッファーに溜められている文字列を取得する
            </summary>
        </member>
        <member name="P:fslib.Logger.Listeners">
            <summary>
            リスナーのコレクション
            </summary>
        </member>
        <member name="P:fslib.Logger.LogFileName">
            <summary>
            出力先のファイル名を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Logger.Out">
            <summary>
            出力先を取得する
            </summary>
        </member>
        <member name="P:fslib.Logger.OutPutToFile">
            <summary>
            <see cref="P:fslib.Logger.LogFileName"/>のファイルへ出力するかどうかを取得または設定する
            </summary>
        </member>
        <member name="M:fslib.Logger.Flush">
            <summary>
            バッファーに溜められた文字列を全て出力する
            </summary>
        </member>
        <member name="M:fslib.Logger.Write(System.Char)">
            <summary>
            指定した文字を出力する
            </summary>
            <param name="value">出力する文字</param>
        </member>
        <member name="M:fslib.Logger.Write(System.Int32)">
            <summary>
            指定した値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.Write(System.UInt32)">
            <summary>
            指定した値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.Write(System.Int64)">
            <summary>
            指定した値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.Write(System.UInt64)">
            <summary>
            指定した値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.Write(System.Single)">
            <summary>
            指定した値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.Write(System.Double)">
            <summary>
            指定した値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.Write(System.Decimal)">
            <summary>
            指定した値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.Write(System.Boolean)">
            <summary>
            指定した真偽値を出力する
            </summary>
            <param name="value">出力する真偽値</param>
        </member>
        <member name="M:fslib.Logger.Write(System.Object)">
            <summary>
            指定したオブジェクトの値を出力する
            </summary>
            <param name="value">出力するオブジェクトの値</param>
        </member>
        <member name="M:fslib.Logger.Write(System.Char[])">
            <summary>
            指定した文字列を出力する
            </summary>
            <param name="buffer">出力列する文字列</param>
        </member>
        <member name="M:fslib.Logger.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            指定した文字列の一部分を出力する
            </summary>
            <param name="buffer">出力列する文字列</param>
            <param name="index"><paramref name="buffer"/>における出力開始文字のインデックス</param>
            <param name="count">出力する文字数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/>または<paramref name="index"/>の値が不正</exception>
        </member>
        <member name="M:fslib.Logger.Write(System.String)">
            <summary>
            指定した文字列を出力する
            </summary>
            <param name="value">出力列する文字列</param>
        </member>
        <member name="M:fslib.Logger.Write(System.String,System.Object)">
            <summary>
            指定したフォーマットで文字列を出力する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.Write(System.String,System.Object,System.Object)">
            <summary>
            指定したフォーマットで文字列を出力する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg0">フォーマットに使用する引数</param>
            <param name="arg1">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            指定したフォーマットで文字列を出力する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg0">フォーマットに使用する引数</param>
            <param name="arg1">フォーマットに使用する引数</param>
            <param name="arg2">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.Write(System.String,System.Object[])">
            <summary>
            指定したフォーマットで文字列を出力する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="args">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>または<paramref name="args"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.Char)">
            <summary>
            指定した文字をバッファーに追加する
            </summary>
            <param name="value">出力する文字</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.Int32)">
            <summary>
            指定した値をバッファーに追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.UInt32)">
            <summary>
            指定した値をバッファーに追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.Int64)">
            <summary>
            指定した値をバッファーに追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.UInt64)">
            <summary>
            指定した値をバッファーに追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.Single)">
            <summary>
            指定した値をバッファーに追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.Double)">
            <summary>
            指定した値をバッファーに追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.Decimal)">
            <summary>
            指定した値をバッファーに追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.Boolean)">
            <summary>
            指定した真偽値をバッファーに追加する
            </summary>
            <param name="value">出力する真偽値</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.Object)">
            <summary>
            指定したオブジェクトの値をバッファーに追加する
            </summary>
            <param name="value">出力するオブジェクトの値</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.Char[])">
            <summary>
            指定した文字列をバッファーに追加する
            </summary>
            <param name="buffer">出力列する文字列</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.Char[],System.Int32,System.Int32)">
            <summary>
            指定した文字列の一部分をバッファーに追加する
            </summary>
            <param name="buffer">出力列する文字列</param>
            <param name="index"><paramref name="buffer"/>における出力開始文字のインデックス</param>
            <param name="count">出力する文字数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/>または<paramref name="index"/>の値が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.String)">
            <summary>
            指定した文字列をバッファーに追加する
            </summary>
            <param name="value">出力列する文字列</param>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.String,System.Object)">
            <summary>
            指定したフォーマットで文字列をバッファーに追加する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.String,System.Object,System.Object)">
            <summary>
            指定したフォーマットで文字列をバッファーに追加する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg0">フォーマットに使用する引数</param>
            <param name="arg1">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.String,System.Object,System.Object,System.Object)">
            <summary>
            指定したフォーマットで文字列をバッファーに追加する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg0">フォーマットに使用する引数</param>
            <param name="arg1">フォーマットに使用する引数</param>
            <param name="arg2">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteBuffer(System.String,System.Object[])">
            <summary>
            指定したフォーマットで文字列をバッファーに追加する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="args">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>または<paramref name="args"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.Char)">
            <summary>
            指定した文字を出力し改行する
            </summary>
            <param name="value">出力する文字</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.Int32)">
            <summary>
            指定した値を出力し改行する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.UInt32)">
            <summary>
            指定した値を出力し改行する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.Int64)">
            <summary>
            指定した値を出力し改行する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.UInt64)">
            <summary>
            指定した値を出力し改行する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.Single)">
            <summary>
            指定した値を出力し改行する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.Double)">
            <summary>
            指定した値を出力し改行する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.Decimal)">
            <summary>
            指定した値を出力し改行する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.Boolean)">
            <summary>
            指定した真偽値を出力し改行する
            </summary>
            <param name="value">出力する真偽値</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.Object)">
            <summary>
            指定したオブジェクトの値を出力し改行する
            </summary>
            <param name="value">出力するオブジェクトの値</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.Char[])">
            <summary>
            指定した文字列を出力し改行する
            </summary>
            <param name="buffer">出力列する文字列</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            指定した文字列の一部分を出力し改行する
            </summary>
            <param name="buffer">出力列する文字列</param>
            <param name="index"><paramref name="buffer"/>における出力開始文字のインデックス</param>
            <param name="count">出力する文字数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/>または<paramref name="index"/>の値が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.String)">
            <summary>
            指定した文字列を出力し改行する
            </summary>
            <param name="value">出力列する文字列</param>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.String,System.Object)">
            <summary>
            指定したフォーマットで文字列を出力し改行する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            指定したフォーマットで文字列を出力し改行する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg0">フォーマットに使用する引数</param>
            <param name="arg1">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            指定したフォーマットで文字列を出力し改行する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg0">フォーマットに使用する引数</param>
            <param name="arg1">フォーマットに使用する引数</param>
            <param name="arg2">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteLine(System.String,System.Object[])">
            <summary>
            指定したフォーマットで文字列を出力し改行する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="args">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>または<paramref name="args"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.Char)">
            <summary>
            指定した文字をバッファーに改行して追加する
            </summary>
            <param name="value">出力する文字</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.Int32)">
            <summary>
            指定した値をバッファーに改行して追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.UInt32)">
            <summary>
            指定した値をバッファーに改行して追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.Int64)">
            <summary>
            指定した値をバッファーに改行して追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.UInt64)">
            <summary>
            指定した値をバッファーに改行して追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.Single)">
            <summary>
            指定した値をバッファーに改行して追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.Double)">
            <summary>
            指定した値をバッファーに改行して追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.Decimal)">
            <summary>
            指定した値をバッファーに改行して追加する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.Boolean)">
            <summary>
            指定した真偽値をバッファーに改行して追加する
            </summary>
            <param name="value">出力する真偽値</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.Object)">
            <summary>
            指定したオブジェクトの値をバッファーに改行して追加する
            </summary>
            <param name="value">出力するオブジェクトの値</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.Char[])">
            <summary>
            指定した文字列をバッファーに改行して追加する
            </summary>
            <param name="buffer">出力列する文字列</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.Char[],System.Int32,System.Int32)">
            <summary>
            指定した文字列の一部分をバッファーに改行して追加する
            </summary>
            <param name="buffer">出力列する文字列</param>
            <param name="index"><paramref name="buffer"/>における出力開始文字のインデックス</param>
            <param name="count">出力する文字数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/>または<paramref name="index"/>の値が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.String)">
            <summary>
            指定した文字列をバッファーに改行して追加する
            </summary>
            <param name="value">出力列する文字列</param>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.String,System.Object)">
            <summary>
            指定したフォーマットで文字列をバッファーに改行して追加する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.String,System.Object,System.Object)">
            <summary>
            指定したフォーマットで文字列をバッファーに改行して追加する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg0">フォーマットに使用する引数</param>
            <param name="arg1">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.String,System.Object,System.Object,System.Object)">
            <summary>
            指定したフォーマットで文字列をバッファーに改行して追加する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="arg0">フォーマットに使用する引数</param>
            <param name="arg1">フォーマットに使用する引数</param>
            <param name="arg2">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="M:fslib.Logger.WriteLineBuffer(System.String,System.Object[])">
            <summary>
            指定したフォーマットで文字列をバッファーに改行して追加する
            </summary>
            <param name="format">出力列する文字列</param>
            <param name="args">フォーマットに使用する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>または<paramref name="args"/>がnull</exception>
            <exception cref="T:System.FormatException">入力形式が不正</exception>
        </member>
        <member name="T:fslib.Resource">
            <summary>
              ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
            </summary>
        </member>
        <member name="P:fslib.Resource.ResourceManager">
            <summary>
              このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
            </summary>
        </member>
        <member name="P:fslib.Resource.Culture">
            <summary>
              すべてについて、現在のスレッドの CurrentUICulture プロパティをオーバーライドします
              現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
            </summary>
        </member>
        <member name="P:fslib.Resource.Window">
            <summary>
              型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
            </summary>
        </member>
        <member name="M:fslib.Serialization.DataPackage.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="P:fslib.Serialization.DataPackage.Item(System.String)">
            <summary>
            指定した名前に結びつけられた値を取得または設定する
            </summary>
            <param name="name">呼び出す値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <exception cref="T:System.InvalidOperationException">値の呼び出しに失敗した</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.SByte)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.Byte)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.Int16)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.UInt16)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.Int32)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.UInt32)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.Int64)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.UInt64)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.Single)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.Double)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.Decimal)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.Char)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.Boolean)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.DateTime)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.String)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValue(System.String,System.Object)">
            <summary>
            値を追加する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:fslib.Exception.KeyDuplicateException"><paramref name="name"/>が重複する</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetSByte(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetByte(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetShort(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetUShort(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetInt(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetUInt(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetLong(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetULong(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetSingle(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetDouble(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetDecimal(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetChar(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetString(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetObject(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetValue``1(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidCastException"><typeparamref name="T"/>への変換に失敗した</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetDateTime(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetBoolean(System.String)">
            <summary>
            値を取得する
            </summary>
            <param name="name">取得する値の名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取り出しに失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>に結びつけられた値</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns>列挙をサポートする構造体の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.SByte)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.Byte)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.Int16)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.UInt16)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.Int32)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.UInt32)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.Int64)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.UInt64)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.Single)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.Double)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.Decimal)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.Char)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.String)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.Boolean)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.SetValue(System.String,System.Object)">
            <summary>
            値を設定する
            </summary>
            <param name="name">追加する値の名前</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">値の取得に失敗した</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/>が存在しない</exception>
        </member>
        <member name="M:fslib.Serialization.DataPackage.AddValues(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            指定された<see cref="T:System.Runtime.Serialization.SerializationInfo"/>に登録された値全てを追加する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
            <param name="info">登録先の<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.DataPackage.ContainsKey(System.String)">
            <summary>
            指定した名前が使用されているかどうかを返す
            </summary>
            <param name="name">検索する名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <returns><paramref name="name"/>が使用されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableCameraObject2D">
            <summary>
            <see cref="T:asd.CameraObject2D"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableCameraObject2D.SeInfo">
            <summary>
            逆シリアル化に用いる<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンスを取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableCameraObject2D.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableCameraObject2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableCameraObject2D"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableCameraObject2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableCameraObject2D.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="T:fslib.Serialization.SerializableClickableTexture">
            <summary>
            <see cref="T:fslib.ClickableTexture"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.#ctor">
            <summary>
            既定のテクスチャと座標をもつ<see cref="T:fslib.Serialization.SerializableClickableTexture"/>のインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.#ctor(fslib.Serialization.SerializableTexture)">
            <summary>
            指定したテクスチャと既定の座標をもつ<see cref="T:fslib.Serialization.SerializableClickableTexture"/>のインスタンスを生成する
            </summary>
            <param name="texture">設定するテクスチャ</param>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.#ctor(fslib.Serialization.SerializableTexture,asd.Vector2DF)">
            <summary>
            指定したテクスチャと座標をもつ<see cref="T:fslib.Serialization.SerializableClickableTexture"/>のインスタンスを生成する
            </summary>
            <param name="texture">設定するテクスチャ</param>
            <param name="position">座標</param>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableClickableTexture"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="F:fslib.Serialization.SerializableClickableTexture._iscollide">
            <summary>
            マウスの衝突判定用フィールド
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.IsClickable">
            <summary>
            クリック可能かどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.MouseCursorTouch">
            <summary>
            マウスが当たっているかを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.LeftPush">
            <summary>
            左クリックされたかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.LeftHold">
            <summary>
            左クリックされているかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.LeftRelease">
            <summary>
            左クリックが開放されたかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.MiddlePush">
            <summary>
            中央ボタンが押されたかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.MiddleHold">
            <summary>
            中央ボタンが押されているかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.MiddleRelease">
            <summary>
            中央ボタンが開放されたかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.RightPush">
            <summary>
            右クリックされたかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.RightHold">
            <summary>
            右クリックされているかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableTexture.RightRelease">
            <summary>
            右クリックが開放されたかを取得
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.MouseUpdate">
            <summary>
            <c>OnUpdate</c>メソッドに乗っける事。
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnCursorEnter">
            <summary>
            マウスが当たったときに実行
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnCursorStay">
            <summary>
            マウスが当たっている時に実行
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnCursorExit">
            <summary>
            マウスが外れたに実行
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnLeftPushed">
            <summary>
            左クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnLeftHolded">
            <summary>
            左クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnLeftReleased">
            <summary>
            左クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnMiddlePushed">
            <summary>
            中央クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnMiddleHolded">
            <summary>
            中央クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnMiddleReleased">
            <summary>
            中央クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnRightPushed">
            <summary>
            右クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnRightHolded">
            <summary>
            右クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnRightReleased">
            <summary>
            右クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnWheelUpped">
            <summary>
            ホイールを上に動かしたときに実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.OnWheelDowned">
            <summary>
            ホイールを下に動かしたときに実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.IsCollide">
            <summary>
            マウスカーソルと当たってるかどうかを返す。
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableTexture.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableEffect">
            <summary>
            <see cref="T:asd.Effect"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableEffect.#ctor(System.String)">
            <summary>
            指定したパスのファイルからエフェクトを読み込んで<see cref="T:fslib.Serialization.SerializableEffect"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">読み込むエフェクトのファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみで構成されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.IOException">エフェクトの読み込みに失敗した</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableEffect.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableEffect.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Serialization.SerializableEffect.Save(System.String)">
            <summary>
            指定したパスに画像を保存する
            </summary>
            <param name="path">保存するパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字だけからなる ファイルが特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>のディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException">IO時のエラー</exception>
            <exception cref="T:System.NotSupportedException">ファイルの拡張子がサポートされていない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセス許可がない</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableEffectObject2D">
            <summary>
            <see cref="T:asd.EffectObject2D"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableEffectObject2D.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableEffectObject2D.#ctor(fslib.Serialization.SerializableEffect)">
            <summary>
            指定したエフェクトを用いて<see cref="T:fslib.Serialization.SerializableEffectObject2D"/>の新しいインスタンスを生成する
            </summary>
            <param name="effect">設定するエフェクト</param>
        </member>
        <member name="M:fslib.Serialization.SerializableEffectObject2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableEffectObject2D"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableEffectObject2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableEffectObject3D">
            <summary>
            <see cref="T:asd.EffectObject3D"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableEffectObject3D.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableEffectObject3D.#ctor(fslib.Serialization.SerializableEffect)">
            <summary>
            指定したエフェクトを用いて<see cref="T:fslib.Serialization.SerializableEffectObject3D"/>の新しいインスタンスを生成する
            </summary>
            <param name="effect">設定するエフェクト</param>
        </member>
        <member name="M:fslib.Serialization.SerializableEffectObject3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableEffectObject3D"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableEffectObject3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableGeometryObject2D">
            <summary>
            <see cref="T:asd.GeometryObject2D"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableGeometryObject2D.Shape">
            <summary>
            描画に使用する図形の情報を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableGeometryObject2D.Texture">
            <summary>
            描画するテクスチャを取得または設定する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableGeometryObject2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableGeometryObject2D"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableGeometryObject2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableMapObject2D">
            <summary>
            <see cref="T:asd.MapObject2D"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.Angle">
            <summary>
            描画時の回転角度を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.CameraGroup">
            <summary>
            カメラに表示するグループを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.CenterPosition">
            <summary>
            描画時の原点を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.Chips">
            <summary>
            <see cref="T:asd.Chip2D"/>を管理するリストを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.DrawingPriority">
            <summary>
            描画優先度を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.IsDrawn">
            <summary>
            このオブジェクトが描画されるかどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.IsReleased">
            <summary>
            メモリから解放されているかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.IsUpdated">
            <summary>
            このオブジェクトが更新されるかどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.Position">
            <summary>
            座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.UpdatePriority">
            <summary>
            更新の優先度を取得または設定する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.#ctor">
            <summary>
            既定の<see cref="T:asd.MapObject2D"/>を用いて<see cref="T:fslib.Serialization.SerializableMapObject2D"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.#ctor(asd.MapObject2D)">
            <summary>
            指定した<see cref="T:asd.MapObject2D"/>を用いて<see cref="T:fslib.Serialization.SerializableMapObject2D"/>の新しいインスタンスを生成する
            </summary>
            <param name="mapObject">設定する<see cref="T:asd.MapObject2D"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapObject"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableMapObject2D"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.AddChip(asd.Chip2D)">
            <summary>
            指定した<see cref="T:asd.Chip2D"/>を追加する
            </summary>
            <param name="chip">追加する<see cref="T:asd.Chip2D"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="chip"/>がnull</exception>
            <returns>追加されたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.Clear">
            <summary>
            登録されている全てのチップを削除する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.ForceToRelease">
            <summary>
            強制的に使用しているメモリを開放する
            </summary>
            <remarks>参照が残っていないかどうか注意すること</remarks>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.RemoveChip(asd.Chip2D)">
            <summary>
            指定した<see cref="T:asd.Chip2D"/>を削除する
            </summary>
            <param name="chip">削除する<see cref="T:asd.Chip2D"/>のインスタンス</param>
            <returns>削除できたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableMapObject2D.ChipList">
            <summary>
            <see cref="T:asd.Chip2D"/>を格納できる<see cref="T:System.Collections.Generic.IList`1"/>の実装
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.ChipList.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.ChipList.Master">
            <summary>
            このインスタンスを管理する<see cref="T:asd.MapObject2D"/>を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMapObject2D.ChipList.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentNullException">設定しようとした値がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>指定範囲外</exception>
            <returns><paramref name="index"/>を持つ要素</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.ChipList.Contains(asd.Chip2D)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns>格納されていたらtrue，それ例外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.ChipList.CopyTo(asd.Chip2D[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.ChipList.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.ChipList.IndexOf(asd.Chip2D)">
            <summary>
            指定した要素の持つインデックスを返す
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>に割り当てられたインデックス 見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableMapObject2D.ChipList.ToArray">
            <summary>
            このインスタンスのコピーを格納する配列を返す
            </summary>
            <returns>このインスタンスのコピーを格納する配列</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableChip2D">
            <summary>
            <see cref="T:asd.Chip2D"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.AlphaBlendMode">
            <summary>
            アルファブレンドの種類を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.Angle">
            <summary>
            描画時の回転角度を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.CenterPosition">
            <summary>
            描画時の原点を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.Color">
            <summary>
            色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.DrawingPriority">
            <summary>
            描画優先度を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.IsReleased">
            <summary>
            メモリから解放されているかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.Position">
            <summary>
            座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.Scale">
            <summary>
            拡大率を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.Src">
            <summary>
            テクスチャの表示する範囲を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.Texture">
            <summary>
            描画するテクスチャを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.TextureFilterType">
            <summary>
            テクスチャの描画方法を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.TurnLR">
            <summary>
            左右を反転するかどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableChip2D.TurnUL">
            <summary>
            上下を反転するかどうかを取得または設定する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableChip2D.#ctor">
            <summary>
            既定の<see cref="T:asd.Chip2D"/>を用いtえ<see cref="T:fslib.Serialization.SerializableChip2D"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableChip2D.#ctor(asd.Chip2D)">
            <summary>
            指定された<see cref="T:asd.Chip2D"/>を用いて<see cref="T:fslib.Serialization.SerializableChip2D"/>の新しいインスタンスを生成する
            </summary>
            <param name="chip">設定するチップ</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="chip"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableChip2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableChip2D"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableChip2D.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableChip2D.ForceToRelease">
            <summary>
            強制的に使用しているメモリを開放する
            </summary>
            <remarks>参照が残っていないかどうか注意すること</remarks>
        </member>
        <member name="M:fslib.Serialization.SerializableChip2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableChip2D.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="T:fslib.Serialization.SerializableMaterial2D">
            <summary>
            <see cref="T:asd.Material2D"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMaterial2D.IsReleased">
            <summary>
            メモリから解放されているかどうかを取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial2D.#ctor(fslib.Serialization.SerializableShader2D)">
            <summary>
            指定したシェーダーを用いて<see cref="T:fslib.Serialization.SerializableMaterial2D"/>の新しいインスタンスを生成する
            </summary>
            <param name="shader2D">初期化に使用するシェーダー</param>
            <exception cref="T:System.ArgumentException">マテリアルの生成に失敗した</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="shader2D"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial2D.#ctor(System.String)">
            <summary>
            指定したコードを用いてシェーダーとマテリアルを生成して<see cref="T:fslib.Serialization.SerializableMaterial2D"/>の新しいインスタンスを生成する
            </summary>
            <param name="shaderText">シェーダーのコード</param>
            <exception cref="T:System.ArgumentException">シェーダーまたはマテリアルの初期化に失敗した</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="shaderText"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableMaterial2D"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial2D.ForceToRelease">
            <summary>
            強制的に使用しているメモリを開放する
            </summary>
            <remarks>参照が残っていないかどうか注意すること</remarks>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial2D.GetValue``1(System.String)">
            <summary>
            シェーダー内の指定された要素を取得する
            </summary>
            <typeparam name="T">取得する値の型 <see cref="T:System.Single"/>，<see cref="T:asd.Shader2D"/>，<see cref="T:asd.Texture2D"/>，<see cref="T:asd.TextureFilterType"/>，<see cref="T:asd.TextureWrapType"/>，<see cref="T:asd.Vector2DF"/>，<see cref="T:asd.Vector3DF"/>，<see cref="T:asd.Vector4DF"/>のいずれか</typeparam>
            <param name="name">取り出す要素の名前</param>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/>のタイプが不正</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <returns><paramref name="name"/>をもつ型が<typeparamref name="T"/>の要素</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial2D.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial2D.SetValue``1(System.String,``0)">
            <summary>
            シェーダー内の指定された要素を設定する
            </summary>
            <typeparam name="T">設定する値の型 <see cref="T:System.Single"/>，<see cref="T:asd.Shader2D"/>，<see cref="T:asd.Texture2D"/>，<see cref="T:asd.TextureFilterType"/>，<see cref="T:asd.TextureWrapType"/>，<see cref="T:asd.Vector2DF"/>，<see cref="T:asd.Vector3DF"/>，<see cref="T:asd.Vector4DF"/>のいずれか</typeparam>
            <param name="name">設定する要素の名前</param>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/>のタイプが不正</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableMaterial3D">
            <summary>
            <see cref="T:asd.Material3D"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableMaterial3D.IsReleased">
            <summary>
            メモリから解放されているかどうかを取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial3D.#ctor(fslib.Serialization.SerializableShader3D)">
            <summary>
            指定したシェーダーを用いて<see cref="T:fslib.Serialization.SerializableMaterial3D"/>の新しいインスタンスを生成する
            </summary>
            <param name="shader3D">初期化に使用するシェーダー</param>
            <exception cref="T:System.ArgumentException">マテリアルの生成に失敗した</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="shader3D"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial3D.#ctor(System.String)">
            <summary>
            指定したコードを用いてシェーダーとマテリアルを生成して<see cref="T:fslib.Serialization.SerializableMaterial3D"/>の新しいインスタンスを生成する
            </summary>
            <param name="shaderText">シェーダーのコード</param>
            <exception cref="T:System.ArgumentException">シェーダーまたはマテリアルの初期化に失敗した</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="shaderText"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableMaterial3D"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial3D.ForceToRelease">
            <summary>
            強制的に使用しているメモリを開放する
            </summary>
            <remarks>参照が残っていないかどうか注意すること</remarks>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial3D.GetValue``1(System.String)">
            <summary>
            シェーダー内の指定された要素を取得する
            </summary>
            <typeparam name="T">取得する値の型 <see cref="T:System.Single"/>，<see cref="T:asd.Shader3D"/>，<see cref="T:asd.Texture2D"/>，<see cref="T:asd.TextureFilterType"/>，<see cref="T:asd.TextureWrapType"/>，<see cref="T:asd.Vector3DF"/>，<see cref="T:asd.Vector3DF"/>，<see cref="T:asd.Vector4DF"/>のいずれか</typeparam>
            <param name="name">取り出す要素の名前</param>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/>のタイプが不正</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
            <returns><paramref name="name"/>をもつ型が<typeparamref name="T"/>の要素</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial3D.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Serialization.SerializableMaterial3D.SetValue``1(System.String,``0)">
            <summary>
            シェーダー内の指定された要素を設定する
            </summary>
            <typeparam name="T">設定する値の型 <see cref="T:System.Single"/>，<see cref="T:asd.Shader3D"/>，<see cref="T:asd.Texture2D"/>，<see cref="T:asd.TextureFilterType"/>，<see cref="T:asd.TextureWrapType"/>，<see cref="T:asd.Vector3DF"/>，<see cref="T:asd.Vector3DF"/>，<see cref="T:asd.Vector4DF"/>のいずれか</typeparam>
            <param name="name">設定する要素の名前</param>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/>のタイプが不正</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableRectF">
            <summary>
            <see cref="T:asd.RectF"/>と互換性があるシリアライズ可能な構造体
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectF.X">
            <summary>
            左上のX座標を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectF.Y">
            <summary>
            左上のY座標を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectF.Width">
            <summary>
            横幅を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectF.Height">
            <summary>
            縦幅を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectF.Position">
            <summary>
            左上の座標を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectF.Size">
            <summary>
            縦横の大きさを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectF.Vertexes">
            <summary>
            四隅の座標を左上，右上，右下，左下の順に配列として取得する。
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableRectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">左上のX座標</param>
            <param name="y">左上のY座標</param>
            <param name="width">横幅</param>
            <param name="height">縦幅</param>
        </member>
        <member name="M:fslib.Serialization.SerializableRectF.#ctor(fslib.Serialization.SerializableVector2DF,fslib.Serialization.SerializableVector2DF)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">左上の座標</param>
            <param name="size">縦横の大きさ</param>
        </member>
        <member name="M:fslib.Serialization.SerializableRectF.#ctor(asd.Vector2DF,asd.Vector2DF)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">左上の座標</param>
            <param name="size">縦横の大きさ</param>
        </member>
        <member name="M:fslib.Serialization.SerializableRectF.Equals(fslib.Serialization.SerializableRectF)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableRectF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="other">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableRectF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableRectF.Equals(fslib.Serialization.SerializableRectF,asd.RectF)">
            <summary>
            <see cref="T:fslib.Serialization.SerializableRectF"/>と<see cref="T:asd.RectF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="serializable">同値性を調べる<see cref="T:fslib.Serialization.SerializableRectF"/>のインスタンス</param>
            <param name="normal">同値性を調べるもう一つの<see cref="T:asd.RectF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableRectF.Equals(fslib.Serialization.SerializableRectF,fslib.Serialization.SerializableRectF)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableRectF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="rect1">同値性を調べる<see cref="T:fslib.Serialization.SerializableRectF"/>のインスタンス</param>
            <param name="rect2">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableRectF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableRectF.Equals(System.Object)">
            <summary>
            このインスタンスと指定したオブジェクトが等しいかどうか判定する
            </summary>
            <param name="obj">判定する<see cref="T:System.Object"/>のインスタンス</param>
            <returns>等しかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableRectF.GetHashCode">
            <summary>
            このインスタンスのハッシュコードを返す
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableRectF.ToI">
            <summary>
            このインスタンスと同じ値を持つ<see cref="T:fslib.Serialization.SerializableRectI"/>を返す
            </summary>
            <returns>このインスタンスと同じ値を持つ<see cref="T:fslib.Serialization.SerializableRectI"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableRectI">
            <summary>
            <see cref="T:asd.RectI"/>と互換性があるシリアライズ可能な構造体
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectI.X">
            <summary>
            左上のX座標を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectI.Y">
            <summary>
            左上のY座標を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectI.Width">
            <summary>
            横幅を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectI.Height">
            <summary>
            縦幅を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectI.Position">
            <summary>
            左上の座標を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectI.Size">
            <summary>
            縦横の大きさを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableRectI.Vertexes">
            <summary>
            四隅の座標を左上，右上，右下，左下の順に配列として取得する。
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableRectI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">左上のX座標</param>
            <param name="y">左上のY座標</param>
            <param name="width">横幅</param>
            <param name="height">縦幅</param>
        </member>
        <member name="M:fslib.Serialization.SerializableRectI.#ctor(fslib.Serialization.SerializableVector2DI,fslib.Serialization.SerializableVector2DI)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">左上の座標</param>
            <param name="size">縦横の大きさ</param>
        </member>
        <member name="M:fslib.Serialization.SerializableRectI.#ctor(asd.Vector2DI,asd.Vector2DI)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">左上の座標</param>
            <param name="size">縦横の大きさ</param>
        </member>
        <member name="M:fslib.Serialization.SerializableRectI.Equals(fslib.Serialization.SerializableRectI)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableRectI"/>間に同値性があるかどうかを返す
            </summary>
            <param name="other">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableRectI"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableRectI.Equals(fslib.Serialization.SerializableRectI,asd.RectI)">
            <summary>
            <see cref="T:fslib.Serialization.SerializableRectI"/>と<see cref="T:asd.RectI"/>間に同値性があるかどうかを返す
            </summary>
            <param name="serializable">同値性を調べる<see cref="T:fslib.Serialization.SerializableRectI"/>のインスタンス</param>
            <param name="normal">同値性を調べるもう一つの<see cref="T:asd.RectI"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableRectI.Equals(fslib.Serialization.SerializableRectI,fslib.Serialization.SerializableRectI)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableRectI"/>間に同値性があるかどうかを返す
            </summary>
            <param name="rect1">同値性を調べる<see cref="T:fslib.Serialization.SerializableRectI"/>のインスタンス</param>
            <param name="rect2">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableRectI"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableRectI.Equals(System.Object)">
            <summary>
            このインスタンスと指定したオブジェクトが等しいかどうか判定する
            </summary>
            <param name="obj">判定する<see cref="T:System.Object"/>のインスタンス</param>
            <returns>等しかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableRectI.GetHashCode">
            <summary>
            このインスタンスのハッシュコードを返す
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableRectI.ToF">
            <summary>
            このインスタンスと同じ値を持つ<see cref="T:fslib.Serialization.SerializableRectF"/>を返す
            </summary>
            <returns>このインスタンスと同じ値を持つ<see cref="T:fslib.Serialization.SerializableRectF"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableFont">
            <summary>
            <see cref="F:fslib.Serialization.SerializableFont._font"/>と互換性があるシリアル化可能な抽象クラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableFont.Font">
            <summary>
            登録されているフォントを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableFont.FontType">
            <summary>
            フォントのタイプを取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableFont.#ctor(System.String,fslib.FontType)">
            <summary>
            指定したパスからファイルを読み込み<see cref="T:fslib.Serialization.SerializableFont"/>のインスタンスを初期化する
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <param name="fontType">フォントのタイプ</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fontType"/>の値が不正</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが存在しない</exception>
            <exception cref="T:System.IO.IOException">ファイル読み込み時のエラー</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableFont.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableFont"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableFont.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableFont.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Serialization.SerializableFont.Save(System.String)">
            <summary>
            指定したパスにフォントを保存する
            </summary>
            <param name="path">保存するパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字だけからなる ファイルが特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>のディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException">IO時のエラー</exception>
            <exception cref="T:System.NotSupportedException">ファイルの拡張子がサポートされていない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセス許可がない</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableDynamicFont">
            <summary>
            <see cref="T:asd.Font"/>と互換性があるシリアル化可能な動的フォントのクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableDynamicFont.Size">
            <summary>
            フォントの大きさを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableDynamicFont.OutLineSize">
            <summary>
            フォントの縁の大きさを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableDynamicFont.Color">
            <summary>
            フォントの色を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableDynamicFont.OutLineColor">
            <summary>
            フォントの縁の色を取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableDynamicFont.#ctor(System.String,System.Int32,System.Int32,fslib.ColorPlus,fslib.ColorPlus)">
            <summary>
            指定したパスからフォントファイルを読み込み<see cref="T:fslib.Serialization.SerializableDynamicFont"/>のインスタンスを初期化する
            </summary>
            <param name="path">読み込むフォントファイルのパス</param>
            <param name="size">フォントの大きさ</param>
            <param name="color">フォントの色</param>
            <param name="outLineSize">フォントの縁のサイズ</param>
            <param name="outLineColor">フォントの縁の色</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/>または<paramref name="outLineSize"/>が1未満</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが存在しない</exception>
            <exception cref="T:System.IO.IOException">ファイル読み込み時のエラー</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableDynamicFont.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableDynamicFont"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableDynamicFont.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableDynamicFont.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="T:fslib.Serialization.SerializableStaticFont">
            <summary>
            <see cref="T:asd.Font"/>と互換性があるシリアル化可能な静的フォントのクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableStaticFont.#ctor(System.String)">
            <summary>
            指定したパスからファイルを読み込み<see cref="T:fslib.Serialization.SerializableStaticFont"/>のインスタンスを初期化する
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが存在しない</exception>
            <exception cref="T:System.IO.IOException">ファイル読み込み時のエラー</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableStaticFont.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableStaticFont"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableStaticFont.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableStaticFont.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Serialization.SerializableStaticFont.Save(System.String)">
            <summary>
            指定したパスにフォントファイル(.aff)を保存する
            png画像はもとのディレクトリに保存される
            </summary>
            <param name="path">保存するパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字だけからなる ファイルが特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>のディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException">IO時のエラー</exception>
            <exception cref="T:System.NotSupportedException">ファイルの拡張子がサポートされていない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセス許可がない</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableShader2D">
            <summary>
            <see cref="T:asd.Shader2D"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableShader2D.IsReleased">
            <summary>
            メモリから解放されているかどうかを取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableShader2D.#ctor(System.String)">
            <summary>
            指定したシェーダーのコードを使用してインスタンスを初期化する
            </summary>
            <param name="shaderText">使用するシェーダーのコード</param>
            <exception cref="T:System.ArgumentException">シェーダーを生成できなかった</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="shaderText"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableShader2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableFont"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableShader2D.ForceToRelease">
            <summary>
            強制的に使用しているメモリを開放する
            </summary>
            <remarks>参照が残っていないかどうか注意すること</remarks>
        </member>
        <member name="M:fslib.Serialization.SerializableShader2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableShader2D.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="T:fslib.Serialization.SerializableShader3D">
            <summary>
            <see cref="T:asd.Shader3D"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableShader3D.IsReleased">
            <summary>
            メモリから解放されているかどうかを取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableShader3D.#ctor(System.String)">
            <summary>
            指定したシェーダーのコードを使用してインスタンスを初期化する
            </summary>
            <param name="shaderText">使用するシェーダーのコード</param>
            <exception cref="T:System.ArgumentException">シェーダーを生成できなかった</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="shaderText"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableShader3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableFont"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableShader3D.ForceToRelease">
            <summary>
            強制的に使用しているメモリを開放する
            </summary>
            <remarks>参照が残っていないかどうか注意すること</remarks>
        </member>
        <member name="M:fslib.Serialization.SerializableShader3D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableShader3D.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="T:fslib.Serialization.ISerializableShape">
            <summary>
            シリアライズ可能な図形を表すインターフェイス
            </summary>
        </member>
        <member name="P:fslib.Serialization.ISerializableShape.ShapeType">
            <summary>
            描画する図形のタイプを取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.ISerializableShape.ToBasic">
            <summary>
            <see cref="T:asd.Shape"/>にキャスティングする
            </summary>
            <returns><see cref="T:asd.Shape"/>のインスタンス</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableArcShape">
            <summary>
            <see cref="T:asd.ArcShape"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableArcShape.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableArcShape.#ctor(asd.ArcShape)">
            <summary>
            <see cref="T:asd.ArcShape"/>を用いて<see cref="T:fslib.Serialization.SerializableArcShape"/>の新しいインスタンスを生成する
            </summary>
            <param name="shape">基本となる<see cref="T:asd.ArcShape"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shape"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableArcShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableArcShape"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableArcShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableCircleShape">
            <summary>
            <see cref="T:asd.CircleShape"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableCircleShape.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableCircleShape.#ctor(asd.CircleShape)">
            <summary>
            <see cref="T:asd.CircleShape"/>を用いて<see cref="T:fslib.Serialization.SerializableCircleShape"/>の新しいインスタンスを生成する
            </summary>
            <param name="shape">基本となる<see cref="T:asd.CircleShape"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shape"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableCircleShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableCircleShape"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableCircleShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableLineShape">
            <summary>
            <see cref="T:asd.LineShape"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableLineShape.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableLineShape.#ctor(asd.LineShape)">
            <summary>
            <see cref="T:asd.LineShape"/>を用いて<see cref="T:fslib.Serialization.SerializableLineShape"/>の新しいインスタンスを生成する
            </summary>
            <param name="shape">基本となる<see cref="T:asd.LineShape"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shape"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableLineShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableLineShape"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableLineShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializablePolygonShape">
            <summary>
            <see cref="T:asd.PolygonShape"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializablePolygonShape.HoleCount">
            <summary>
            登録されている穴の図形の個数を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializablePolygonShape.IsReleased">
            <summary>
            メモリから解放されているかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializablePolygonShape.Holes">
            <summary>
            登録されている穴の図形を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializablePolygonShape.ShapeType">
            <summary>
            図形のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializablePolygonShape.VertexCount">
            <summary>
            多角形を構成する頂点の個数を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializablePolygonShape.Vertexes">
            <summary>
            登録されている頂点を取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.#ctor(asd.PolygonShape)">
            <summary>
            <see cref="T:asd.PolygonShape"/>を用いて<see cref="T:fslib.Serialization.SerializablePolygonShape"/>の新しいインスタンスを生成する
            登録されている頂点はリセットされる
            </summary>
            <param name="shape">基本となる<see cref="T:asd.PolygonShape"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shape"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.#ctor(asd.PolygonShape,System.Collections.Generic.IEnumerable{asd.Vector2DF})">
            <summary>
            頂点の情報が格納されるコレクションと<see cref="T:asd.PolygonShape"/>を用いて<see cref="T:fslib.Serialization.SerializablePolygonShape"/>の新しいインスタンスを生成する
            </summary>
            <param name="shape">基本となる<see cref="T:asd.PolygonShape"/>のインスタンス</param>
            <param name="vertexes">頂点情報を格納するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shape"/>または<paramref name="vertexes"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializablePolygonShape"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.AddHole(asd.Shape)">
            <summary>
            多角形に空ける穴となる図形を追加する
            </summary>
            <param name="holeShape">穴となる図形のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="holeShape"/>がnull</exception>
            <returns><paramref name="holeShape"/>が追加出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.AddVertex(asd.Vector2DF)">
            <summary>
            多角形を構成する頂点を追加する
            </summary>
            <param name="vertex">追加する頂点</param>
            <returns><paramref name="vertex"/>を追加出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.ClearHoles">
            <summary>
            登録されている多角形の穴を全て削除する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.ClearVertexes">
            <summary>
            多角形を構成する頂点をすべて削除する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.ForceToRelease">
            <summary>
            強制的に使用しているメモリを開放する
            </summary>
            <remarks>参照が残っていないかどうか注意すること</remarks>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.OverWriteVortexes(System.Collections.Generic.IEnumerable{asd.Vector2DF})">
            <summary>
            頂点情報を指定したコレクションの内容に置き換える
            </summary>
            <param name="vertexes">置き換える頂点のコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertexes"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.ReSet">
            <summary>
            頂点や穴を全てリセットし初期化する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.RemoveHole(asd.Shape)">
            <summary>
            登録されている多角形の穴を削除する
            </summary>
            <param name="holeShape">削除する穴の図形</param>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.RemoveVertex(asd.Vector2DF)">
            <summary>
            多角形を構成する頂点をすべて削除する
            </summary>
            <param name="vertex">削除する頂点の座標</param>
            <returns>削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.Serialization.SerializablePolygonShape.ShapeList">
            <summary>
            <see cref="T:asd.Shape"/>を格納できる<see cref="T:System.Collections.Generic.IList`1"/>の実装
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializablePolygonShape.ShapeList.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializablePolygonShape.ShapeList.Master">
            <summary>
            このインスタンスを管理する<see cref="T:asd.MapObject2D"/>を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializablePolygonShape.ShapeList.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentNullException">設定しようとした値がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>指定範囲外</exception>
            <returns><paramref name="index"/>を持つ要素</returns>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.ShapeList.Contains(asd.Shape)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns>格納されていたらtrue，それ例外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.ShapeList.CopyTo(asd.Shape[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.ShapeList.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.ShapeList.IndexOf(asd.Shape)">
            <summary>
            指定した要素の持つインデックスを返す
            </summary>
            <param name="item">インデックスを検索する要素</param>
            <returns><paramref name="item"/>に割り当てられたインデックス 見つからなかったら-1</returns>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.ShapeList.ToArray">
            <summary>
            このインスタンスのコピーを格納する配列を返す
            </summary>
            <returns>このインスタンスのコピーを格納する配列</returns>
        </member>
        <member name="M:fslib.Serialization.SerializablePolygonShape.ShapeList.ToSerializableCollection">
            <summary>
            シリアライズ可能な図形のコレクションに変換する
            </summary>
            <returns>シリアライズ可能な図形のコレクション</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableRectangleShape">
            <summary>
            <see cref="T:asd.RectangleShape"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableRectangleShape.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableRectangleShape.#ctor(asd.RectangleShape)">
            <summary>
            <see cref="T:asd.RectangleShape"/>を用いて<see cref="T:fslib.Serialization.SerializableRectangleShape"/>の新しいインスタンスを生成する
            </summary>
            <param name="shape">基本となる<see cref="T:asd.RectangleShape"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shape"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableRectangleShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableRectangleShape"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableRectangleShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableTriangleShape">
            <summary>
            <see cref="T:asd.TriangleShape"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableTriangleShape.Point1">
            <summary>
            頂点1の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableTriangleShape.Point2">
            <summary>
            頂点2の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableTriangleShape.Point3">
            <summary>
            頂点3の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableTriangleShape.UV1">
            <summary>
            <see cref="P:fslib.Serialization.SerializableTriangleShape.Point1"/>のUV値を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableTriangleShape.UV2">
            <summary>
            <see cref="P:fslib.Serialization.SerializableTriangleShape.Point2"/>のUV値を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableTriangleShape.UV3">
            <summary>
            <see cref="P:fslib.Serialization.SerializableTriangleShape.Point3"/>のUV値を取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableTriangleShape.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableTriangleShape.#ctor(asd.TriangleShape)">
            <summary>
            <see cref="T:asd.TriangleShape"/>を用いて<see cref="T:fslib.Serialization.SerializableTriangleShape"/>の新しいインスタンスを生成する
            </summary>
            <param name="shape">基本となる<see cref="T:asd.TriangleShape"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="shape"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableTriangleShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableTriangleShape"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableTriangleShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableTextObject2D">
            <summary>
            シリアライズ可能な<see cref="T:fslib.TextObject2DPlus"/>のクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableTextObject2D.Font">
            <summary>
            使用されているフォントを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableTextObject2D.Material">
            <summary>
            描画時に使用するマテリアルを取得または設定する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableTextObject2D.#ctor">
            <summary>
            既定のフォントとテキスト，座標をもつ<see cref="T:fslib.Serialization.SerializableTextObject2D"/>のインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableTextObject2D.#ctor(fslib.Serialization.SerializableFont)">
            <summary>
            指定したフォントと既定のテキスト，座標をもつ<see cref="T:fslib.Serialization.SerializableTextObject2D"/>のインスタンスを生成する
            </summary>
            <param name="font">設定するフォント</param>
        </member>
        <member name="M:fslib.Serialization.SerializableTextObject2D.#ctor(fslib.Serialization.SerializableFont,System.String)">
            <summary>
            指定したフォントとテキスト，既定の座標をもつ<see cref="T:fslib.Serialization.SerializableTextObject2D"/>のインスタンスを生成する
            </summary>
            <param name="font">設定するフォント</param>
            <param name="text">表示するテキスト</param>
        </member>
        <member name="M:fslib.Serialization.SerializableTextObject2D.#ctor(fslib.Serialization.SerializableFont,System.String,asd.Vector2DF)">
            <summary>
            指定したフォントとテキスト，座標をもつ<see cref="T:fslib.Serialization.SerializableTextObject2D"/>のインスタンスを生成する
            </summary>
            <param name="font">設定するフォント</param>
            <param name="text">表示するテキスト</param>
            <param name="position">座標</param>
        </member>
        <member name="M:fslib.Serialization.SerializableTextObject2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableTextObject2D"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableTextObject2D.Clone">
            <summary>
            全く同じの<see cref="T:fslib.Serialization.SerializableTextObject2D"/>のインスタンスを生成する
            </summary>
            <returns>コピーされたこのインスタンス</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableTextObject2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableTextObject2D.SetDynamicFont(System.String,System.Int32,asd.Color,System.Int32,asd.Color)">
            <summary>
            フォントファイルから動的に生成されるフォントを設定する
            </summary>
            <param name="path">フォントファイルのパス</param>
            <param name="size">フォントの大きさ</param>
            <param name="color">フォントの色</param>
            <param name="outLineSize">フォントの縁の太さ</param>
            <param name="outLineColor">フォントの縁の色</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/>または<paramref name="outLineSize"/>が0以下</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.IOException">フォントファイルの読み込みに失敗した</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableTextObject2D.SetStaticFont(System.String)">
            <summary>
            フォントジェネレータで生成されたファイルからフォントを生成し設定する
            </summary>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.IOException">フォントファイルの読み込みに失敗した</exception>
            <param name="path">フォントファイルのパス</param>
        </member>
        <member name="T:fslib.Serialization.SerializableTexture">
            <summary>
            <see cref="T:asd.Texture2D"/>と互換性があるシリアライズ可能な画像のクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableTexture.#ctor(System.String)">
            <summary>
            指定したパスから画像ファイルを読み込み<see cref="T:fslib.Serialization.SerializableTexture"/>のインスタンスを初期化する
            </summary>
            <param name="path">読み込む画像ファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが存在しない</exception>
            <exception cref="T:System.IO.IOException">ファイル読み込み時のエラー</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableTexture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableTexture"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableTexture.FromTexture2D(asd.Texture2D)">
            <summary>
            <see cref="T:asd.Texture2D"/>からインスタンスを生成する
            </summary>
            <param name="texture">もととなる<see cref="T:asd.Texture2D"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="texture"/>がnull</exception>
            <returns>新しい<see cref="T:fslib.Serialization.SerializableTexture"/>のインスタンス</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableTexture.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableTexture.OnDeserialization(System.Object)">
            <summary>
            逆シリアル化時に実行される実装
            </summary>
            <param name="sender">現段階ではサポートされていない</param>
        </member>
        <member name="M:fslib.Serialization.SerializableTexture.Save(System.String)">
            <summary>
            指定したパスに画像を保存する
            </summary>
            <param name="path">保存するパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字だけからなる ファイルが特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>のディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException">IO時のエラー</exception>
            <exception cref="T:System.NotSupportedException">ファイルの拡張子がサポートされていない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">アクセス許可がない</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableTextureObject2D">
            <summary>
            シリアライズ可能な<see cref="T:fslib.TextureObject2DPlus"/>のクラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableTextureObject2D.Material">
            <summary>
            描画時に使用するマテリアルを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableTextureObject2D.Texture">
            <summary>
            使用されているテクスチャを取得または設定する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableTextureObject2D.#ctor">
            <summary>
            既定のテクスチャと座標をもつ<see cref="T:fslib.Serialization.SerializableTextureObject2D"/>のインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableTextureObject2D.#ctor(fslib.Serialization.SerializableTexture)">
            <summary>
            指定したテクスチャと既定の座標をもつ<see cref="T:fslib.Serialization.SerializableTextureObject2D"/>のインスタンスを生成する
            </summary>
            <param name="texture">設定するテクスチャ</param>
        </member>
        <member name="M:fslib.Serialization.SerializableTextureObject2D.#ctor(fslib.Serialization.SerializableTexture,asd.Vector2DF)">
            <summary>
            指定したテクスチャと座標をもつ<see cref="T:fslib.Serialization.SerializableTextureObject2D"/>のインスタンスを生成する
            </summary>
            <param name="texture">設定するテクスチャ</param>
            <param name="position">座標</param>
        </member>
        <member name="M:fslib.Serialization.SerializableTextureObject2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableTextureObject2D"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableTextureObject2D.Clone">
            <summary>
            全く同じの<see cref="T:fslib.Serialization.SerializableTextureObject2D"/>のインスタンスを生成する
            </summary>
            <returns>コピーされたこのインスタンス</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableTextureObject2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableVector2DF">
            <summary>
            シリアル化可能で<see cref="T:asd.Vector2DF"/>と互換性がある構造体
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector2DF.X">
            <summary>
            Xの値を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector2DF.Y">
            <summary>
            Yの値を取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DF.#ctor(System.Single,System.Single)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">Xの値</param>
            <param name="y">Yの値</param>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DF.Equals(fslib.Serialization.SerializableVector2DF)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableVector2DF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="other">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableVector2DF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DF.Equals(fslib.Serialization.SerializableVector2DF,asd.Vector2DF)">
            <summary>
            <see cref="T:fslib.Serialization.SerializableVector2DF"/>と<see cref="T:asd.Vector2DF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="serializable">同値性を調べる<see cref="T:fslib.Serialization.SerializableVector2DF"/>のインスタンス</param>
            <param name="normal">同値性を調べるもう一つの<see cref="T:asd.Vector2DF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DF.Equals(fslib.Serialization.SerializableVector2DF,fslib.Serialization.SerializableVector2DF)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableVector2DF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="vector1">同値性を調べる<see cref="T:fslib.Serialization.SerializableVector2DF"/>のインスタンス</param>
            <param name="vector2">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableVector2DF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DF.Equals(System.Object)">
            <summary>
            このインスタンスと指定したオブジェクトが等しいかどうか判定する
            </summary>
            <param name="obj">判定する<see cref="T:System.Object"/>のインスタンス</param>
            <returns>等しかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DF.GetHashCode">
            <summary>
            このインスタンスのハッシュコードを返す
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DF.To2DI">
            <summary>
            <see cref="T:fslib.Serialization.SerializableVector2DI"/>に型変換する
            </summary>
            <returns>このインスタンスと同じ値を持つ<see cref="T:fslib.Serialization.SerializableVector2DI"/>のインスタンス</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DF.ToString">
            <summary>
            このインスタンスを表す文字列を返す
            </summary>
            <returns>このインスタンスを表す文字列</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableVector2DI">
            <summary>
            シリアル化可能で<see cref="T:asd.Vector2DI"/>と互換性がある構造体
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector2DI.X">
            <summary>
            Xの値を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector2DI.Y">
            <summary>
            Yの値を取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DI.#ctor(System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">Xの値</param>
            <param name="y">Yの値</param>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DI.Equals(fslib.Serialization.SerializableVector2DI)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableVector2DI"/>間に同値性があるかどうかを返す
            </summary>
            <param name="other">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableVector2DI"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DI.Equals(fslib.Serialization.SerializableVector2DI,asd.Vector2DI)">
            <summary>
            <see cref="T:fslib.Serialization.SerializableVector2DI"/>と<see cref="T:asd.Vector2DI"/>間に同値性があるかどうかを返す
            </summary>
            <param name="serializable">同値性を調べる<see cref="T:fslib.Serialization.SerializableVector2DI"/>のインスタンス</param>
            <param name="normal">同値性を調べるもう一つの<see cref="T:asd.Vector2DI"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DI.Equals(fslib.Serialization.SerializableVector2DI,fslib.Serialization.SerializableVector2DI)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableVector2DI"/>間に同値性があるかどうかを返す
            </summary>
            <param name="vector1">同値性を調べる<see cref="T:fslib.Serialization.SerializableVector2DI"/>のインスタンス</param>
            <param name="vector2">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableVector2DI"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DI.Equals(System.Object)">
            <summary>
            このインスタンスと指定したオブジェクトが等しいかどうか判定する
            </summary>
            <param name="obj">判定する<see cref="T:System.Object"/>のインスタンス</param>
            <returns>等しかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DI.GetHashCode">
            <summary>
            このインスタンスのハッシュコードを返す
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DI.To2DF">
            <summary>
            <see cref="T:fslib.Serialization.SerializableVector2DF"/>に型変換する
            </summary>
            <returns>このインスタンスと同じ値を持つ<see cref="T:fslib.Serialization.SerializableVector2DF"/>のインスタンス</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector2DI.ToString">
            <summary>
            このインスタンスを表す文字列を返す
            </summary>
            <returns>このインスタンスを表す文字列</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableVector3DF">
            <summary>
            シリアル化可能で<see cref="T:asd.Vector3DF"/>と互換性がある構造体
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector3DF.X">
            <summary>
            Xの値を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector3DF.Y">
            <summary>
            Yの値を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector3DF.Z">
            <summary>
            Zの値を取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableVector3DF.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">Xの値</param>
            <param name="y">Yの値</param>
            <param name="z">Zの値</param>
        </member>
        <member name="M:fslib.Serialization.SerializableVector3DF.Equals(fslib.Serialization.SerializableVector3DF)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableVector3DF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="other">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableVector3DF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector3DF.Equals(fslib.Serialization.SerializableVector3DF,asd.Vector3DF)">
            <summary>
            <see cref="T:fslib.Serialization.SerializableVector3DF"/>と<see cref="T:asd.Vector3DF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="serializable">同値性を調べる<see cref="T:fslib.Serialization.SerializableVector3DF"/>のインスタンス</param>
            <param name="normal">同値性を調べるもう一つの<see cref="T:asd.Vector3DF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector3DF.Equals(fslib.Serialization.SerializableVector3DF,fslib.Serialization.SerializableVector3DF)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableVector3DF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="vector1">同値性を調べる<see cref="T:fslib.Serialization.SerializableVector3DF"/>のインスタンス</param>
            <param name="vector2">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableVector3DF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector3DF.Equals(System.Object)">
            <summary>
            このインスタンスと指定したオブジェクトが等しいかどうか判定する
            </summary>
            <param name="obj">判定する<see cref="T:System.Object"/>のインスタンス</param>
            <returns>等しかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector3DF.GetHashCode">
            <summary>
            このインスタンスのハッシュコードを返す
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector3DF.ToString">
            <summary>
            このインスタンスを表す文字列を返す
            </summary>
            <returns>このインスタンスを表す文字列</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableVector4DF">
            <summary>
            シリアル化可能で<see cref="T:asd.Vector4DF"/>と互換性がある構造体
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector4DF.X">
            <summary>
            Xの値を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector4DF.Y">
            <summary>
            Yの値を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector4DF.Z">
            <summary>
            Zの値を取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableVector4DF.W">
            <summary>
            Wの値を取得する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableVector4DF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            コンストラクタ
            </summary>
            <param name="x">Xの値</param>
            <param name="y">Yの値</param>
            <param name="z">Zの値</param>
            <param name="w">Wの値</param>
        </member>
        <member name="M:fslib.Serialization.SerializableVector4DF.Equals(fslib.Serialization.SerializableVector4DF)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableVector4DF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="other">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableVector4DF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector4DF.Equals(fslib.Serialization.SerializableVector4DF,asd.Vector4DF)">
            <summary>
            <see cref="T:fslib.Serialization.SerializableVector4DF"/>と<see cref="T:asd.Vector4DF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="serializable">同値性を調べる<see cref="T:fslib.Serialization.SerializableVector4DF"/>のインスタンス</param>
            <param name="normal">同値性を調べるもう一つの<see cref="T:asd.Vector4DF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector4DF.Equals(fslib.Serialization.SerializableVector4DF,fslib.Serialization.SerializableVector4DF)">
            <summary>
            2つの<see cref="T:fslib.Serialization.SerializableVector4DF"/>間に同値性があるかどうかを返す
            </summary>
            <param name="vector1">同値性を調べる<see cref="T:fslib.Serialization.SerializableVector4DF"/>のインスタンス</param>
            <param name="vector2">同値性を調べるもう一つの<see cref="T:fslib.Serialization.SerializableVector4DF"/>のインスタンス</param>
            <returns>同値だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector4DF.Equals(System.Object)">
            <summary>
            このインスタンスと指定したオブジェクトが等しいかどうか判定する
            </summary>
            <param name="obj">判定する<see cref="T:System.Object"/>のインスタンス</param>
            <returns>等しかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector4DF.GetHashCode">
            <summary>
            このインスタンスのハッシュコードを返す
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="M:fslib.Serialization.SerializableVector4DF.ToString">
            <summary>
            このインスタンスを表す文字列を返す
            </summary>
            <returns>このインスタンスを表す文字列</returns>
        </member>
        <member name="T:fslib.Serialization.SerializableClickableText">
            <summary>
            <see cref="T:fslib.ClickableText"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.#ctor">
            <summary>
            既定のフォントとテキスト，座標をもつ<see cref="T:fslib.Serialization.SerializableClickableText"/>のインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.#ctor(fslib.Serialization.SerializableFont)">
            <summary>
            指定したフォントと既定のテキスト，座標をもつ<see cref="T:fslib.Serialization.SerializableClickableText"/>のインスタンスを生成する
            </summary>
            <param name="font">設定するフォント</param>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.#ctor(fslib.Serialization.SerializableFont,System.String)">
            <summary>
            指定したフォントとテキスト，既定の座標をもつ<see cref="T:fslib.Serialization.SerializableClickableText"/>のインスタンスを生成する
            </summary>
            <param name="font">設定するフォント</param>
            <param name="text">表示するテキスト</param>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.#ctor(fslib.Serialization.SerializableFont,System.String,asd.Vector2DF)">
            <summary>
            指定したフォントとテキスト，座標をもつ<see cref="T:fslib.Serialization.SerializableClickableText"/>のインスタンスを生成する
            </summary>
            <param name="font">設定するフォント</param>
            <param name="text">表示するテキスト</param>
            <param name="position">座標</param>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableClickableText"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="F:fslib.Serialization.SerializableClickableText._iscollide">
            <summary>
            マウスの衝突判定用フィールド
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.IsClickable">
            <summary>
            クリック可能かどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.MouseCursorTouch">
            <summary>
            マウスが当たっているかを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.LeftPush">
            <summary>
            左クリックされたかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.LeftHold">
            <summary>
            左クリックされているかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.LeftRelease">
            <summary>
            左クリックが開放されたかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.MiddlePush">
            <summary>
            中央ボタンが押されたかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.MiddleHold">
            <summary>
            中央ボタンが押されているかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.MiddleRelease">
            <summary>
            中央ボタンが開放されたかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.RightPush">
            <summary>
            右クリックされたかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.RightHold">
            <summary>
            右クリックされているかを取得
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableClickableText.RightRelease">
            <summary>
            右クリックが開放されたかを取得
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.MouseUpdate">
            <summary>
            <c>OnUpdate</c>メソッドに乗っける事。
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnCursorEnter">
            <summary>
            マウスが当たったときに実行
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnCursorStay">
            <summary>
            マウスが当たっている時に実行
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnCursorExit">
            <summary>
            マウスが外れたに実行
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnLeftPushed">
            <summary>
            左クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnLeftHolded">
            <summary>
            左クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnLeftReleased">
            <summary>
            左クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnMiddlePushed">
            <summary>
            中央クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnMiddleHolded">
            <summary>
            中央クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnMiddleReleased">
            <summary>
            中央クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnRightPushed">
            <summary>
            右クリックされた時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnRightHolded">
            <summary>
            右クリック中に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnRightReleased">
            <summary>
            右クリック解除時に実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnWheelUpped">
            <summary>
            ホイールを上に動かしたときに実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.OnWheelDowned">
            <summary>
            ホイールを下に動かしたときに実行されるメソッド
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.IsCollide">
            <summary>
            マウスカーソルと当たってるかどうかを返す。
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableClickableText.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableWindowBase">
            <summary>
            シリアライズ可能なウィンドウの基底クラス
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableWindowBase.DefaultTexture">
            <summary>
            デフォルトのテクスチャを取得する
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableWindowBase.GeneratingFlame">
            <summary>
            枠の生成の有無を取得または設定する
            既定値:true
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableWindowBase.Thickness">
            <summary>
            枠の太さを取得または設定する
            既定値:3
            </summary>
        </member>
        <member name="P:fslib.Serialization.SerializableWindowBase.LineColor">
            <summary>
            枠の色を取得または設定する
            既定値：<see cref="F:fslib.ColorSet.Grey"/>
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableWindowBase.#ctor(asd.Vector2DF,asd.Vector2DI)">
            <summary>
            指定した座標と大きさをもとに<see cref="T:fslib.Serialization.SerializableWindow"/>の新しいインスタンスを生成する
            </summary>
            <param name="position">表示する座標</param>
            <param name="size">大きさ(ピクセル)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/>のXまたはYの値が0以下</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableWindowBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableWindowBase"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableWindowBase.DrawingFlame">
            <summary>
            枠の描画
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableWindowBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化するデータを設定する
            </summary>
            <param name="info">データを設定する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信先を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="T:fslib.Serialization.SerializableWindow">
            <summary>
            <see cref="T:fslib.Window"/>と互換性があるシリアライズ可能なクラス
            </summary>
        </member>
        <member name="M:fslib.Serialization.SerializableWindow.#ctor(asd.Vector2DF,asd.Vector2DI)">
            <summary>
            指定した座標と大きさをもとに<see cref="T:fslib.Serialization.SerializableWindow"/>の新しいインスタンスを生成する
            </summary>
            <param name="position">表示する座標</param>
            <param name="size">大きさ(ピクセル)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/>のXまたはYの値が0以下</exception>
        </member>
        <member name="M:fslib.Serialization.SerializableWindow.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアル化されたデータをもとに<see cref="T:fslib.Serialization.SerializableWindow"/>のインスタンスを初期化する
            </summary>
            <param name="info">シリアルした情報を格納する<see cref="T:System.Runtime.Serialization.SerializationInfo"/>のインスタンス</param>
            <param name="context">送信元を表す<see cref="T:System.Runtime.Serialization.StreamingContext"/>のインスタンス</param>
        </member>
        <member name="M:fslib.Serialization.SerializableWindow.Clone">
            <summary>
            全く同じの<see cref="T:fslib.Serialization.SerializableWindow"/>のインスタンスを生成する
            </summary>
            <returns>コピーされたこのインスタンス</returns>
        </member>
        <member name="T:fslib.Layer2DPlus">
            <summary>
            <see cref="T:asd.Layer2D"/>の拡張版を提供するクラス
            </summary>
        </member>
        <member name="P:fslib.Layer2DPlus.AdditionalDrawings">
            <summary>
            登録されている<see cref="T:fslib.DrawAdditionalBase"/>を取得する
            </summary>
        </member>
        <member name="P:fslib.Layer2DPlus.GroupObjects">
            <summary>
            登録されている<see cref="T:fslib.GroupObject"/>を取得する
            </summary>
        </member>
        <member name="P:fslib.Layer2DPlus.GroupObjectCount">
            <summary>
            登録されている<see cref="T:fslib.GroupObject"/>の数を取得する
            </summary>
        </member>
        <member name="M:fslib.Layer2DPlus.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.Layer2DPlus.AddAdditionalDrawing(fslib.DrawAdditionalBase)">
            <summary>
            指定した追加描画処理を追加する
            </summary>
            <param name="additionalDrawing">追加する追加描画処理を扱うクラス</param>
            <exception cref="T:System.ArgumentException"><paramref name="additionalDrawing"/>が既に登録されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="additionalDrawing"/>がnull</exception>
        </member>
        <member name="M:fslib.Layer2DPlus.AddGroupObject(fslib.GroupObject)">
            <summary>
            <see cref="T:fslib.GroupObject"/>をレイヤーに追加する
            </summary>
            <param name="obj">追加する<see cref="T:fslib.GroupObject"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/>が既に追加されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>がnull</exception>
        </member>
        <member name="M:fslib.Layer2DPlus.ExistAdditionalDrawing(fslib.DrawAdditionalBase)">
            <summary>
            指定した追加描画処理が登録されているかどうかを返す
            </summary>
            <param name="additionalDrawing">検索する追加描画処理を扱うクラス</param>
        </member>
        <member name="M:fslib.Layer2DPlus.ExistComponent(System.String)">
            <summary>
            指定したキーを持つコンポーネントが存在するかどうかを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.Layer2DPlus.ExistGroupObject(fslib.GroupObject)">
            <summary>
            指定した<see cref="T:fslib.GroupObject"/>が登録されているかどうかを返す
            </summary>
            <param name="obj">検索する<see cref="T:fslib.GroupObject"/></param>
            <returns>登録されていたらtrue，それ以外でそれ以外でfalse</returns>
        </member>
        <member name="M:fslib.Layer2DPlus.ExistObject(asd.Object2D)">
            <summary>
            指定した<see cref="T:asd.Object2D"/>が登録されているかどうかを返す
            </summary>
            <param name="obj">検索する<see cref="T:asd.Object2D"/></param>
            <returns>登録されていたらtrue，それ以外でfalse</returns>
            <remarks>登録されている<see cref="T:fslib.GroupObject"/>にも検索を行う</remarks>
        </member>
        <member name="M:fslib.Layer2DPlus.RemoveAdditionalDrawing(fslib.DrawAdditionalBase)">
            <summary>
            <see cref="T:fslib.DrawAdditionalBase"/>をの登録を解除する
            </summary>
            <param name="additionalDrawing">削除する<see cref="T:fslib.DrawAdditionalBase"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="additionalDrawing"/>がnull</exception>
        </member>
        <member name="M:fslib.Layer2DPlus.RemoveGroupObject(fslib.GroupObject)">
            <summary>
            <see cref="T:fslib.GroupObject"/>をレイヤーから削除する
            </summary>
            <param name="obj">削除する<see cref="T:asd.Object2D"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/>が登録されていない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>がnull</exception>
        </member>
        <member name="M:fslib.Layer2DPlus.RemoveMySelf">
            <summary>
            登録されているシーンから自身を削除する
            </summary>
        </member>
        <member name="M:fslib.Layer2DPlus.TryAddObject(asd.Object2D)">
            <summary>
            <see cref="T:asd.Object2D"/>をレイヤーに追加する
            </summary>
            <param name="obj">追加する<see cref="T:asd.Object2D"/></param>
            <returns>追加できたらtrue，できなかったらfalse</returns>
        </member>
        <member name="M:fslib.Layer2DPlus.TryRemoveObject(asd.Object2D)">
            <summary>
            <see cref="T:asd.Object2D"/>をレイヤーから削除する
            </summary>
            <param name="obj">削除する<see cref="T:asd.Object2D"/></param>
            <returns>削除出来たらtrue，できなかったらfalse</returns>
        </member>
        <member name="M:fslib.Layer2DPlus.TryAddComponent(asd.Layer2DComponent,System.String)">
            <summary>
            <see cref="T:asd.Layer2DComponent"/>を登録する
            </summary>
            <param name="component">登録する<see cref="T:asd.Layer2DComponent"/></param>
            <param name="key"><paramref name="component"/>に結びつけるキー</param>
            <returns>登録出来たらtrue，できなかったらfalse</returns>
        </member>
        <member name="M:fslib.Layer2DPlus.TryRemoveComponent(System.String)">
            <summary>
            <see cref="T:asd.Layer2DComponent"/>をレイヤーから削除する
            </summary>
            <param name="key"><see cref="T:asd.Layer2DComponent"/>と結びつけられたキー</param>
            <returns>削除出来たらtrue，できなかったらfalse</returns>
        </member>
        <member name="T:fslib.GroupObject">
            <summary>
            <see cref="T:asd.Object2D"/>をグループ化できるレイヤーに登録可能なオブジェクトを提供するクラス
            </summary>
        </member>
        <member name="P:fslib.GroupObject.IsAdded">
            <summary>
            オブジェクトが削除されていなくてレイヤーに存在しているかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.GroupObject.IsAlive">
            <summary>
            オブジェクトが破棄されていないかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.GroupObject.Layer">
            <summary>
            所属している<see cref="T:fslib.Layer2DPlus"/>を取得する
            </summary>
        </member>
        <member name="P:fslib.GroupObject.Scene">
            <summary>
            所属している<see cref="T:asd.Scene"/>を取得する
            </summary>
        </member>
        <member name="P:fslib.GroupObject.Objects">
            <summary>
            登録されている<see cref="T:asd.Object2D"/>を取得する
            </summary>
        </member>
        <member name="P:fslib.GroupObject.ObjectCount">
            <summary>
            登録されている<see cref="T:asd.Object2D"/>の個数を取得する
            </summary>
        </member>
        <member name="P:fslib.GroupObject.IsDrawn">
            <summary>
            全オブジェクトを描画するかどうかを一括で設定する
            </summary>
        </member>
        <member name="P:fslib.GroupObject.IsUpdated">
            <summary>
            全オブジェクトを更新するかどうかを一括で設定する
            </summary>
        </member>
        <member name="M:fslib.GroupObject.OnAdded">
            <summary>
            オーバーライドしてレイヤーに追加されたときの処理を実装できる
            </summary>
        </member>
        <member name="M:fslib.GroupObject.OnRemoved">
            <summary>
            オーバーライドしてレイヤーから削除されたときの処理を実装できる
            </summary>
        </member>
        <member name="M:fslib.GroupObject.OnDispose">
            <summary>
            オーバーライドしてこのオブジェクトが破棄されるときの処理を実装できる
            </summary>
        </member>
        <member name="M:fslib.GroupObject.OnUpdate">
            <summary>
            オーバーライドしてこのオブジェクトが更新されるときの処理を実装できる
            </summary>
        </member>
        <member name="M:fslib.GroupObject.AddObject(asd.Object2D)">
            <summary>
            <see cref="T:asd.Object2D"/>を追加し，レイヤーに登録する。
            </summary>
            <param name="obj">追加する<see cref="T:asd.Object2D"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/>は既に追加されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>がnull</exception>
        </member>
        <member name="M:fslib.GroupObject.ExistObject(asd.Object2D)">
            <summary>
            指定した<see cref="T:asd.Object2D"/>が登録されているかどうかを返す
            </summary>
            <param name="obj">検索する<see cref="T:asd.Object2D"/></param>
            <returns>登録されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.GroupObject.RemoveObject(asd.Object2D)">
            <summary>
            <see cref="T:asd.Object2D"/>を削除し，レイヤーからも取り除く。
            </summary>
            <param name="obj">削除する<see cref="T:asd.Object2D"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/>が存在しなかった</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>がnull</exception>
        </member>
        <member name="M:fslib.GroupObject.RemoveMySelf">
            <summary>
            登録されているレイヤーから自身を削除する
            </summary>
            <exception cref="T:System.InvalidOperationException">レイヤーに登録されていない</exception>
        </member>
        <member name="M:fslib.GroupObject.Clear">
            <summary>
            登録されている<see cref="T:asd.Object2D"/>を削除する(レイヤーからも取り除く)
            </summary>
        </member>
        <member name="M:fslib.GroupObject.DrawLineAdditionally(asd.Vector2DF,asd.Vector2DF,System.Single,asd.Color,asd.AlphaBlendMode,System.Int32)">
            <summary>
            追加で直線を描画する
            </summary>
            <param name="point1">線の端点</param>
            <param name="point2">線の端点</param>
            <param name="thickness">線の太さ</param>
            <param name="color">線の色</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
        </member>
        <member name="M:fslib.GroupObject.DrawRectangleAdditionally(asd.RectF,asd.Color,asd.RectF,asd.Texture2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            追加で長方形を描画する
            </summary>
            <param name="drawingArea">描画する領域</param>
            <param name="color">長方形の色</param>
            <param name="uv">UV値</param>
            <param name="texture">使用するテクスチャ</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="texture"/>がnull</exception>
            <remarks><see cref="M:asd.Object2D.OnDrawAdditionally"/>内で呼び出さないこと</remarks>
        </member>
        <member name="M:fslib.GroupObject.DrawSpriteAdditionally(asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Color,asd.Color,asd.Color,asd.Color,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Texture2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            追加でテクスチャを描画する
            </summary>
            <param name="upperLeftPos">テクスチャの左上の座標</param>
            <param name="upperRightPos">テクスチャの右上の座標</param>
            <param name="lowerRightPos">テクスチャの右下の座標</param>
            <param name="lowerLeftPos">テクスチャの左下の座標</param>
            <param name="upperLeftCol">テクスチャの左上の頂点色</param>
            <param name="upperRightCol">テクスチャの右上の頂点色</param>
            <param name="lowerRightCol">テクスチャの右下の頂点色</param>
            <param name="lowerLeftCol">テクスチャの左下の頂点色</param>
            <param name="upperLeftUV">テクスチャの左上のUV値</param>
            <param name="upperRightUV">テクスチャの右上のUV値</param>
            <param name="lowerRightUV">テクスチャの右下のUV値</param>
            <param name="lowerLeftUV">テクスチャの左下のUV値</param>
            <param name="texture">使用するテクスチャ</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="texture"/>がnull</exception>
            <remarks>専用のシェーダーを用いて描画する <see cref="M:asd.Object2D.OnDrawAdditionally"/>内で呼び出さないこと</remarks>
        </member>
        <member name="M:fslib.GroupObject.DrawSpriteWithMaterialAdditionally(asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Color,asd.Color,asd.Color,asd.Color,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Material2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            追加で2Dスプライトを専用のシェーダーを用いて描画する
            </summary>
            <param name="upperLeftPos">テクスチャの左上の座標</param>
            <param name="upperRightPos">テクスチャの右上の座標</param>
            <param name="lowerRightPos">テクスチャの右下の座標</param>
            <param name="lowerLeftPos">テクスチャの左下の座標</param>
            <param name="upperLeftCol">テクスチャの左上の頂点色</param>
            <param name="upperRightCol">テクスチャの右上の頂点色</param>
            <param name="lowerRightCol">テクスチャの右下の頂点色</param>
            <param name="lowerLeftCol">テクスチャの左下の頂点色</param>
            <param name="upperLeftUV">テクスチャの左上のUV値</param>
            <param name="upperRightUV">テクスチャの右上のUV値</param>
            <param name="lowerRightUV">テクスチャの右下のUV値</param>
            <param name="lowerLeftUV">テクスチャの左下のUV値</param>
            <param name="material">使用するマテリアル</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="material"/>がnull</exception>
            <remarks>専用のシェーダーを用いて描画する <see cref="M:asd.Object2D.OnDrawAdditionally"/>内で呼び出さないこと</remarks>
        </member>
        <member name="M:fslib.GroupObject.DrawTextAdditionally(asd.Vector2DF,asd.Color,asd.Font,System.String,asd.WritingDirection,asd.AlphaBlendMode,System.Int32)">
            <summary>
            追加で文字列を描画する
            </summary>
            <param name="pos">描画位置</param>
            <param name="color">頂点色</param>
            <param name="font">使用するフォント</param>
            <param name="text">表示する文字列</param>
            <param name="writingDirection">表示する文字列の方向</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="font"/>または<paramref name="text"/>がnull</exception>
            <remarks><see cref="M:asd.Object2D.OnDrawAdditionally"/>内で呼び出さないこと</remarks>
        </member>
        <member name="M:fslib.GroupObject.DrawTriangleAdditionally(asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Color,asd.Vector2DF,asd.Vector2DF,asd.Vector2DF,asd.Texture2D,asd.AlphaBlendMode,System.Int32)">
            <summary>
            追加で三角形を描画する
            </summary>
            <param name="position1">三角形の頂点</param>
            <param name="position2">三角形の頂点</param>
            <param name="position3">三角形の頂点</param>
            <param name="color">三角形の色</param>
            <param name="uv1"><paramref name="position1"/>におけるUV値</param>
            <param name="uv2"><paramref name="position2"/>におけるUV値</param>
            <param name="uv3"><paramref name="position3"/>におけるUV値</param>
            <param name="texture">使用するテクスチャ</param>
            <param name="alphaBlend">アルファブレンドの種類</param>
            <param name="priority">描画優先度</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="texture"/>がnull</exception>
            <remarks><see cref="M:asd.Object2D.OnDrawAdditionally"/>内で呼び出さないこと</remarks>
        </member>
        <member name="M:fslib.GroupObject.Dispose(System.Boolean)">
            <summary>
            このオブジェクトを破棄する
            </summary>
            <param name="disposing">アンマネージドオブジェクトも削除するかどうか</param>
        </member>
        <member name="M:fslib.GroupObject.Dispose">
            <summary>
            このオブジェクトを破棄する
            </summary>
        </member>
        <member name="T:fslib.ShapeProvider">
            <summary>
            <see cref="T:asd.Shape"/>を提供するクラス
            </summary>
        </member>
        <member name="M:fslib.ShapeProvider.GetNormalShape(asd.ShapeType)">
            <summary>
            図形のタイプから<see cref="T:asd.Shape"/>のインスタンスを生成する
            </summary>
            <param name="shapeType">図形のタイプ</param>
            <exception cref="T:System.ArgumentException"><paramref name="shapeType"/>の値が不正</exception>
            <returns><paramref name="shapeType"/>に対応する図形を持つ<see cref="T:asd.Shape"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib.ShapeProvider.GetSerializableShape(asd.Shape)">
            <summary>
            <see cref="T:asd.Shape"/>から<see cref="T:fslib.Serialization.ISerializableShape"/>のインスタンスを生成する
            </summary>
            <param name="shape">もととなる<see cref="T:asd.Shape"/>のインスタンス</param>
            <exception cref="T:System.ArgumentException"><paramref name="shape"/>が想定されていない型</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="shape"/>がnull</exception>
            <returns></returns>
        </member>
        <member name="T:fslib.SoundState">
            <summary>
            音の状態を表す列挙体
            </summary>
        </member>
        <member name="F:fslib.SoundState.Played">
            <summary>
            再生中
            </summary>
        </member>
        <member name="F:fslib.SoundState.Paused">
            <summary>
            一時停止中
            </summary>
        </member>
        <member name="F:fslib.SoundState.Stopped">
            <summary>
            停止中
            </summary>
        </member>
        <member name="T:fslib.SoundPlus">
            <summary>
            Altseed上でサウンドを再生するときの<see cref="T:asd.Sound"/>クラスや<see cref="T:asd.SoundSource"/>クラスをパックしたもの
            </summary>
        </member>
        <member name="P:fslib.SoundPlus.SoundState">
            <summary>
            現在の音源の再生状況を取得する
            </summary>
        </member>
        <member name="P:fslib.SoundPlus.IsReleased">
            <summary>
            メモリから解放されたかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.SoundPlus.Length">
            <summary>
            音源の長さを取得する
            </summary>
        </member>
        <member name="P:fslib.SoundPlus.LoopStartingPoint">
            <summary>
            ループポイント(秒)の開始地点を設定または取得する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が0未満または<see cref="P:fslib.SoundPlus.LoopEndPoint"/>より以上</exception>
        </member>
        <member name="P:fslib.SoundPlus.LoopEndPoint">
            <summary>
            ループポイント(秒)の終了地点を設定または取得する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が<see cref="P:fslib.SoundPlus.LoopStartingPoint"/>以下または<see cref="P:fslib.SoundPlus.Length"/>より大きい</exception>
        </member>
        <member name="P:fslib.SoundPlus.IsLoopingMode">
            <summary>
            ループするかどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.SoundPlus.Volume">
            <summary>
            音量を取得または設定する(0.0～1.0)
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定する値が規定範囲より外</exception>
        </member>
        <member name="P:fslib.SoundPlus.IsPlaybackSpeedEnabled">
            <summary>
            再生速度を変更できるかどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib.SoundPlus.PanningPosition">
            <summary>
            パン位置(-1.0～1.0)を設定または取得する
            -1.0で左，0.0で中央，1.0で右
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定する値が規定範囲より外</exception>
        </member>
        <member name="P:fslib.SoundPlus.PlayBackSpeed">
            <summary>
            再生速度(0.25～4)を設定または取得する
            1で等速で，音程は速度によって変化する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定する値が規定範囲より外</exception>
            <exception cref="T:System.InvalidOperationException">現在再生速度を変更できない状態である</exception>
        </member>
        <member name="M:fslib.SoundPlus.#ctor(asd.SoundSource)">
            <summary>
            コンストラクタ
            既に読み込まれた音源を使用する
            </summary>
            <param name="soundSource">制御する音源</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="soundSource"/>がnull</exception>
        </member>
        <member name="M:fslib.SoundPlus.#ctor(System.String,System.Boolean)">
            <summary>
            コンストラクタ  
            ファイルを読み込んで音源化して初期化する
            </summary>
            <param name="path">音源のあるファイルパス</param>
            <param name="isDecompressed">ファイルを解凍するかどうか</param>
            <exception cref="T:System.ArgumentException">音源を読み込めなかった</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
        </member>
        <member name="M:fslib.SoundPlus.Fade(System.Single,System.Single)">
            <summary>
            任意の音量に一定時間かけて変化させる
            </summary>
            <param name="second">変更にかかる時間(秒)</param>
            <param name="targetedVolume">変更先の音量(0.0～1.0)</param>
            <remarks>
            この指定される音量は<see cref="P:fslib.SoundPlus.Volume"/>に指定される音量とは異なり、<see cref="M:fslib.SoundPlus.FadeIn(System.Single)"/>、<see cref="M:fslib.SoundPlus.FadeOut(System.Single)"/>。
            つまり、このメソッドは<see cref="M:fslib.SoundPlus.FadeIn(System.Single)"/>、<see cref="M:fslib.SoundPlus.FadeOut(System.Single)"/>の任意音量指定版と言える。
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetedVolume"/>が規定範囲外又は<paramref name="second"/>が0未満または<see cref="P:fslib.SoundPlus.Length"/>より大きい</exception>
            <exception cref="T:System.InvalidOperationException">音が再生中ではない</exception>
        </member>
        <member name="M:fslib.SoundPlus.FadeIn(System.Single)">
            <summary>
            音をフェードインさせる
            </summary>
            <param name="second">掛かる時間(秒)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="second"/>が0未満または<see cref="P:fslib.SoundPlus.Length"/>より大きい</exception>
            <exception cref="T:System.InvalidOperationException">音が再生中ではない</exception>
        </member>
        <member name="M:fslib.SoundPlus.FadeOut(System.Single)">
            <summary>
            音をフェードアウトさせる
            </summary>
            <param name="second">掛かる時間(秒)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="second"/>が0未満または<see cref="P:fslib.SoundPlus.Length"/>より大きい</exception>
            <exception cref="T:System.InvalidOperationException">音が再生中ではない</exception>
        </member>
        <member name="M:fslib.SoundPlus.ForceToPlay">
            <summary>
            現在の状態に関係なく強制的に音を再生する
            </summary>
            <remarks>既に再生中だった音のID管理はこのインスタンスでは実行されなくなる</remarks>
        </member>
        <member name="M:fslib.SoundPlus.Pause">
            <summary>
            音を一時停止させる
            </summary>
            <exception cref="T:System.InvalidOperationException">音が再生中ではないまたは既に一時停止されている</exception>
        </member>
        <member name="M:fslib.SoundPlus.Play">
            <summary>
            音を再生する
            </summary>
            <exception cref="T:System.InvalidOperationException">音が既に再生中または一時停止中だった</exception>
        </member>
        <member name="M:fslib.SoundPlus.PlayWithFadeIn(System.Single)">
            <summary>
            フェードインしながら音の再生を開始する
            </summary>
            <param name="second">フェードインにかける時間</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="second"/>が0未満または<see cref="P:fslib.SoundPlus.Length"/>より大きい</exception>
            <exception cref="T:System.InvalidOperationException">既に再生中または一時停止中</exception>
        </member>
        <member name="M:fslib.SoundPlus.PlayWithoutUpdateID">
            <summary>
            このインスタンスのIDは更新せず音源を再生する
            </summary>
            <returns>再生の結果得られるID</returns>
        </member>
        <member name="M:fslib.SoundPlus.Resume">
            <summary>
            一時停止中の音の一時停止を解除する
            </summary>
            <exception cref="T:System.InvalidOperationException">一時停止中ではなかった</exception>
        </member>
        <member name="M:fslib.SoundPlus.Stop">
            <summary>
            音を停止する
            </summary>
            <exception cref="T:System.InvalidOperationException">音が再生中ではない</exception>
        </member>
        <member name="M:fslib.SoundPlus.TryPause">
            <summary>
            音を一時停止させる
            </summary>
            <returns>一時停止できたかどうか</returns>
        </member>
        <member name="M:fslib.SoundPlus.TryPlay">
            <summary>
            音を再生する
            </summary>
            <returns>再生できたかどうか</returns>
        </member>
        <member name="M:fslib.SoundPlus.TryPlayBackSpeed(System.Single)">
            <summary>
            再生速度を設定する
            </summary>
            <param name="value">設定する値</param>
            <returns>再生速度を設定できたかどうか</returns>
        </member>
        <member name="M:fslib.SoundPlus.TryResume">
            <summary>
            一時停止中の音の一時停止を解除する
            </summary>
            <returns>一時停止を解除できたかどうか</returns>
        </member>
        <member name="M:fslib.SoundPlus.TrySetVolume(System.Single)">
            <summary>
            音量を設定する
            </summary>
            <param name="value">設定する値</param>
            <returns>音量を設定できたかどうか</returns>
        </member>
        <member name="M:fslib.SoundPlus.TryStop">
            <summary>
            音を停止する
            </summary>
            <returns>音を停止できたかどうか</returns>
        </member>
        <member name="T:fslib.StringHelper">
            <summary>
            <see cref="T:System.String"/>の補助クラス
            </summary>
        </member>
        <member name="M:fslib.StringHelper.GetRandomString(System.Int32)">
            <summary>
            ランダムな文字列を取得する
            </summary>
            <param name="length">文字列の長さ</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/>が0未満</exception>
            <returns>ランダムに生成された文字列</returns>
        </member>
        <member name="T:fslib.ColorDefault">
            <summary>
            <see cref="T:asd.Color"/>のRGBA値の入力がめんどくさいとき用
            </summary>
        </member>
        <member name="P:fslib.ColorDefault.CS">
            <summary>
            使用する<see cref="T:fslib.ColorSet"/>
            </summary>
        </member>
        <member name="P:fslib.ColorDefault.Alpha">
            <summary>
            α値
            </summary>
        </member>
        <member name="P:fslib.ColorDefault.WindowDefaultColor">
            <summary>
            <see cref="F:fslib.ColorSet.WindowDefault"/>のRGBA
            </summary>
        </member>
        <member name="P:fslib.ColorDefault.CarsolDefaultColor">
            <summary>
            <see cref="F:fslib.ColorSet.CursorDefault"/>のRGBA
            </summary>
        </member>
        <member name="M:fslib.ColorDefault.#ctor(fslib.ColorSet,System.Byte)">
            <summary>
            コンストラクタ
            </summary>
            <param name="colorSet">色の種類</param>
            <param name="alpha">不透明度</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="colorSet"/>で不正な値が指定された</exception>
        </member>
        <member name="M:fslib.ColorDefault.#ctor(fslib.ColorSet)">
            <summary>
            コンストラクタ
            </summary>
            <param name="colorSet">色の種類</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="colorSet"/>で不正な値が指定された</exception>
        </member>
        <member name="P:fslib.ColorDefault.AsdColor">
            <summary>
            <see cref="T:asd.Color"/>に変換する
            </summary>
        </member>
        <member name="P:fslib.ColorDefault.Index">
            <summary>
            色の通し番号を取得する
            </summary>
        </member>
        <member name="P:fslib.ColorDefault.ColorName">
            <summary>
            色の名前を取得する
            </summary>
        </member>
        <member name="M:fslib.ColorDefault.AlphaSetted">
            <summary>
            <see cref="P:fslib.ColorDefault.Alpha"/>が初期と別の値が設定されているか返す
            </summary>
        </member>
        <member name="M:fslib.ColorDefault.ColorDetermination(fslib.ColorSet,System.Nullable{System.Byte})">
            <summary>
            <see cref="T:asd.Color"/>に変換する
            </summary>
            <param name="colorSet">色の種類</param>
            <param name="alpha">不透明度</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">不正な値が指定された</exception>
        </member>
        <member name="M:fslib.ColorDefault.TryGetColorSet(asd.Color,fslib.ColorDefault@)">
            <summary>
            <see cref="T:asd.Color"/>が<see cref="T:fslib.ColorSet"/>のセットに存在するか返す
            </summary>
            <param name="color">調べたい<see cref="T:asd.Color"/></param>
            <param name="default">存在していたらその値を，存在していなかったら既定値を返す</param>
            <returns>存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib.CenterPositionType">
            <summary>
            CenterPositionの設定方法を表す列挙体
            </summary>
        </member>
        <member name="F:fslib.CenterPositionType.UpperLeft">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:fslib.CenterPositionType.CenterLeft">
            <summary>
            左中央
            </summary>
        </member>
        <member name="F:fslib.CenterPositionType.DownerLeft">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:fslib.CenterPositionType.UpperCenter">
            <summary>
            中央上
            </summary>
        </member>
        <member name="F:fslib.CenterPositionType.Center">
            <summary>
            中央
            </summary>
        </member>
        <member name="F:fslib.CenterPositionType.DownerCenter">
            <summary>
            中央下
            </summary>
        </member>
        <member name="F:fslib.CenterPositionType.UpperRight">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:fslib.CenterPositionType.CenterRight">
            <summary>
            右中央
            </summary>
        </member>
        <member name="F:fslib.CenterPositionType.DownerRight">
            <summary>
            右下
            </summary>
        </member>
        <member name="T:fslib.IObject2DPlus">
            <summary>
            <see cref="T:asd.Object2D"/>の発展形を表す
            </summary>
        </member>
        <member name="P:fslib.IObject2DPlus.IsAdded">
            <summary>
            レイヤーに追加されているかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib.IObject2DPlus.Position">
            <summary>
            現在の座標を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.IObject2DPlus.Object2DType">
            <summary>
            自身のタイプを取得する
            </summary>
        </member>
        <member name="P:fslib.IObject2DPlus.Scale">
            <summary>
            拡大率を取得または設定する
            </summary>
        </member>
        <member name="P:fslib.IObject2DPlus.Scene">
            <summary>
            所属しているシーンを取得する
            </summary>
        </member>
        <member name="P:fslib.IObject2DPlus.Size">
            <summary>
            サイズを取得または設定する
            </summary>
        </member>
        <member name="M:fslib.IObject2DPlus.AsObject2D">
            <summary>
            自身<see cref="T:asd.Object2D"/>として返す
            </summary>
            <returns><see cref="T:asd.Object2D"/>として返す自身のインスタンス</returns>
        </member>
        <member name="M:fslib.IObject2DPlus.ExistComponent(System.String)">
            <summary>
            指定したキーを持つコンポーネントが存在するかどうかを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.IObject2DPlus.GoToDestPos(asd.Vector2DF,System.Int32)">
            <summary>
            指定した場所に向けて一定速度で直線運動をする
            </summary>
            <param name="destPosition">ゴールとなる座標</param>
            <param name="flames">移動にかけるフレーム</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="flames"/>が負の値</exception>
            <exception cref="T:System.InvalidOperationException">既に移動中</exception>
        </member>
        <member name="M:fslib.IObject2DPlus.SetSquareScale(System.Single)">
            <summary>
            拡大率をnew asd.Vector2DF(value, value)に設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib.IObject2DPlus.TryAddComponent(asd.Object2DComponent,System.String)">
            <summary>
            <see cref="T:asd.Object2DComponent"/>を登録する
            </summary>
            <param name="component">登録する<see cref="T:asd.Object2DComponent"/></param>
            <param name="key"><paramref name="component"/>に結びつけるキー</param>
            <returns>登録出来たらtrue，できなかったらfalse</returns>
        </member>
        <member name="M:fslib.IObject2DPlus.TryRemoveComponent(System.String)">
            <summary>
            <see cref="T:asd.Object2DComponent"/>をオブジェクトから削除する
            </summary>
            <param name="key"><see cref="T:asd.Object2DComponent"/>と結びつけられたキー</param>
            <returns>削除出来たらtrue，できなかったらfalse</returns>
        </member>
        <member name="T:fslib.TextObject2DPlus">
            <summary>
            プロパティやメソッドを追加した拡張版
            </summary>
        </member>
        <member name="P:fslib.TextObject2DPlus.Size">
            <summary>
            サイズを取得または設定する。
            <see cref="M:asd.Font.CalcTextureSize(System.String,asd.WritingDirection)"/>によって計算される。
            </summary>
        </member>
        <member name="P:fslib.TextObject2DPlus.IsAdded">
            <summary>
            レイヤーに追加されていてかつ破棄されていないかどうかを返す。
            </summary>
        </member>
        <member name="P:fslib.TextObject2DPlus.Scene">
            <summary>
            所属しているシーンを取得する
            </summary>
        </member>
        <member name="M:fslib.TextObject2DPlus.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.TextObject2DPlus.#ctor(asd.Font)">
            <summary>
            コンストラクタ
            </summary>
            <param name="font">使用するフォント</param>
        </member>
        <member name="M:fslib.TextObject2DPlus.#ctor(asd.Font,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="font">使用するフォント</param>
            <param name="text">表示する文字列</param>
        </member>
        <member name="M:fslib.TextObject2DPlus.#ctor(asd.Font,System.String,asd.Vector2DF)">
            <summary>
            コンストラクタ
            </summary>
            <param name="font">使用するフォント</param>
            <param name="text">表示する文字列</param>
            <param name="position">表示する座標</param>
        </member>
        <member name="M:fslib.TextObject2DPlus.AddOtherObject(asd.Object2D)">
            <summary>
            指定したオブジェクトを自身が登録されているレイヤーに登録する
            </summary>
            <param name="obj">登録する<see cref="T:asd.Object2D"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/>が既にレイヤーに登録されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>がnull</exception>
        </member>
        <member name="M:fslib.TextObject2DPlus.SetCenterposition(fslib.CenterPositionType)">
            <summary>
            <see cref="P:asd.TextObject2D.CenterPosition"/>を指定した場所に設定する
            </summary>
            <param name="type"><see cref="P:asd.TextObject2D.CenterPosition"/>の設定位置</param>
        </member>
        <member name="M:fslib.TextObject2DPlus.SetColor(fslib.ColorSet)">
            <summary>
            指定した色を設定する
            </summary>
            <param name="set">設定する色</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="set"/>の値が不正</exception>
        </member>
        <member name="M:fslib.TextObject2DPlus.SetSquareScale(System.Single)">
            <summary>
            拡大率をnew asd.Vector2DF(value, value)に設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib.TextObject2DPlus.ShowInOrder(System.Int32)">
            <summary>
            文字列を少しずつ表示する
            </summary>
            <param name="interval">文字表示の間隔フレーム数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval"/>の値が0以下</exception>
            <exception cref="T:System.InvalidOperationException">既にメソッドが起動済み</exception>
        </member>
        <member name="M:fslib.TextObject2DPlus.ShowInOrder(System.String,System.Int32)">
            <summary>
            指定した文字列を少しずつ表示する
            </summary>
            <param name="text">表示していく文字列</param>
            <param name="interval">文字表示の間隔フレーム数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval"/>の値が0以下</exception>
            <exception cref="T:System.InvalidOperationException">既にメソッドが起動済み</exception>
        </member>
        <member name="M:fslib.TextObject2DPlus.ExistComponent(System.String)">
            <summary>
            指定したキーを持つコンポーネントが存在するかどうかを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.TextObject2DPlus.GoToDestPos(asd.Vector2DF,System.Int32)">
            <summary>
            指定した場所に向けて一定速度で直線運動をする
            </summary>
            <param name="destPosition">ゴールとなる座標</param>
            <param name="flames">移動にかけるフレーム</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="flames"/>が負の値</exception>
            <exception cref="T:System.InvalidOperationException">既に移動中</exception>
        </member>
        <member name="M:fslib.TextObject2DPlus.MoveLayer(asd.Layer2D)">
            <summary>
            指定したレイヤーに登録を移す
            </summary>
            <param name="nextLayer">登録先の<see cref="T:asd.Layer2D"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="nextLayer"/>がnull</exception>
        </member>
        <member name="M:fslib.TextObject2DPlus.RemoveMySelf">
            <summary>
            登録されているレイヤーから自身を削除する
            </summary>
            <exception cref="T:System.InvalidOperationException">レイヤーに登録されていない</exception>
        </member>
        <member name="M:fslib.TextObject2DPlus.TryAddComponent(asd.Object2DComponent,System.String)">
            <summary>
            <see cref="T:asd.Object2DComponent"/>を登録する
            </summary>
            <param name="component">登録する<see cref="T:asd.Object2DComponent"/></param>
            <param name="key"><paramref name="component"/>に結びつけるキー</param>
            <returns>登録出来たらtrue，できなかったらfalse</returns>
        </member>
        <member name="M:fslib.TextObject2DPlus.TryRemoveComponent(System.String)">
            <summary>
            <see cref="T:asd.Object2DComponent"/>をオブジェクトから削除する
            </summary>
            <param name="key"><see cref="T:asd.Object2DComponent"/>と結びつけられたキー</param>
            <returns>削除出来たらtrue，できなかったらfalse</returns>
        </member>
        <member name="M:fslib.TextObject2DPlus.Clone">
            <summary>
            全く同じの<see cref="T:fslib.TextObject2DPlus"/>のインスタンスを生成する
            </summary>
            <returns>コピーされたこのインスタンス</returns>
        </member>
        <member name="T:fslib.TextureObject2DPlus">
            <summary>
            プロパティやメソッドを追加した拡張版
            </summary>
        </member>
        <member name="P:fslib.TextureObject2DPlus.IsAdded">
            <summary>
            レイヤーに追加されていてかつ破棄されていないかどうかを返す。
            </summary>
        </member>
        <member name="P:fslib.TextureObject2DPlus.Size">
            <summary>
            サイズを取得または設定する。
            </summary>
            <remarks><see cref="P:asd.TextureObject2D.Texture"/>と<see cref="P:asd.Object2D.Scale"/>の積が返される。</remarks>
        </member>
        <member name="P:fslib.TextureObject2DPlus.Scene">
            <summary>
            所属しているシーンを取得する
            </summary>
        </member>
        <member name="M:fslib.TextureObject2DPlus.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:fslib.TextureObject2DPlus.#ctor(asd.Texture2D)">
            <summary>
            コンストラクタ
            </summary>
            <param name="texture">表示するテクスチャ</param>
        </member>
        <member name="M:fslib.TextureObject2DPlus.#ctor(asd.Texture2D,asd.Vector2DF)">
            <summary>
            コンストラクタ
            </summary>
            <param name="texture">表示するテクスチャ</param>
            <param name="position">表示する座標</param>
        </member>
        <member name="M:fslib.TextureObject2DPlus.AddOtherObject(asd.Object2D)">
            <summary>
            指定したオブジェクトを自身が登録されているレイヤーに登録する
            </summary>
            <param name="obj">登録する<see cref="T:asd.Object2D"/></param>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/>が既にレイヤーに登録されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>がnull</exception>
        </member>
        <member name="M:fslib.TextureObject2DPlus.GoToDestPos(asd.Vector2DF,System.Int32)">
            <summary>
            指定した場所に向けて一定速度で直線運動をする
            </summary>
            <param name="destPosition">ゴールとなる座標</param>
            <param name="flames">移動にかけるフレーム</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="flames"/>が負の値</exception>
            <exception cref="T:System.InvalidOperationException">既に移動中</exception>
        </member>
        <member name="M:fslib.TextureObject2DPlus.SetSquareScale(System.Single)">
            <summary>
            拡大率をnew asd.Vector2DF(value, value)に設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib.TextureObject2DPlus.ExistComponent(System.String)">
            <summary>
            指定したキーを持つコンポーネントが存在するかどうかを返す。
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>存在していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib.TextureObject2DPlus.MoveLayer(asd.Layer2D)">
            <summary>
            指定したレイヤーに登録を移す
            </summary>
            <param name="nextLayer">登録先の<see cref="T:asd.Layer2D"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="nextLayer"/>がnull</exception>
        </member>
        <member name="M:fslib.TextureObject2DPlus.SetCenterposition(fslib.CenterPositionType)">
            <summary>
            <see cref="P:asd.TextureObject2D.CenterPosition"/>を指定した場所に設定する
            </summary>
            <param name="type"><see cref="P:asd.TextureObject2D.CenterPosition"/>の設定位置</param>
        </member>
        <member name="M:fslib.TextureObject2DPlus.SetColor(fslib.ColorSet)">
            <summary>
            指定した色を設定する
            </summary>
            <param name="set">設定する色</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="set"/>の値が不正</exception>
        </member>
        <member name="M:fslib.TextureObject2DPlus.RemoveMySelf">
            <summary>
            登録されているレイヤーから自身を削除する
            </summary>
            <exception cref="T:System.InvalidOperationException">レイヤーに登録されていない</exception>
        </member>
        <member name="M:fslib.TextureObject2DPlus.TryAddComponent(asd.Object2DComponent,System.String)">
            <summary>
            <see cref="T:asd.Object2DComponent"/>を登録する
            </summary>
            <param name="component">登録する<see cref="T:asd.Object2DComponent"/></param>
            <param name="key"><paramref name="component"/>に結びつけるキー</param>
            <returns>登録出来たらtrue，できなかったらfalse</returns>
        </member>
        <member name="M:fslib.TextureObject2DPlus.TryRemoveComponent(System.String)">
            <summary>
            <see cref="T:asd.Object2DComponent"/>をオブジェクトから削除する
            </summary>
            <param name="key"><see cref="T:asd.Object2DComponent"/>と結びつけられたキー</param>
            <returns>削除出来たらtrue，できなかったらfalse</returns>
        </member>
        <member name="M:fslib.TextureObject2DPlus.Clone">
            <summary>
            全く同じの<see cref="T:fslib.TextureObject2DPlus"/>のインスタンスを生成する
            </summary>
            <returns>コピーされたこのインスタンス</returns>
        </member>
        <member name="T:fslib.Window">
            <summary>
            汎用的なウィンドウ
            </summary>
        </member>
        <member name="M:fslib.Window.#ctor(asd.Vector2DF,System.Int32,asd.Vector2DI,asd.Color,System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">座標</param>
            <param name="drawingPriority">描画優先度</param>
            <param name="size">大きさ(横, 縦)</param>
            <param name="color">色(RGBA)</param>
            <param name="flame">枠の有無</param>
            <param name="useBack">透過の有無</param>
        </member>
        <member name="M:fslib.Window.#ctor(asd.Vector2DF,System.Int32,asd.Vector2DI,fslib.ColorSet,System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">座標</param>
            <param name="drawingPriority">描画優先度</param>
            <param name="size">大きさ(横, 縦)</param>
            <param name="colorSet">色の種類</param>
            <param name="flame">枠の有無</param>
            <param name="useBack">透過の有無</param>
        </member>
        <member name="M:fslib.Window.#ctor(asd.RectF,System.Int32,asd.Color,System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="rect">座標と大きさ(横, 縦)</param>
            <param name="drawingPriority">描画優先度</param>
            <param name="color">色(RGBA)</param>
            <param name="flame">枠の有無</param>
            <param name="useBack">透過の有無</param>
        </member>
        <member name="M:fslib.Window.#ctor(asd.RectF,System.Int32,fslib.ColorSet,System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="rect">座標と大きさ(横, 縦)</param>
            <param name="drawingPriority">描画優先度</param>
            <param name="colorSet">色の種類</param>
            <param name="flame">枠の有無</param>
            <param name="useBack">透過の有無</param>
        </member>
        <member name="M:fslib.Window.ToString">
            <summary>
            文字列化
            </summary>
        </member>
        <member name="T:fslib.WindowBase">
            <summary>
            汎用的なウィンドウ
            </summary>
        </member>
        <member name="P:fslib.WindowBase.UseBlackBack">
            <summary>
            後ろに黒いウィンドウを当てるかの有無
            </summary>
        </member>
        <member name="P:fslib.WindowBase.GeneratingFlame">
            <summary>
            枠の生成の有無
            </summary>
        </member>
        <member name="P:fslib.WindowBase.Thickness">
            <summary>
            枠の太さ
            </summary>
        </member>
        <member name="P:fslib.WindowBase.LineColor">
            <summary>
            枠の色
            </summary>
        </member>
        <member name="P:fslib.WindowBase.WindowTexture">
            <summary>
            コンストラクタで設定される画像を取得・設定する
            </summary>
        </member>
        <member name="P:fslib.WindowBase.DrawingPriority">
            <summary>
            描画優先度を取得または設定する。
            </summary>
        </member>
        <member name="M:fslib.WindowBase.#ctor(asd.Vector2DF,System.Int32,asd.Vector2DI,asd.Color,System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">座標</param>
            <param name="drawingPriority">描画優先度</param>
            <param name="size">大きさ(横, 縦)</param>
            <param name="color">色(RGBA)</param>
            <param name="flame">枠の有無</param>
            <param name="useBack">透過の有無</param>
        </member>
        <member name="M:fslib.WindowBase.#ctor(asd.Vector2DF,System.Int32,asd.Vector2DI,fslib.ColorSet,System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="position">座標</param>
            <param name="drawingPriority">描画優先度</param>
            <param name="size">大きさ(横, 縦)</param>
            <param name="colorSet">色の種類</param>
            <param name="flame">枠の有無</param>
            <param name="useBack">透過の有無</param>
        </member>
        <member name="M:fslib.WindowBase.#ctor(asd.RectF,System.Int32,asd.Color,System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="rect">座標と大きさ(横, 縦)</param>
            <param name="drawingPriority">描画優先度</param>
            <param name="color">色(RGBA)</param>
            <param name="flame">枠の有無</param>
            <param name="useBack">透過の有無</param>
        </member>
        <member name="M:fslib.WindowBase.#ctor(asd.RectF,System.Int32,fslib.ColorSet,System.Boolean,System.Boolean)">
            <summary>
            コンストラクタ
            </summary>
            <param name="rect">座標と大きさ(横, 縦)</param>
            <param name="drawingPriority">描画優先度</param>
            <param name="colorSet">色の種類</param>
            <param name="flame">枠の有無</param>
            <param name="useBack">透過の有無</param>
        </member>
        <member name="M:fslib.WindowBase.DrawingFlame">
            <summary>
            枠の描画
            </summary>
        </member>
        <member name="P:fslib.WindowText.MainWindow">
            <summary>
            文字を表示するウィンドウを取得する。
            </summary>
        </member>
        <member name="P:fslib.WindowText.Texts">
            <summary>
            表示されるasd.TextObject2Dのコレクションを取得する。
            </summary>
        </member>
        <member name="P:fslib.WindowText.WindowTexture">
            <summary>
            MainWindowのテクスチャを取得する。
            </summary>
        </member>
        <member name="P:fslib.WindowText.Texture">
            <summary>
            MainWindowのテクスチャを取得する。
            </summary>
        </member>
        <member name="P:fslib.WindowText.WindowColor">
            <summary>
            MainWindowの色を取得または設定する。
            </summary>
        </member>
        <member name="P:fslib.WindowText.TextColor">
            <summary>
            Textsの色を一括設定する。
            </summary>
        </member>
        <member name="P:fslib.WindowText.Color">
            <summary>
            TextとMainWindowの色を一括で設定する。
            </summary>
        </member>
        <member name="P:fslib.WindowText.DrawingPriority">
            <summary>
            描画優先度を設定または取得する。
            MainWindow→valueが，Texts→value + PriorityIntervalが代入される。
            </summary>
        </member>
        <member name="P:fslib.WindowText.PriorityInterval">
            <summary>
            Textsの描画優先度をMainWindowよりいくつ上に設定するかを取得・設定する。
            </summary>
        </member>
        <member name="P:fslib.WindowText.CenterPosition">
            <summary>
            MainWindowのCenterPositionを取得または設定する。
            </summary>
        </member>
        <member name="P:fslib.WindowText.Position">
            <summary>
            MainWindowの座標を取得する。
            MainWindowの座標とそれに準じたTextsの座標を設定する。
            </summary>
        </member>
        <member name="P:fslib.WindowText.PositionDif">
            <summary>
            MainWindowの左上からTexts[0]への距離
            </summary>
        </member>
        <member name="P:fslib.WindowText.IndentInterval">
            <summary>
            改行時の上下の幅
            </summary>
        </member>
        <member name="M:fslib.WindowText.#ctor(fslib.Window,asd.Vector2DF,asd.Vector2DF,System.Single,asd.TextObject2D[])">
            <summary>
            コンストラクタ
            </summary>
            <param name="mainWindow">ベースとなるウィンドウ</param>
            <param name="posDif">MainWindowの左上から最初のテキストへの距離</param>
            <param name="position">MainWindowの座標</param>
            <param name="indent">改行したときの座標の変化量</param>
            <param name="texts">表示するテキスト</param>
        </member>
        <member name="M:fslib.WindowText.#ctor(fslib.Window,asd.Vector2DF,System.Single,asd.TextObject2D[])">
            <summary>
            コンストラクタ
            position = mainWindow.Positionとして変換
            </summary>
            <param name="mainWindow">ベースとなるウィンドウ</param>
            <param name="posDif">MainWindowの左上から最初のテキストへの距離</param>
            <param name="indent">改行したときの座標の変化量</param>
            <param name="texts">表示するテキスト</param>
        </member>
        <member name="M:fslib.WindowText.#ctor(fslib.Window,asd.Vector2DF,System.Single,asd.Font,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="mainWindow">ベースとなるウィンドウ</param>
            <param name="posDif">MainWindowの左上から最初のテキストへの距離</param>
            <param name="indent">改行したときの座標の変化量</param>
            <param name="textFont">テキストのフォント</param>
            <param name="text">テキストとして表示する文字列</param>
        </member>
    </members>
</doc>
